////////////////////////////////////////
//                                    //
//    MM2D Script: Masks and Forms    //
//                                    //
////////////////////////////////////////

void handleMasks()
{
	switch(mask)
	{
		case MASK_BLAST:
		{
			unless(getGlobalVar(GVAR_BLASTMASKCOOLDOWN,GV_MISC))
			{
				if(Input->Press[CB_L])
				{
					lweapon blast = CreateLWeaponAt(LW_BOMBBLAST,Hero->X+dirX(Hero->Dir)*16,Hero->Y+dirY(Hero->Dir)*16);
					blast->Damage=2;
					setGlobalVar(GVAR_BLASTMASKCOOLDOWN,GV_MISC,360);
					if(Hero->Item[8]||Hero->Item[37]) {Hero->InvFrames=40;freezeFrames=30;NoAction();}
				}
			}
			else
			{
				incGlobalVar(GVAR_BLASTMASKCOOLDOWN,GV_MISC,-1);
			}
			break;}
		case MASK_BUNNY:
		{
			if(Hero->Action==LA_SWIMMING)
				LinkMovement_SetLinkSpeedBoost(SPEEDBOOST_BUNNY_WATER);
			else LinkMovement_SetLinkSpeedBoost(SPEEDBOOST_BUNNY_LAND);
			break;}
	}
}

item script Mask //start
{
	//0 is no mask, 1-4 are transformation masks.
	void run(Mask maskID)
	{
		if(isForm(mask)||isForm(maskID))
		{
			if(isForm(maskID))
			{
				if(mask==maskID)
				{
					form = FORM_HUMAN;
					mask = MASK_NONE;
					currMaskTile = maskTile(MASK_NONE);
					NOTESOUND_A = 200;
					NOTESOUND_DOWN = 201;
					NOTESOUND_RIGHT = 202;
					NOTESOUND_LEFT = 203;
					NOTESOUND_UP = 204;
				}
				else
				{
					mask = maskID;
					form = <Form>maskID;
					currMaskTile = maskTile(mask);
					NOTESOUND_A = 200 + (5*maskID);
					NOTESOUND_DOWN = 201 + (5*maskID);
					NOTESOUND_RIGHT = 202 + (5*maskID);
					NOTESOUND_LEFT = 203 + (5*maskID);
					NOTESOUND_UP = 204 + (5*maskID);
				}
			}
		}
		else
		{
			if(mask==maskID)
			{
				mask = MASK_NONE;
				currMaskTile = maskTile(MASK_NONE);
			}
			else
			{
				mask = maskID;
				currMaskTile = maskTile(maskID);
			}
		}
	}
}//end

void handleTransformations()//start
{
	//start Form setup
	Hero->Item[FORMITEM_DEKU] = (form==FORM_DEKU);
	Hero->Item[FORMITEM_GORON] = (form==FORM_GORON&&!curled);
	Hero->Item[FORMITEM_GORON_CURLED] = (form==FORM_GORON&&curled&&!spikedRolling);
	Hero->Item[FORMITEM_GORON_SPIKED] = (form==FORM_GORON&&spikedRolling);
	Hero->Item[FORMITEM_ZORA] = (form==FORM_ZORA);
	Hero->Item[FORMITEM_FIERCE_DEITY] = (form==FORM_FIERCE_DEITY);
	//end Form setup
	if(Input->Button[CB_B])
	{//start ItemJinxing
		unless(itemAllowed(form,B_item))
		{
			Hero->ItemJinx = 3;
		}
	}
	else if(Input->Button[CB_EX1])
	{
		unless(itemAllowed(form,EX1_item))
		{
			Hero->ItemJinx = 3;
		}
	}
	else if(Input->Button[CB_EX2])
	{
		unless(itemAllowed(form,EX2_item))
		{
			Hero->ItemJinx = 3;
		}
	}//end
	unless(isFrozen)
	{
		switch(form)
		{
			case FORM_HUMAN: //start
				if(Input->Press[CB_R]&&Hero->Action!=LA_SWIMMING&&!Hero->Item[210])
				{
					Game->PlaySound(SFX_SHIELD);
				}
				if(Input->Button[CB_R]&&Hero->Action!=LA_SWIMMING&&!Input->Button[CB_A]&&!Input->Button[CB_B]&&!Input->Button[CB_EX1]&&!Input->Button[CB_EX2]&&!Hero->Item[210])
				{
					Hero->Item[8]=true;
					Hero->Item[37]=hasMirrorShield;
					Hero->Item[FORMITEM_SHIELD] = !hasMirrorShield;
					Hero->Item[FORMITEM_M_SHIELD] = hasMirrorShield;
				}
				else
				{
					Hero->Item[8]=false;
					Hero->Item[37]=false;
					Hero->Item[FORMITEM_SHIELD] = false;
					Hero->Item[FORMITEM_M_SHIELD] = false;
				}
				break;//end
			case FORM_DEKU: //start
				unless(Deku_flying)
				{
					if(Input->Press[CB_R])
					{
						useItem = I_DEKU_BUBBLE;
						Input->Press[CB_R]=false;
						Input->Button[CB_R]=false;
					}
				}
				else
				{
					dekuFly();
				}
				int linkcombot = Screen->ComboT[ComboAt(Hero->X+8,Hero->Y+12)];
				if(!Deku_flying&&(linkcombot==CT_WATER||linkcombot==CT_SHALLOWWATER))
				{
					--Deku_floating;
					if(isTouchingComboBy(COMBO_LILYPAD,8))
					{
						Deku_floating=60;
					}
					else if(Deku_floating>0&&Hero->Action!=LA_DROWNING&&!(Deku_floating%20))
					{//Play every 20 frames
						Game->PlaySound(SFX_DEKUHOP);
					}
				}
				else
				{
					Deku_floating = 60;
					Hero->Item[51] = true;
				}
				unless(Deku_floating)
				{
					Hero->Item[51]=false;
					Hero->Action=LA_DROWNING;
				}
				break;//end
			case FORM_GORON: //start
				if(Input->Press[CB_R])
				{
					if(curled)Game->PlaySound(SFX_GORONUNCURL);
					else Game->PlaySound(SFX_GORONCURL);
					curled=!curled;
					Hero->ItemJinx=3;
				}
				if(curled)
				{
					Hero->SwordJinx = 10;
					if(Input->Press[CB_A])
					{
						useItem = I_GORON_POUND;
						Input->Press[CB_A]=false;
						Input->Button[CB_A]=false;
					}
					Hero->Item[36]=false;
					Hero->Item[54]=true;
					if((Input->Button[CB_DOWN]||Input->Button[CB_RIGHT]||Input->Button[CB_LEFT]||Input->Button[CB_UP])&&(Hero->Action==LA_NONE||Hero->Action==LA_WALKING||Hero->Action==LA_GOTHURTLAND))
					{
						if(timeRolling<84)
						{
							LinkMovement_SetLinkSpeedBoost(-1.5);
							unless(timeRolling)
							{
								Game->PlaySound(SFX_GORONROLL_BEGIN);
							}
							spikedRolling=false;
						}
						else if(timeRolling<100)
						{
							unless((timeRolling-84)%14)
							{
								Game->PlaySound(SFX_GORONROLL_LOOP);
							}
							LinkMovement_SetLinkSpeedBoost(-0.5);
							spikedRolling=false;
						}
						else if(timeRolling<200||Game->Counter[CR_MAGIC]<MAGICCOST_SPIKEROLL)
						{
							unless((timeRolling-84)%16)
							{
								Game->PlaySound(SFX_GORONROLL_LOOP);
							}
							LinkMovement_SetLinkSpeedBoost(1);
							spikedRolling=false;
						}
						else
						{
							unless(spikedRolling)
							{
								spikeStartTime=timeRolling;
								Game->PlaySound(SFX_GORONROLL_SPEEDUP);
							}
							else
							{
								int time = timeRolling-(spikeStartTime+60);
								if(time>=0&&!(time%23))
								{
									Game->PlaySound(SFX_GORONROLL_SPEEDLOOP);
								}
							}
							LinkMovement_SetLinkSpeedBoost(2.5);
							unless(gameframe%EVERYXFRAMES_SPIKEROLL)
								Game->DCounter[CR_MAGIC]-=MAGICCOST_SPIKEROLL;
							spikedRolling=true;
						}
						timeRolling++;
					}
					else
					{
						Audio->EndSound(SFX_GORONROLL_BEGIN);
						Audio->EndSound(SFX_GORONROLL_LOOP);
						Audio->EndSound(SFX_GORONROLL_SPEEDLOOP);
						Audio->EndSound(SFX_GORONROLL_SPEEDUP);
						timeRolling = 0;
						spikedRolling=false;
					}
				}
				else
				{
					Audio->EndSound(SFX_GORONROLL_BEGIN);
					Audio->EndSound(SFX_GORONROLL_LOOP);
					Audio->EndSound(SFX_GORONROLL_SPEEDLOOP);
					Audio->EndSound(SFX_GORONROLL_SPEEDUP);
					Audio->EndSound(SFX_GORONPOUND);
					Hero->Item[36]=true;
					Hero->Item[54]=false;
					timeRolling = 0;
					spikedRolling=false;
				}
				if(spikedRolling)
				{
					goronSpikeRoll();
				}
				break;//end
			case FORM_ZORA: //start
				if(Input->Press[CB_R])
				{
					fireZoraBoomerang();
					Input->Press[CB_R]=false;
					Input->Button[CB_R]=false;
				}
				break;//end
			case FORM_FIERCE_DEITY: //start
				if(Input->Press[CB_R]&&Hero->Action!=LA_SWIMMING)
				{
					Game->PlaySound(SFX_SHIELD);
				}
				if(Input->Button[CB_R]&&Hero->Action!=LA_SWIMMING&&!Input->Button[CB_A])
				{
					Hero->Item[8]=true;
					Hero->Item[37]=hasMirrorShield;
					killActionsBut({CB_RIGHT,CB_LEFT,CB_UP,CB_DOWN,CB_EX4,CB_A});
				}
				else
				{
					Hero->Item[8]=false;
					Hero->Item[37]=false;
				}
				break;//end
		}
	}
	if(form!=FORM_HUMAN)//start
	{
		Hero->Item[FORMITEM_SHIELD] = false;
		Hero->Item[FORMITEM_M_SHIELD] = false;
		Hero->Item[210] = false;
		if(form!=FORM_FIERCE_DEITY)
		{
			Hero->Item[8]=false;
			Hero->Item[37]=false;
		}
	}//end
	if(form!=FORM_DEKU)//start
	{
		Hero->Item[133] = false;
		Hero->Item[134] = false;
		Hero->Item[135] = false;
		Hero->Item[I_DEKU_BUBBLE] = false;
	}//end
	if(form!=FORM_GORON)//start
	{
		curled=false;
		spikedRolling=false;
		Hero->Item[36]=false;
		Hero->Item[54]=false;
	}//end
	if(form!=FORM_ZORA)//start
	{
		Hero->Item[136] = false;
	}//end
	if(form!=FORM_FIERCE_DEITY)//start
	{
		Hero->Item[208]=false;
		Hero->Item[209]=false;
	}//end
	switch(form)
	{
		case FORM_HUMAN: //start
			Hero->Item[51] = true;
			Hero->Item[214]=false;
			break;//end
		case FORM_DEKU: //start
			Hero->Item[51] = true;
			Hero->Item[214]=false;
			Hero->Item[133] = true;
			Hero->Item[134] = true;
			Hero->Item[135] = true;
			Hero->Item[I_DEKU_BUBBLE] = true;
			Hero->Item[8]=false;
			Hero->Item[37]=false;
			break;//end
		case FORM_GORON: //start
			Hero->Item[51]=false;
			Hero->Item[214]=false;
			Hero->Item[8]=false;
			Hero->Item[37]=false;
			break;//end
		case FORM_ZORA: //start
			Hero->Item[214]=true;
			Hero->Item[8]=false;
			Hero->Item[37]=false;
			Hero->Item[136] = true;
			if(Hero->Action==LA_SWIMMING)LinkMovement_SetLinkSpeedBoost(SPEEDBOOST_ZORA_WATER);
			handleZoraScreenChange();
			break;//end
		case FORM_FIERCE_DEITY: //start
			Hero->Item[208]=true;
			Hero->Item[209]=true;
			break;//end
	}
}//end
//start formFunctions
//For default form, check if item is not on blacklist, else check if item is on whitelist
bool itemAllowed(Form form, ItemID itemID)
{
	switch(form)
	{
		case FORM_HUMAN:
			switch(itemID)
			{
				case I_POWDERKEG:
					return false;
				default:
					return true;
			}
		case FORM_DEKU:
			switch(itemID)
			{
				case I_OCARINA:
				case I_MASK_DEKU:
				case I_MASK_GORON:
				case I_MASK_ZORA:
				case I_MASK_DEITY:
				case I_LENS_TRUTH:
				case I_DEKU_BUBBLE:
				case I_DEKUNUTS:
					return true;
				default:
					return false;
			}
		case FORM_GORON:
			if(curled) return false;
			switch(itemID)
			{
				case I_OCARINA:
				case I_MASK_DEKU:
				case I_MASK_GORON:
				case I_MASK_ZORA:
				case I_MASK_DEITY:
				case I_LENS_TRUTH:
				case I_POWDERKEG:
				case I_GORON_POUND:
					return true;
				default:
					return false;
			}
		case FORM_ZORA:
			switch(itemID)
			{
				case I_OCARINA:
				case I_MASK_DEKU:
				case I_MASK_GORON:
				case I_MASK_ZORA:
				case I_MASK_DEITY:
				case I_LENS_TRUTH:
					return true;
				default:
					return false;
			}
		case FORM_FIERCE_DEITY:
			switch(itemID)
			{
				case I_MASK_DEKU:
				case I_MASK_GORON:
				case I_MASK_ZORA:
				case I_MASK_DEITY:
				case I_LENS_TRUTH:
					return true;
				default:
					return false;
			}
	}
}

bool isTouchingComboBy(int comboID,int pixBy)
{
	int x = Hero->X;
	int y = Hero->Y;
	if(Screen->ComboD[ComboAt(Hero->X+pixBy,Hero->Y+pixBy)]==comboID)return true;
	if(Screen->ComboD[ComboAt(Hero->X+15-pixBy,Hero->Y+pixBy)]==comboID)return true;
	if(Screen->ComboD[ComboAt(Hero->X+pixBy,Hero->Y+15-pixBy)]==comboID)return true;
	if(Screen->ComboD[ComboAt(Hero->X+15-pixBy,Hero->Y+15-pixBy)]==comboID)return true;
	return false;
}
//end formFunctions
//start customFormFunctions
//start FFC DekuFlower
DEFINE maxDiveTime = 110;
ffc script dekuFlower
{
	void run(int filledCombo, int flightlength, int floorsUp, float speedMod)
	{
		int combo = this->Data;
		unless(speedMod)speedMod=-.5;
		bool dived = false;
		int diveTime = 20;
		while(true)
		{
			if(form!=1)
			{
				Deku_flying=0;
				diveTime = maxDiveTime;
				dived=false;
			}
			if(Hero->Invisible&&!dived&&!Deku_flying) {Waitframe();continue;}
			if(dived)
			{
				this->Data = filledCombo;
				Hero->Invisible = true;	
			}
			else
			{
				this->Data = combo;
				Hero->Invisible = false;
			}
			if(form==1&&Hero->X>this->X-8&&Hero->X<this->X+8&&Hero->Y>this->Y-8&&Hero->Y<this->Y+8)
			{
				if(dived)
				{
					diveTime = maxDiveTime;
					unless(Input->Button[CB_A])
					{
						dived=false;
						DekuFlightSpeedMod = speedMod;
						Deku_flying = flightlength;
						Game->PlaySound(68);
						Hero->Invisible = false;
						warpNumFloors=floorsUp;
					}
					else NoDirs();
				}
				else unless(Deku_flying)
				{
					if(Input->Button[CB_A]&&diveTime>0)
					{
						if(diveTime==maxDiveTime)Game->PlaySound(67);
						diveTime--;
						unless(diveTime)
						{
							dived=true;
						}
						NoDirs();
					}
					else unless(Input->Button[CB_A])
					{
						diveTime = maxDiveTime;
						Audio->EndSound(67);
					}
				}
			}
			else diveTime = maxDiveTime;
			Waitframe();
		}
	}
}
//end FFC DekuFlower
void dekuFly()//start DekuFly
{
	Deku_flying--;
	if(Input->Press[CB_R])Deku_flying=0;
	unless(Deku_flying)
	{
		Game->PlaySound(78);
		canFall=true;
	}
	else if((!(gameframe%6)&&Deku_flying>180)||(!(gameframe%12)&&Deku_flying>91)||(!(gameframe%24)||gameframe%24==6))
		Game->PlaySound(69);
	if(Input->Press[CB_A])useItem=I_DEKUNUTS;
	killActionsBut({CB_RIGHT,CB_LEFT,CB_UP,CB_DOWN,CB_EX4});
	LinkMovement_SetLinkSpeedBoost(DekuFlightSpeedMod);
}//end
void goronSpikeRoll()//start GoronRoll
{
	for(int i = countNPCInRange(CenterLinkX(),CenterLinkY(),24)-1;i>=0;--i)
	{
		npc anNPC = getNthNPCInRange(CenterLinkX(),CenterLinkY(),24,i);
		if(anNPC->isValid())
		{
			if(anNPC->CollDetection&&!anNPC->InvFrames&&anNPC->Defense[NPCD_SCRIPT2]!=NPCDT_IGNORE)
			{
				lweapon hit = CreateLWeaponAt(LW_SCRIPT2,anNPC->X+(anNPC->HitXOffset)+(anNPC->HitWidth/2),anNPC->Y+(anNPC->HitYOffset)+(anNPC->HitHeight/2));
				hit->Damage=2;
				hit->HitWidth=1;
				hit->HitHeight=1;
				hit->UseSprite(SPRITE_NONE);
				hit->Step=0;
			}
			else if(anNPC->InvFrames)
			{
				anNPC->Stun=5;
			}
		}
	}
}//end GoronSpikeRoll
void fireZoraBoomerang()//start ZoraRang
{
	unless(countLWeaponType(LW_BRANG))
	{
		itemdata Parent = Game->LoadItemData(I_ZORABRANG);
		lweapon zoraBoom1 = Screen->CreateLWeapon(LW_BRANG);
		zoraBoom1->X=CenterLinkX();
		zoraBoom1->Y=CenterLinkY();
		zoraBoom1->UseSprite(Parent->Sprites[0]);
		lweapon zoraBoom2 = Screen->CreateLWeapon(LW_BRANG);
		zoraBoom2->X=CenterLinkX();
		zoraBoom2->Y=CenterLinkY();
		zoraBoom2->UseSprite(Parent->Sprites[0]);
		
		//
		zoraBoom1->Angular=true;
		zoraBoom2->Angular=true;
		switch(Hero->Dir)
		{
			case DIR_DOWN:
				zoraBoom1->Angle=DIR16_RADS_RIGHTDOWN;
				zoraBoom2->Angle=DIR16_RADS_LEFTDOWN;
				break;
			
			case DIR_LEFT:
				zoraBoom1->Angle=DIR16_RADS_LEFTDOWN;
				zoraBoom2->Angle=DIR16_RADS_UPLEFT;
				break;
		
			case DIR_UP:
				zoraBoom1->Angle=DIR16_RADS_UPLEFT;
				zoraBoom2->Angle=DIR16_RADS_RIGHTUP;
				break;
		
			default:
				zoraBoom1->Angle=DIR16_RADS_RIGHTUP;
				zoraBoom2->Angle=DIR16_RADS_RIGHTDOWN;
		}
		zoraBoom1->Step=5;
		zoraBoom2->Step=5;
		zoraBoom1->Damage=1;
		zoraBoom2->Damage=1;
		zoraBoom1->Misc[BRANG_MISC_ANGLEACC]=0.035;
		zoraBoom2->Misc[BRANG_MISC_ANGLEACC]=0.035;
		zoraBoom1->CollDetection=false;
		zoraBoom2->CollDetection=false;
		zoraBoom1->Script = LWSCR_ZORABRANG;
		zoraBoom2->Script = LWSCR_ZORABRANG;
		zoraBoom1->Misc[BRANG_MISC_MULT] = 1;
		zoraBoom2->Misc[BRANG_MISC_MULT] = -1;
		zoraBoom1->Misc[BRANG_MISC_OTHER] = zoraBoom2;
		zoraBoom2->Misc[BRANG_MISC_OTHER] = zoraBoom1;
		zoraBoom1->Misc[BRANG_MISC_DEADTIMER] = -10;
		zoraBoom2->Misc[BRANG_MISC_DEADTIMER] = -10;
		zoraBoom1->Misc[LWMISC_LAYERDMAP] = Game->GetCurDMap() + 1;
		zoraBoom2->Misc[LWMISC_LAYERDMAP] = Game->GetCurDMap() + 1;
	}
}

lweapon script zoraBrang
{
	void run()
	{
		this->Weapon = LW_SWORD; //Allow cutting bushes!
		lweapon other = this->Misc[BRANG_MISC_OTHER];
		while(this->isValid())
		{
			unless(gameframe%20)Game->PlaySound(SFX_BRANG);
			unless(other->isValid())
			{
				unless(this->Misc[BRANG_MISC_DEADTIMER])
					this->Misc[BRANG_MISC_DEADTIMER] = 5;
			}
			else if(this->Misc[BRANG_MISC_DEADTIMER]<0)++this->Misc[BRANG_MISC_DEADTIMER];
			else if(Collision(this,other))
			{
				unless(this->Misc[BRANG_MISC_DEADTIMER])this->Misc[BRANG_MISC_DEADTIMER] = 10;
				unless(other->Misc[BRANG_MISC_DEADTIMER])other->Misc[BRANG_MISC_DEADTIMER] = 10;
			}
			int DegAngle = RadtoDeg(this->Angle);
			if(DegAngle%90>=89||DegAngle%90<=1)
			{
				unless(this->Misc[BRANG_MISC_HASTURNED])
				{
					this->Misc[BRANG_MISC_ANGLEACC]*=3;
					this->Misc[BRANG_MISC_HASTURNED]=1;
				}
			}
			if(this->Misc[BRANG_MISC_DEADTIMER]>0)
			{
				--this->Misc[BRANG_MISC_DEADTIMER];
				unless(this->Misc[BRANG_MISC_DEADTIMER])
				{
					this->DeadState=WDS_BOUNCE;
				}
			}
			this->Angle+=(this->Misc[BRANG_MISC_ANGLEACC]*this->Misc[BRANG_MISC_MULT]);
			for(int i = Screen->NumNPCs(); i > 0; --i)
			{
				npc n = Screen->LoadNPC(i);
				if(n->isValid()&&Collision(n,this)&&!n->InvFrames&&!n->Stun&&!getRelativeHeight(this,n))
				{
					int damage = this->Damage*2;
					int def = n->Defense[NPCD_BRANG];
					switch(def)
					{
						case NPCDT_HALFDAMAGE:{damage/=2;break;}
						case NPCDT_QUARTERDAMAGE:{damage/=4;break;}
						case NPCDT_STUN:{damage=0;break;}
						case NPCDT_STUNORBLOCK:{if(damage < 1) {Audio->PlaySound(SFX_CLINK);this->DeadState = WDS_BOUNCE;continue;}damage=0;break;}
						case NPCDT_STUNORIGNORE:{if(damage < 1) {continue;}damage=0;break;}
						case NPCDT_BLOCK:{this->DeadState = WDS_BOUNCE;continue;}
						case NPCDT_BLOCK2:{if(damage < 2) {Audio->PlaySound(SFX_CLINK);this->DeadState = WDS_BOUNCE;continue;}break;}
						case NPCDT_BLOCK4:{if(damage < 4) {Audio->PlaySound(SFX_CLINK);this->DeadState = WDS_BOUNCE;continue;}break;}
						case NPCDT_BLOCK6:{if(damage < 6) {Audio->PlaySound(SFX_CLINK);this->DeadState = WDS_BOUNCE;continue;}break;}
						case NPCDT_BLOCK8:{if(damage < 8) {Audio->PlaySound(SFX_CLINK);this->DeadState = WDS_BOUNCE;continue;}break;}
						case NPCDT_IGNORE:{continue;}
						case NPCDT_ONEHITKILL:{damage=n->HP;break;}
					}
					n->HP-=damage;
					n->InvFrames=10;
					n->Stun=10;
				}
			}
			Waitframe();
		}
	}
}
//end ZoraRang

void handleZoraScreenChange()//start ZoraSurfaceDive
{
	handleZoraSurfacing();
	handleZoraDiving();
}

void handleZoraSurfacing()
{
	unless(Input->Press[CB_L])return;
	if(getUpDMap()==-1)return;
	mapdata m = Game->LoadMapData(GetCurMap()+1,GetCurScreen());// UNFINISHED
	int combos[] = {ComboAt(Hero->X,Hero->Y),ComboAt(Hero->X,Hero->Y+15),ComboAt(Hero->X+15,Hero->Y),ComboAt(Hero->X+15,Hero->Y+15)};
	for(int i = 0; i < 4; i++)
	{
		if(m->ComboT[combos[i]] != CT_DIVEWARP)
		{
			return;
		}
	}
	warpUp();
}

void handleZoraDiving()
{
	if(Hero->Action != LA_DIVING)return;
	if(getDownDMap()==-1)return;
	int combos[] = {ComboAt(Hero->X,Hero->Y),ComboAt(Hero->X,Hero->Y+15),ComboAt(Hero->X+15,Hero->Y),ComboAt(Hero->X+15,Hero->Y+15)};
	for(int i = 0; i < 4; i++)
	{
		if(Screen->ComboT[combos[i]] != CT_DIVEWARP)
		{
			return;
		}
	}
	warpDown();
}//end
//end customFormFunctions
