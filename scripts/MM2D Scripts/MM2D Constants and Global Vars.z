/////////////////////////////////////////////////
//                                             //
// MM2D Script: Constants and Global Variables //
//                                             //
/////////////////////////////////////////////////

DEFINE __DEBUG = 1;
//start Custom Types
enum CompType
{
	LESS = -1, EQ, MORE
};

CompType comp(u arg1, u arg2)
{
	return (arg1 < arg2) ? LESS : ((arg1 == arg2) ? EQ : MORE);
}
//end
//start Ocarina Global Variables
//A combo representing the pressed button, with a transparent background
DEFINE NOTETILE_A = 892;
DEFINE NOTETILE_DOWN = 894;
DEFINE NOTETILE_RIGHT = 893;
DEFINE NOTETILE_LEFT = 895;
DEFINE NOTETILE_UP = 896;
//The CSet to draw the given combo in
DEFINE NOTECSET_A = 0;
DEFINE NOTECSET_DOWN = 0;
DEFINE NOTECSET_RIGHT = 0;
DEFINE NOTECSET_LEFT = 0;
DEFINE NOTECSET_UP = 0;
//The SFX id for the given note SFX (or use the default IDs, just be sure to use the same ones in ZQuest!)
int NOTESOUND_A = 200;
int NOTESOUND_DOWN = 201;
int NOTESOUND_RIGHT = 202;
int NOTESOUND_LEFT = 203;
int NOTESOUND_UP = 204;

bool DISPLAYTEXTONSONGLEARN = true;
//Sound FX to play if the played song is not a valid song
DEFINE SFX_ERROR = 64;
//List of songs:
int SONGNOTES_SongOfTime[] = {3,1,2,3,1,2,0,0};
int SONGNOTES_EponasSong[] = {5,4,3,5,4,3,0,0};
int SONGNOTES_SongOfStorms[] = {1,2,5,1,2,5,0,0};
int SONGNOTES_GoronsLullaby[] = {1,3,4,1,3,4,3,1};
int SONGNOTES_OathToOrder[] = {3,2,1,2,3,5,0,0};
int SONGNOTES_SongOfSoaring[] = {2,4,5,2,4,5,0,0};
int SONGNOTES_SongOfHealing[] = {4,3,2,4,3,2,0,0};
int SONGNOTES_ElegyOfEmptiness[] = {3,4,3,2,3,5,4,0};
int SONGNOTES_NewWaveBossaNova[] = {4,5,4,3,2,4,3,0};
int SONGNOTES_SongOfDoubleTime[] = {3,3,1,1,2,2,0,0};
int SONGNOTES_SongOfInvertedTime[] = {2,1,3,2,1,3,0,0};
int SONGNOTES_SonataOfAwakening[] = {5,4,5,4,1,3,1,0};
int SONGNOTES_ScarecrowsSong[8];
//Add custom songs:
//Put a name directly after the underscore, and numbers for notes in each spot.
//A=1,DOWN=2,RIGHT=3,LEFT=4,UP=5, and if the song is less than 8 notes, fill the ending spots with 0s. The // before the line of code must also be removed for the song to function.
//int[] SONGNOTES_ = {,,,,,,,};
//Song indexes
DEFINE SONG_SongOfTime = 0;
DEFINE SONG_EponasSong = 2;
DEFINE SONG_SongOfStorms = 4;
DEFINE SONG_GoronsLullaby = 12;
DEFINE SONG_OathToOrder = 13;
DEFINE SONG_SongOfSoaring = 14;
DEFINE SONG_SongOfHealing = 15;
DEFINE SONG_ElegyOfEmptiness = 16;
DEFINE SONG_NewWaveBossaNova = 17;
DEFINE SONG_SongOfDoubleTime = 18;
DEFINE SONG_SongOfInvertedTime = 19;
DEFINE SONG_SonataOfAwakening = 20;
DEFINE SONG_ScarecrowsSong = 21;
//Song MIDI IDs -- set these to the number of the MIDI you want to play, which should be the song played.
//Moved to MIDI enum! 13-Jul-19
//ScarecrowsSong has no SONGSOUND! This is intentional, though other songs should all have one!
bool LEARNED_SONGS[22];
//Constants
DEFINE NOTE_A = 1;
DEFINE NOTE_DOWN = 2;
DEFINE NOTE_RIGHT = 3;
DEFINE NOTE_LEFT = 4;
DEFINE NOTE_UP = 5;
DEFINE NULL_NOTE = 0;
DEFINE FRAMESOFSONGFREEZE = 600;
//Variables
bool ocarina_mode = false;
int ocIndex = 0;
int currSong[8];
int playedSong = -1;
int songFrames = 0;
int midiToReturn = 0;
bool scarecrowMode = false;
bool scarecrowRecord = false;
bool OC_doItemJinx = false;
//end Ocarina Global Variables
//start Subscreen Global Variables
DEFINE SUBSTATE_ITEMS = 0;
DEFINE SUBSTATE_KEY = 1;
DEFINE SUBSTATE_MAP = 2;
DEFINE MAP_SUBSCREEN = 1;
DEFINE SCRN_SUBSCREEN_ITEM = 48;
DEFINE SCRN_SUBSCREEN_MAP_OVERWORLD = 96;
DEFINE SCRN_SUBSCREEN_MAP_DUNGEON = 80;
DEFINE SCRN_SUBSCREEN_KEY = 64;
DEFINE CURSOR_ITEM = 45;
DEFINE CURSOR_CSET = 5;
DEFINE LARGE_CURSOR_ITEM = 85;
DEFINE DMAP_TOTAL = 3;
bool subscreen = false;
int subState = 0;
int cursorPos = 0;
int ITEM_LOCS[] = {33,34,35,36,37,38,41,42,43,44,45,46,49,50,51,52,53,54,57,58,59,60,61,62,65,66,67,68,69,70,73,74,75,76,77,78,81,82,83,84,85,86,89,90,91,92,93,94};
int KEY_LOCS[] = {27,51,52,53,54,55,57,61,67,68,69,70,71,97,99,101,103,105,91};
int QUAD_LOCS[] = {27,57,61,91};
int MAP_LOCS[] = {0};
int DUNGMAP_LOCS[] = {0};
bool DUNGEONS[] = {false,false,false,false};
//
int cursorIndex = 0;
int itemIndex = 0;
DEFINE ITEM_MAX_INDEX = 48;
DEFINE KEY_MAX_INDEX = 19;
DEFINE MAP_MAX_INDEX = 0;
DEFINE DUNGMAP_MAX_INDEX = 0;
ItemID ItemIDs[] =
	{I_MASK_POSTMANSHAT,I_MASK_ALLNIGHT,I_MASK_BLAST,I_MASK_STONE,I_MASK_GFAIRY,I_MASK_DEKU,
	I_OCARINA,I_BOWARROW,I_FIREARROWS,I_ICEARROWS,I_LIGHTARROWS,I_NULL,
	I_MASK_KEATON,I_MASK_BREMEN,I_MASK_BUNNYHOOD,I_MASK_DONGERO,I_MASK_SCENTS,I_MASK_GORON,
	I_BOMBS,I_BOMBCHUS,I_DEKUSTICK,I_DEKUNUTS,I_MAGICBEANS,I_NULL,
	I_MASK_ROMANI,I_MASK_CIRCUS,I_MASK_KAFEI,I_MASK_COUPLES,I_MASK_TRUTH,I_MASK_ZORA,
	I_POWDERKEG,I_PICTOGRAPH,I_LENS_TRUTH,I_HOOKSHOT,I_SWORD_GFAIRY_HAS,I_NULL,
	I_MASK_KAMARO,I_MASK_GIBDO,I_MASK_GARO,I_MASK_CAPTAINHAT,I_MASK_GIANT,I_MASK_DEITY,
	I_EMPTYBOTTLE_1,I_EMPTYBOTTLE_2,I_EMPTYBOTTLE_3,I_EMPTYBOTTLE_4,I_EMPTYBOTTLE_5,I_EMPTYBOTTLE_6};
//Passive:
DEFINE PASSIVE_TOP = -56;
DEFINE AX = 123;
DEFINE AY = -27;
DEFINE BX = 163;
DEFINE BY = -27;
DEFINE EX1X = 184;
DEFINE EX1Y = -46;
DEFINE EX2X = 205;
DEFINE EX2Y = -27;
DEFINE LX = 144;
DEFINE LY = -46;
DEFINE RX = 226;
DEFINE RY = -46;
DEFINE MASKX = 184;
DEFINE MASKY = -22;
DEFINE DAYSTART_X = 91;
DEFINE DAYSTART_Y = -24;
DEFINE DAYNUM_X = 112;
DEFINE DAYNUM_Y = -24;
DEFINE TIMESTART_X = 88;
DEFINE TIMESTART_Y = -15;
DEFINE NUMBERTILE = 67706;
DEFINE SEMICOLON = 67694;
DEFINE DOOMTILE = 67690;
DEFINE DAYTILE = 67692;
DEFINE SLOWTIME_TILE = 67695;
DEFINE TAEL_X = 95;
DEFINE TAEL_Y = -45;
//end Subscreen Global Variables
//start Pit Global Variables
int floating = 0;
int floatDir = 0;
bool canFall = true;
bool debugCanFall = false;
bool rafting = false;
DEFINE SFX_JUMPING = 45;
//end Pit Global Variables
//start EX Item Button Global Variables
ItemID EX1_item = NULL;
ItemID EX2_item = NULL;
ItemID B_item = NULL;
//end EX Item Button Global Variables
//start FormVars
DEFINE COMBO_LILYPAD = 7372;
DEFINE MAGICCOST_SPIKEROLL = 1;
DEFINE EVERYXFRAMES_SPIKEROLL = 10;
DEFINE NPCMISC_LASTSPIKEHIT = 0;
DEFINE SFX_DEKUHOP = 89;
DEFINE SFX_GORONCURL = 65;
DEFINE SFX_GORONUNCURL = 66;
DEFINE SFX_DEKUDIVE = 67;
DEFINE SFX_DEKULAUNCH = 68;
DEFINE SFX_DEKUFLIGHT = 69;
DEFINE SFX_DEKUSPIN = 70;
DEFINE SFX_GORONPUNCH = 71;
DEFINE SFX_GORONPOUND = 72;
DEFINE SFX_GORONROLL_BEGIN = 73;
DEFINE SFX_GORONROLL_LOOP = 74;
DEFINE SFX_GORONROLL_SPEEDUP = 75;
DEFINE SFX_GORONROLL_SPEEDLOOP = 76;
DEFINE SPEEDBOOST_BUNNY_WATER = 0.51;
DEFINE SPEEDBOOST_BUNNY_LAND = 1.02;
DEFINE SPEEDBOOST_ZORA_WATER = 1.5;
DEFINE FIRST_MASK_TILE = 65220;
//
enum Form
{
	FORM_HUMAN, FORM_DEKU, FORM_GORON, FORM_ZORA, FORM_FIERCE_DEITY
};
enum Mask
{
	MASK_NONE, MASK_DEKU, MASK_GORON, MASK_ZORA, MASK_FIERCE_DEITY,
	MASK_POSTMAN, MASK_ALLNIGHT, MASK_BLAST, MASK_STONE, MASK_GREATFAIRY,
	MASK_KEATON, MASK_BREMEN, MASK_BUNNY, MASK_DONGERO, MASK_SCENTS,
	MASK_ROMANI, MASK_CIRCUS, MASK_KAFEI, MASK_COUPLES, MASK_TRUTH,
	MASK_KAMARO, MASK_GIBDO, MASK_GARO, MASK_CAPTAIN, MASK_GIANTS
};
int maskTile(Mask mask)
{
	return FIRST_MASK_TILE + mask;
}
bool isForm(Mask mask)
{
	return mask>MASK_NONE && mask<=MASK_FIERCE_DEITY;
}
//
Form form = FORM_DEKU;
Mask mask = MASK_DEKU;
int currMaskTile = 65221;
int Deku_floating = 60;
int Deku_flying = 0;
int DekuFlightSpeedMod = -.5;
bool curled = false;
int useItem = 0;
int timeRolling = 0;
int spikeStartTime = 0;
bool spikedRolling = false;
//end FormVars
//start Rafting vars
int Rafting[4] = {-1,-1,-1,-1};
DEFINE RAFT_DIR = 0;
DEFINE RAFT_UP = 1;
DEFINE RAFT_X = 2;
DEFINE RAFT_Y = 3;
//end Rafting vars
//start Sound Constants
enum MIDI
{
	MIDI_NULL = -3,
	MIDI_MMOVERWORLD = 1,
	MIDI_CLOCK_TOWER,
	MIDI_CLOCK_TOWN,
	MIDI_MINIGAME,
	MIDI_MINIGAME_HOUSE,
	MIDI_THESTORM = 204,
	SONGMIDI_SongOfDoubleTime = 205,
	SONGMIDI_SongOfInvertedTime = 209,
	SONGMIDI_SongOfTime = 213,
	SONGMIDI_SongOfHealing = 217,
	SONGMIDI_SongOfStorms = 221,
	SONGMIDI_EponasSong = 225,
	SONGMIDI_SongOfSoaring = 229,
	SONGMIDI_SonataOfAwakening = 233,
	SONGMIDI_GoronsLullaby = 237,
	SONGMIDI_NewWaveBossaNova = 241,
	SONGMIDI_ElegyOfEmptiness = 245,
	SONGMIDI_OathToOrder = 249
};
DEFINE SFX_SHIELD = 63;
DEFINE SFX_DEKUNUT_SNAP = 79;
DEFINE SFX_DEKUNUT_FREEZE = 80;
//end Sound Constants
//start LayerScreens
DEFINE LAYERSMAP1 = 2;
DEFINE LAYERSCREEN_RAIN = 0x00; 
DEFINE LAYERSCREEN_SAVING = 0x10;
//end LayerScreens
//start Times
DEFINE FRAME = 0.0001;
DEFINE FRAMES_SECOND = 1;
int FRAMES_MINUTE = 60;
int FRAMES_HOUR = 3600;
int TIME_SECOND = FRAMES_SECOND*FRAME;
int TIME_MINUTE = FRAMES_MINUTE*FRAME;
int TIME_HOUR = FRAMES_HOUR*FRAME;
//end
//start Item Constants
enum ItemID
{
	I_INVALID = -1,
	I_MIN = 0,
	I_NULL = NULL,
	I_RUP_1 = 0,
	I_RUP_5 = 1,
	I_BOMBS = 3,
	I_SWORD_KOKIRI = 5,
	I_SWORD_RAZOR = 6,
	I_SWORD_GILDED = 7,
	I_HYLIANSHIELD = 8,
	I_BOWARROW = 13,
	I_FIREARROWS = 14,
	I_ZORABRANG = 23,
	I_DEKU_BUBBLE = 25,
	I_HEART_CONTAINER = 28,
	I_OCARINA = 31,
	I_MIRRORSHIELD = 37,
	I_RUP_20 = 38,
	I_RUP_50 = 39,
	I_RUP_200 = 40,
	I_WALLET = 41,
	I_WALLET_BIG = 42,
	I_POWDERKEG = 48,
	I_HEARTPIECE = 49,
	I_HOOKSHOT = 52,
	I_LENS_TRUTH = 53,
	I_GORON_POUND = 54,
	I_ICEARROWS = 57,
	I_QUIVER = 74,
	I_QUIVER_BIG = 75,
	I_QUIVER_BIGGEST = 76,
	I_BOMBBAG = 81,
	I_BOMBBAG_BIG = 82,
	I_BOMBBAG_BIGGEST = 83,
	I_RUP_10 = 86,
	I_RUP_100 = 87,
	I_BOMBBAG_POWDERKEG = 106,
	FORMITEM_DEKU = 123,
	FORMITEM_GORON = 124,
	FORMITEM_ZORA = 125,
	FORMITEM_FIERCE_DEITY = 126,
	I_MASK_GORON = 127,
	FORMITEM_GORON_CURLED = 128,
	FORMITEM_SHIELD = 129,
	FORMITEM_M_SHIELD = 130,
	I_MASK_ZORA = 131,
	FORMITEM_GORON_SPIKED = 132,
	I_DEKUSPINCHARGE = 135,
	I_LIGHTARROWS = 137,
	I_SWORD_ZORA_BLADE = 136,
	I_DEKUSTICK = 138,
	I_BOMBCHUS = 139,
	I_DEKUNUTS = 140,
	I_MASK_DEKU = 144,
	I_EMPTYBOTTLE_1 = 146,
	I_EMPTYBOTTLE_2 = 147,
	I_EMPTYBOTTLE_3 = 148,
	I_EMPTYBOTTLE_4 = 149,
	I_EMPTYBOTTLE_5 = 150,
	I_EMPTYBOTTLE_6 = 151,
	I_INFMAG = 152,
	I_MAGICBEANS = 153,
	I_DEKUNUTS_10 = 155,
	I_REMAINS1 = 158,
	I_REMAINS2 = 159,
	I_REMAINS3 = 160,
	I_REMAINS4 = 161,
	I_MOONSTEAR = 178,
	I_DEED_TOWN = 179,
	I_DEED_SWAMP = 180,
	I_DEED_MOUNTAIN = 181,
	I_DEED_OCEAN = 182,
	I_LETTERKAFEI = 183,
	I_SPECIALDELIVERY = 184,
	I_PENDANTOFMEMORIES = 185,
	I_ROOMKEY = 186,
	I_MASK_POSTMANSHAT = 187,
	I_MASK_ALLNIGHT = 188,
	I_MASK_BLAST = 189,
	I_MASK_STONE = 190,
	I_MASK_GFAIRY = 191,
	I_MASK_KEATON = 192,
	I_MASK_BREMEN = 193,
	I_MASK_BUNNYHOOD = 194,
	I_MASK_DONGERO = 195,
	I_MASK_SCENTS = 196,
	I_MASK_ROMANI = 197,
	I_MASK_CIRCUS = 198,
	I_MASK_KAFEI = 199,
	I_MASK_COUPLES = 200,
	I_MASK_TRUTH = 201,
	I_MASK_KAMARO = 202,
	I_MASK_GIBDO = 203,
	I_MASK_GARO = 204,
	I_MASK_CAPTAINHAT = 205,
	I_MASK_GIANT = 206,
	I_MASK_DEITY = 207,
	I_DOUBLEDEF = 208,
	I_SWORD_GFAIRY = 210,
	I_SWORD_GFAIRY_HAS = 211,
	I_TAEL_1 = 212,
	I_TAEL_2 = 213,
	I_FLIPPERS2 = 214,
	I_STRAYFAIRY_SWAMP = 215,
	I_STRAYFAIRY_MOUNTAIN = 216,
	I_STRAYFAIRY_OCEAN = 217,
	I_STRAYFAIRY_CANYON = 218,
	I_STRAYFAIRY_TOWN = 219,
	I_STRAYFAIRY_TOWN_BUBBLE = 220,
	I_STRAYFAIRY_SWAMP_BUBBLE = 221,
	I_STRAYFAIRY_MOUNTAIN_BUBBLE = 222,
	I_STRAYFAIRY_OCEAN_BUBBLE = 223,
	I_STRAYFAIRY_CANYON_BUBBLE = 224,
	I_PICTOGRAPH = 225,
	I_MAX = 256
};

ItemID castItem(int id)
{
	return (id < I_MIN || id >= I_MAX) ? I_INVALID : <ItemID>id;
}

DEFINE IC_STRAYFAIRY = IC_CUSTOM6;
//end
//start Palette
DEFINE MULT_SUNRISE = 2;
//end Palette
//start Flags
DEFINE FLAG1 = 00000001b;
DEFINE FLAG2 = 00000010b;
DEFINE FLAG3 = 00000100b;
DEFINE FLAG4 = 00001000b;
DEFINE FLAG5 = 00010000b;
DEFINE FLAG6 = 00100000b;
DEFINE FLAG7 = 01000000b;
DEFINE FLAG8 = 10000000b;
//end Flags
//start Colors
enum Color
{
	//0x0x
	TRANSBG = -1,
	TRANS,
	TRANSPARENT = 0,
	WHITE,
	
	BLUE = 0x08,
	DARKBLUE,
	
	BLACK = 0x0F,
	//0x1x
	YELLOW = 0x12,
	GREEN,
	MEDGREEN,
	DARKGREEN,
	//0x5x
	LIGHTGREEN2 = 0x56,
	GREEN2,
	MEDGREEN2,
	DARKGREEN2,
	
	LIGHTGRAY = 0x5C,
	GRAY,
	DARKGRAY,
	//0x6x
	RED = 0x6D,
	DARKRED,
	//0x7x
	LIGHTDEEPBLUE = 0x72,
	DEEPBLUE,
	MEDDEEPBLUE,
	DARKDEEPBLUE,
	//0x8x
	LIGHTDEEPRED = 0x82,
	DEEPRED,
	MEDDEEPRED,
	DARKDEEPRED,
	//0x9x
	LIGHTPURPLE = 0x96,
	PURPLE,
	MEDPURPLE,
	DARKPURPLE
	//0xAx
	//0xBx
	//0xCx
};
typedef const Color COLOR;
//end
//start MISC
//Combos
DEFINE COMBO_INVIS = 4;
DEFINE COMBO_SOLID = 38408;
DEFINE COMBO_CHEST = 38385;
DEFINE COMBO_SOIL = 13920;
DEFINE COMBO_BEANSPROUT = 13921;
DEFINE COMBO_BEANPLANT = 13922;
DEFINE COMBO_OWLOFF = 38380;
DEFINE COMBO_OWLON = 38384;
DEFINE COMBO_FRZ1 = 13826;
DEFINE COMBO_FRZ2 = 13827;
DEFINE COMBO_GRAY = 38416;
DEFINE COMBO_PLANKS = 38400;
DEFINE COMBO_PLANKS_SOLID = 38404;
DEFINE COMBO_CT_TAN_WALL = 38402;
DEFINE COMBO_BREMOR = 31761;
//Tiles
DEFINE TILE_INVIS = 5;
DEFINE TILE_DEKUSTICK_UNLIT = 64180;
DEFINE TILE_DEKUSTICK_LIT = 64200;
DEFINE TILE_NOTE_DEFAULT = 12614;
DEFINE TILE_DROP = 12590;
DEFINE TILE_CURL = 12591;
DEFINE TILE_QUIT = 12592;
DEFINE TILE_AIM = 12593;
DEFINE TILE_AIMARROW = 139;
DEFINE TILE_COLOR = 1020;
DEFINE TILE_SNAP = 12594;
DEFINE TILE_VIEW = 12595;
DEFINE TILE_BANDW = 12596;
//WIP TILES
DEFINE TILE_REMAINS1UL = 0;
DEFINE TILE_REMAINS2UL = 0;
DEFINE TILE_REMAINS3UL = 0;
DEFINE TILE_REMAINS4UL = 0;
//CSets
DEFINE CSET_DROP = 0;
//Counters
DEFINE CR_MAGICBEANS = 9;
DEFINE CR_BOMBCHUS = 7;
DEFINE CR_DEKUNUTS = 8;
DEFINE CR_BANKBAL = 10;
//Combo Flags
DEFINE CI_RAMP = CF_SCRIPT1;
DEFINE CF_RAMP_UP = CF_SCRIPT9;
DEFINE CF_RAMP_DOWN = CF_SCRIPT10;
DEFINE CF_NOWATERLEDGE = CF_SCRIPT11; //Can only get out by using deku or freezing water
DEFINE CF_NOWATERLEDGE2 = CF_SCRIPT12; //Can only get out by freezing water
DEFINE CF_BOMBCHU1 = 98; //Combo solidity on combos locations with this flag will be treated opposite by the bombchu.
DEFINE CF_BOMBCHU2 = 102;
//Combo Types
DEFINE CT_PITFALL = CT_SCRIPT1;
DEFINE CT_LEDGE = CT_SCRIPT2;
DEFINE CT_BOMBCHU = 143;
//LW Types
DEFINE LW_DEKUSTICK = 34;
DEFINE LW_BOMBCHU = 40; //The weapon ID of the bombchu, must be unique and between 31 and 40.
//EW Types
//Sprites
DEFINE SPRITE_FIREARROW = 90;
DEFINE SPRITE_NONE = 255;
DEFINE SPRITE_BRANG = 4;
//SFX/MIDI
DEFINE SFX_BANKMENU = 18;
DEFINE SFX_CHEST_APPEAR = SFX_SECRET;
DEFINE SFX_BOMBCHU = 17;
DEFINE SFX_DESTRUCTION = 0; //UNFINISHED : Find sound for moon crashing into Termina
//NPC IDs
DEFINE ID_TATL = 5;
//MSG IDs
DEFINE MSG_SHOPS = 37;
//Tango
DEFINE TSTYLE_MAJORAS = 0;
DEFINE TSTYLE_SIGNS = 1;
DEFINE TSTYLE_ICAPTION = 2;
DEFINE TSTYLE_NPCNAME  = 3;
DEFINE TANGO_MENU_CURSOR_COMBO = 14085;
DEFINE MAXNAMELENGTH = 75; //This must be >= the longest NPC name, + the length of the tango commands
//Misc
DEFINE RAZSWORD_USES = 100;
DEFINE INF_MAGIC = 152;
DEFINE DEKU_MAX_TIMER = 240;
DEFINE ARRTYPE_FIRE = 1;
DEFINE ARRTYPE_ICE = 2;
DEFINE ARRTYPE_LIGHT = 3;
//
DEFINE MAX_LEVEL = 10; //Max DMap "Level" used
DEFINE MAX_NONRESERVED_FFC = 26;
//Scripts (FFC)
DEFINE FFC_SIGN = 1;
DEFINE FFC_LEARNSONG = 3;
DEFINE FFC_MAKESCARECROWSONG = 4;
DEFINE FFC_SONGSECRETS = 5;
DEFINE FFC_NPC = 6;
DEFINE FFC_CUTSCENE = 7;
DEFINE FFC_DEKUFLOWER = 8;
DEFINE FFC_BOMBCHU = 9;
DEFINE FFC_SOFTSOIL = 10;
DEFINE FFC_AMMOREFILL = 11;
DEFINE FFC_CHEST = 12;
DEFINE FFC_TORCH = 13;
DEFINE FFC_LITTORCH = 14;
DEFINE FFC_STATE = 15;
DEFINE FFC_SHOWSTRING = 16;
DEFINE FFC_SHOP = 18;
DEFINE FFC_OWL = 22;
DEFINE FFC_CHANGENAME = 24;
DEFINE FFC_MINIGAME_OCTO = 25;
DEFINE FFC_LOCKEDDOOR = 26;
DEFINE FFC_INVISMAZE = 27;
//Scripts (LW)
DEFINE LWSCR_ZORABRANG = 1;
//Soft Soil States
DEFINE SSSTATE_UNDEFINED = 0;
DEFINE SSSTATE_WAITING = 1;
DEFINE SSSTATE_PLANTED = 2;
DEFINE SSSTATE_GROWN = 3;
DEFINE SSSTATE_ACTIVE = 4;
//
DEFINE BITS_INT = 32;
DEFINE DAYS_TO_HINT_RESET = 7;
//Misc indexes
DEFINE BRANG_MISC_ANGLEACC = 0;
DEFINE BRANG_MISC_HASTURNED = 1;
DEFINE BRANG_MISC_DEADTIMER = 2;
DEFINE BRANG_MISC_OTHER = 3;
DEFINE BRANG_MISC_MULT = 4;
DEFINE SPRITE_MISC_HITXOFFSET = 30;
DEFINE FAIRYMISC_TYPE = 0;
DEFINE FAIRYMISC_VALUE = 1;
enum FairyMiscType
{
	FAIRY_NULL,
	FAIRY_POT,
	FAIRY_CHEST,
	FAIRY_MAPDATA
};
//Warp Flags
DEFINE WARPFLAGS_DESTRUCTION = WARP_FLAG_SETCONTINUESCREEN | WARP_FLAG_SETCONTINUEDMAP | WARP_FLAG_SCRIPTDRAW | WARP_FLAG_PLAYMUSIC | WARP_FLAG_PLAYSOUNDS;
DEFINE WARPFLAGS_RESETTIME = WARP_FLAG_SETCONTINUESCREEN | WARP_FLAG_SETCONTINUEDMAP | WARP_FLAG_SCRIPTDRAW;
//Torch puzzle vars
bool torchPuzzleStates[4 * MAX_LEVEL];
int torchPuzzle[4 * MAX_LEVEL];
int torchPuzzleTimer = 0;
int dekuStickLitTimer = 0;
int swordCounter = 0;
//Time vars
int time = 0;
int hour = 6;
int day = 1;
bool slowTime = false;
int trueTime = 0;
//Global clock
int gameframe = 0;
int freezeFrames = 0;
bool isFrozen = false;
bool isBottleFrozen = false;
//Item vars
bool hasMirrorShield = false;
int usingItem = 0;
int arrowType = 0;//1=fire,2=ice,3=light
int beanCounter = 0;
//Subscreen Vars
bool pressA = false;
//Tango Vars
bool tangoTemp = false;
int tangoTempI = 0;
int shopString[1024];
int shopPrice = 0;
//Location Trackers
int lastScreen = -1;
int lastMap = -1;
int lastLevel = -1;
int lastDMap = -1;
int lastHP = Hero->HP;
//Misc
int LinkActionOld = 0;
int floatPix = 2;
bool slotWasDisplayed = false;
bool fakeSong = false;
bool hideLayer4 = false;
bool songOfStormsRain = false;
bool owlSaved = false;
int warpNumFloors = 0;
bool arrowAimMode = false;
int HeroDir8 = 0;
DEFINE MAX_MAPDATA_HEIGHT = 8;
mapdata heightData[MAX_MAPDATA_HEIGHT];
EnemyPattern heightPattern[MAX_MAPDATA_HEIGHT];
u hasItemData[MAX_MAPDATA_HEIGHT];
//Debug Vars
bool freezeTime = false;
bool debug = false;
bool dbsetup = false;
bool dbdraw = false;
bool debugEnabled = false;
bool noSave = false;
//end MISC
//start ZC STUFF
DEFINE ITEMHITXOFFSET = -8;
//end
//start Minigames
DEFINE TARGET_OCTO_RED = 20;
DEFINE TARGET_OCTO_BLUE = 21;
//end Minigames
//start Controls
int Controls[256];
enum Control
{
	CONTROL_OPTIONS
};
//end

//start Global Vars Array
always using namespace GVars;
namespace GVars
{
	#option BINARY_32BIT on
	int gvars[MAX_INT];
	char gbuf[MAX_INT];
	//
	DEFINE GV_MISC = 0;
	enum GVAR_MISC
	{
		GVAR_BLASTMASKCOOLDOWN,
		GVAR_MAINTANGOSLOT,
		GVAR_ACTIVENPCID,
		GVAR_NPCTANGOSLOT,
		GVAR_DIFFICULTY,
		GVAR_ARROWANGLE,
		GVAR_MGSTATE,
		GVAR_EXITYEAR,
		GVAR_EXITDAY,
		GVAR_PICTO_LAST_DMAPPAL
	};
	//
	DEFINE GV_MISC_BOOL = GV_MISC + 1000;
	enum GVAR_MISC_BOOL
	{
		GVAR_BANK_REW1,
		GVAR_BANK_REW2,
		GVAR_BANK_REW3,
		GVAR_B_SPECTHEME,
		GVAR_B_SPECTHEME_ACTIVE,
		GVAR_OPTIONS_MENU,
		GVAR_GAMEINITIALIZED,
		GVAR_DID_HEIGHTWARP,
		GVAR_F6_MENU,
		GVAR_PICTURE_MODE,
		GVAR_HIDE_PASSIVESUB,
		GVAR_PICTO_LAST_GRAY
	};
	//
	GVAR GV_PAL = GV_MISC_BOOL + 1000;
	enum GVAR_PAL
	{
		TINT_DAY,
		TINT_SUNSETORANGE,
		TINT_NIGHT,
		TINT_LENS,
		NUM_PAL
	};
	//
	GVAR GV_BNOTEBOOK = GV_PAL + NUM_PAL;
	//
	GVAR GV_START_RESET = GV_BNOTEBOOK + 20;
	GVAR GV_CHEST = GV_START_RESET;
	DEFINE NUM_CHESTS = 320; //10 indexes, at 32 BITS_INT
	//
	GVAR GV_MISCRESETTABLE = GV_CHEST + (NUM_CHESTS / BITS_INT);
	enum GVAR_MISCRESETTABLE
	{
		GVAR_GUARDSMOVED,
		GVAR_FAIRY_START,
		GVAR_FAIRY_TOWN = GVAR_FAIRY_START,
		GVAR_FAIRY_SWAMP,
		GVAR_FAIRY_MOUNTAIN,
		GVAR_FAIRY_OCEAN,
		GVAR_FAIRY_CANYON
	};
	//
	GVAR GV_SOFTSOIL = GV_MISCRESETTABLE + 1000;
	//
	GVAR GV_NPCDIA = GV_SOFTSOIL + 10;
	GVAR GV_END_RESET = GV_NPCDIA + 1000;
	//
	GVAR GV_MINIGAME = GV_END_RESET;
	enum GVAR_MINIGAME
	{
		GVAR_MGOCTO,
		GVAR_CHESTGAME
	};
	////
	u getGlobalVar(int index, int add)
	{
		return gvars[index+add];
	}

	void setGlobalVar(int index, int add, u state)
	{
		gvars[index+add]=state;
	}

	void incGlobalVar(int index, int add, int inc)
	{
		gvars[index+add]+=inc;
	}

	void flagGlobalVar(int index, int add, u flag)
	{
		gvars[index+add]|=flag;
	}

	bool getFlagGlobalVar(int index, int add, u flag)
	{
		return (gvars[index+add] & flag) > 0;
	}

	bool getChestState(int index)
	{
		return getGlobalBool(index,GV_CHEST);
	}

	void setChestState(int index, bool state)
	{
		setGlobalBool(index,GV_CHEST,state);
	}

	u getSoilState(int index)
	{
		return getGlobalVar(index,GV_SOFTSOIL);
	}

	void setSoilState(int index, u state)
	{
		setGlobalVar(index,GV_SOFTSOIL,state);
	}

	bool getBNstate(int index)
	{
		return getGlobalBool(index, GV_BNOTEBOOK);
	}

	void setBNstate(int index)
	{
		setGlobalBool(index, GV_BNOTEBOOK, 1);
	}

	bool getNPCflag(int index, int flag)
	{
		return getFlagGlobalVar(index, GV_NPCDIA, flag);
	}

	void setNPCflag(int index, int flag)
	{
		flagGlobalVar(index, GV_NPCDIA, flag);
	}

	void setGlobalBool(int index, int add, int flag)
	{
		setGlobalBool(index,add,flag!=0);
	}

	void setGlobalBool(int index, int add, bool flag)
	{
		if(flag)
		{
			gvars[Div(index,BITS_INT) + add] |= 1b << (index % BITS_INT);
		}
		else
		{
			gvars[Div(index,BITS_INT) + add] &= ~(1b << (index % BITS_INT));
		}
	}

	bool getGlobalBool(int index, int add)
	{
		return ((gvars[Div(index,BITS_INT) + add] >> (index % BITS_INT))&1b)== 1b;
	}

	bool toggleGlobalBool(int index, int add)
	{
		bool old = getGlobalBool(index,add);
		setGlobalBool(index,add,!old);
		return !old;
	}

	void storeTime()
	{
		setGlobalVar(GVAR_EXITYEAR,GV_MISC,GetSystemTime(RTC_YEAR));
		setGlobalVar(GVAR_EXITDAY,GV_MISC,GetSystemTime(RTC_DAYOFYEAR));
	}

	int daysAgo()
	{
		int lastyear = getGlobalVar(GVAR_EXITYEAR,GV_MISC) - 2018;
		int thisyear = GetSystemTime(RTC_YEAR) - 2018;
		int lastday = getGlobalVar(GVAR_EXITDAY,GV_MISC);
		int thisday = GetSystemTime(RTC_DAYOFYEAR);
		return (((thisyear * 365) + thisday) - ((lastyear * 365) + lastday));
	}

	void resetHintBools()
	{
		setGlobalBool(GVAR_B_SPECTHEME,GV_MISC_BOOL,false);
	}
}
//end
//start Global Items Array
enum ItemLoc
{
	IL_MIN,
	//Chest locations; equivalent to chest ID #
	IL_CHEST = IL_MIN,
	IL_CTLEDGE20_CHEST = IL_CHEST,
	IL_CTTOWERMONEY_CHEST,
	IL_CTLEDGE100_CHEST,
	IL_INVISMAZE_CHEST,
	//Loose items; for existing in the world
	IL_CHEST_END = 500,
	IL_LOOSE = IL_CHEST_END,
	IL_CTTOWERHEARTPIECE = IL_LOOSE,
	IL_CTSLIDEHEARTPIECE,
	//
	IL_LOOSE_END = 700,
	IL_SCRIPT_ACCESS = IL_LOOSE_END,
	IL_BANKER1 = IL_SCRIPT_ACCESS,
	IL_BANKER2,
	IL_BANKER3,
	IL_TCSHOOTING1,
	IL_TCSHOOTING2,
	
	//
	IL_SCRIPT_END,
	IL_MAX = IL_SCRIPT_END
};
namespace Items
{
	ItemID items[MAX_INT];
	ItemID itUpgrade[512];
	
	void initUpgrade()
	{
		itUpgrade[I_SWORD_KOKIRI] = I_SWORD_RAZOR;
		itUpgrade[I_SWORD_RAZOR] = I_SWORD_GILDED;
		itUpgrade[I_BOMBBAG] = I_BOMBBAG_BIG;
		itUpgrade[I_BOMBBAG_BIG] = I_BOMBBAG_BIGGEST;
		itUpgrade[I_QUIVER] = I_QUIVER_BIG;
		itUpgrade[I_QUIVER_BIG] = I_QUIVER_BIGGEST;
		itUpgrade[I_WALLET] = I_WALLET_BIG;
		//UNFINISHED // Sidequest items!
	}
	void defaultItemInit()
	{
		defaultItemInit(items);
	}
	void defaultItemInit(ItemID items)
	{
		items[IL_CTLEDGE20_CHEST] = I_RUP_20;
		items[IL_CTTOWERMONEY_CHEST] = I_RUP_50;
		items[IL_CTLEDGE100_CHEST] = I_RUP_100;
		items[IL_INVISMAZE_CHEST] = I_HEARTPIECE;
		//
		items[IL_CTTOWERHEARTPIECE] = I_HEARTPIECE;
		items[IL_CTSLIDEHEARTPIECE] = I_HEARTPIECE;
		items[IL_BANKER1] = I_WALLET;
		items[IL_BANKER2] = I_RUP_5;
		items[IL_BANKER3] = I_HEARTPIECE;
		items[IL_TCSHOOTING1] = I_QUIVER;
		items[IL_TCSHOOTING2] = I_HEARTPIECE;
	}
	void updateItemMapdata() //Handle free-standing items
	{
		__setMapdataItem(2,0x5B,getItem(IL_CTSLIDEHEARTPIECE));
		__setMapdataItem(2,0x6B,getItem(IL_CTTOWERHEARTPIECE));
	}
	void __setMapdataItem(int map, int screen, ItemID itm)
	{
		mapdata m = Game->LoadMapData(map,screen);
		if(m->Item != I_RUP_5)
			m->Item=itm;
	}
	ItemID getItem(ItemLoc location)
	{
		unless(location >= IL_MIN && location < IL_MAX)
		{
			Debug::print("ItemLoc %d invalid! Returning -1... @`Items::getItem(ItemLoc location)`",location);
			return I_INVALID;
		}
		ItemID it = items[location];
		while(itUpgrade[it] && Hero->Item[it]) it = itUpgrade[it]; //Upgrade if Hero already has the item, and it has an upgrade
		return it;
	}
}
//end

