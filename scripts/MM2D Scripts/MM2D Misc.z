////////////////////////////////////////
//                                    //
//     MM2D Script: Miscellaneous     //
//                                    //
////////////////////////////////////////

namespace MM2D
{
	//start CanWalkM
	//start Standard
	/**
	* This function (and set of overloads) acts as CanWalk, but uses an arbitrary 
	*      `mapdata` pointer for solidity, rather than the current screen.
	* Related: `CurMapdata()`
	*/

	//lweapon
	bool CanWalkM(lweapon weap, mapdata map, int dir, int step, bool useHit)
	{
		unless(weap->isValid())return false;
		return CanWalkM(weap->X + (useHit ? weap->Misc[SPRITE_MISC_HITXOFFSET] : 0), weap->Y + (useHit ? weap->HitYOffset : 0), weap->X + (useHit ?  weap->HitWidth + weap->Misc[SPRITE_MISC_HITXOFFSET] :  weap->TileWidth * 16) - 1, weap->Y + (useHit ?  weap->HitHeight + weap->HitYOffset :  weap->TileHeight * 16) - 1, map, dir, step);
	}
	//eweapon
	bool CanWalkM(eweapon weap, mapdata map, int dir, int step, bool useHit)
	{
		unless(weap->isValid())return false;
		return CanWalkM(weap->X + (useHit ? weap->Misc[SPRITE_MISC_HITXOFFSET] : 0), weap->Y + (useHit ? weap->HitYOffset : 0), weap->X + (useHit ?  weap->HitWidth + weap->Misc[SPRITE_MISC_HITXOFFSET] :  weap->TileWidth * 16) - 1, weap->Y + (useHit ?  weap->HitHeight + weap->HitYOffset :  weap->TileHeight * 16) - 1, map, dir, step);
	}
	//npc
	bool CanWalkM(npc n, mapdata map, int dir, int step, bool useHit)
	{
		unless(n->isValid())return false;
		return CanWalkM(n->X + (useHit ? n->Misc[SPRITE_MISC_HITXOFFSET] : 0), n->Y + (useHit ? n->HitYOffset : 0), n->X + (useHit ?  n->HitWidth + n->Misc[SPRITE_MISC_HITXOFFSET] :  n->TileWidth * 16) - 1, n->Y + (useHit ?  n->HitHeight + n->HitYOffset :  n->TileHeight * 16) - 1, map, dir, step);
	}
	//item
	bool CanWalkM(item it, mapdata map, int dir, int step, bool useHit)
	{
		if(!it->isValid())return false;
		return CanWalkM(it->X + (useHit ? it->Misc[SPRITE_MISC_HITXOFFSET] : 0), it->Y + (useHit ? it->HitYOffset : 0), it->X + (useHit ?  it->HitWidth + it->Misc[SPRITE_MISC_HITXOFFSET] :  it->TileWidth * 16) - 1, it->Y + (useHit ?  it->HitHeight + it->HitYOffset :  it->TileHeight * 16) - 1, map, dir, step);
	}
	//ffc
	bool CanWalkM(ffc f, mapdata map, int dir, int step, bool useEffect)
	{
		return CanWalkM(f->X, f->Y, f->X + (useEffect ?  f->EffectWidth :  f->TileWidth * 16) - 1, f->Y + (useEffect ?  f->EffectHeight :  f->TileHeight * 16) - 1, map, dir, step);
	}
	//Link
	bool CanWalkM(mapdata map, int dir, int step, bool largeHitbox)
	{
		return CanWalkM(Hero->X, Hero->Y + (largeHitbox ?  0 :  8), Hero->X + 15, Hero->Y + 15, map, dir, step);
	}
	//Main
	//Uses VenrobMisc.zh's version
	//end Standard
	//start Full
	/**
	* This function (and set of overloads) acts as CanWalk, but uses an arbitrary 
	*      `mapdata` pointer for solidity, rather than the current screen.
	* Related: `CurMapdata()`
	*/

	//lweapon
	bool CanWalkMFull(lweapon weap, mapdata map, int dir, int step, bool useHit)
	{
		unless(weap->isValid())return false;
		return CanWalkMFull(weap->X + (useHit ? weap->Misc[SPRITE_MISC_HITXOFFSET] : 0), weap->Y + (useHit ? weap->HitYOffset : 0), weap->X + (useHit ?  weap->HitWidth + weap->Misc[SPRITE_MISC_HITXOFFSET] :  weap->TileWidth * 16) - 1, weap->Y + (useHit ?  weap->HitHeight + weap->HitYOffset :  weap->TileHeight * 16) - 1, map, dir, step);
	}
	//eweapon
	bool CanWalkMFull(eweapon weap, mapdata map, int dir, int step, bool useHit)
	{
		unless(weap->isValid())return false;
		return CanWalkMFull(weap->X + (useHit ? weap->Misc[SPRITE_MISC_HITXOFFSET] : 0), weap->Y + (useHit ? weap->HitYOffset : 0), weap->X + (useHit ?  weap->HitWidth + weap->Misc[SPRITE_MISC_HITXOFFSET] :  weap->TileWidth * 16) - 1, weap->Y + (useHit ?  weap->HitHeight + weap->HitYOffset :  weap->TileHeight * 16) - 1, map, dir, step);
	}
	//npc
	bool CanWalkMFull(npc n, mapdata map, int dir, int step, bool useHit)
	{
		unless(n->isValid())return false;
		return CanWalkMFull(n->X + (useHit ? n->Misc[SPRITE_MISC_HITXOFFSET] : 0), n->Y + (useHit ? n->HitYOffset : 0), n->X + (useHit ?  n->HitWidth + n->Misc[SPRITE_MISC_HITXOFFSET] :  n->TileWidth * 16) - 1, n->Y + (useHit ?  n->HitHeight + n->HitYOffset :  n->TileHeight * 16) - 1, map, dir, step);
	}
	//item
	bool CanWalkMFull(item it, mapdata map, int dir, int step, bool useHit)
	{
		if(!it->isValid())return false;
		return CanWalkMFull(it->X + (useHit ? it->Misc[SPRITE_MISC_HITXOFFSET] : 0), it->Y + (useHit ? it->HitYOffset : 0), it->X + (useHit ?  it->HitWidth + it->Misc[SPRITE_MISC_HITXOFFSET] :  it->TileWidth * 16) - 1, it->Y + (useHit ?  it->HitHeight + it->HitYOffset :  it->TileHeight * 16) - 1, map, dir, step);
	}
	//ffc
	bool CanWalkMFull(ffc f, mapdata map, int dir, int step, bool useEffect)
	{
		return CanWalkMFull(f->X, f->Y, f->X + (useEffect ?  f->EffectWidth :  f->TileWidth * 16) - 1, f->Y + (useEffect ?  f->EffectHeight :  f->TileHeight * 16) - 1, map, dir, step);
	}
	//Link
	bool CanWalkMFull(mapdata map, int dir, int step, bool largeHitbox)
	{
		return CanWalkMFull(Hero->X, Hero->Y + (largeHitbox ?  0 :  8), Hero->X + 15, Hero->Y + 15, map, dir, step);
	}
	//Main
	//Uses VenrobMisc.zh's version
	//end Full
	//end CanWalkM
}
//start HeightCollision
bool HeightCollision(item it, lweapon weap)
{
	return RectCollision(it->X, it->Y, it->X+it->HitWidth, it->Y+it->HitHeight,
		weap->X, weap->Y, weap->X+weap->HitWidth, weap->Y+weap->HitHeight)
		&& (it->Z + it->HitZHeight >= weap->Z)
		&& (it->Z <= weap->Z + weap->HitZHeight);
}
bool HeightCollision(ffc f, lweapon weap)
{
	return RectCollision(f->X, f->Y, f->X+f->EffectWidth, f->Y+f->EffectHeight,
		weap->X, weap->Y, weap->X+weap->HitWidth, weap->Y+weap->HitHeight);
}
//end
//start Misc Functions
void saveTheGame()//start
{
	if(noSave)return;
	Screen->DrawScreen(7,LAYERSMAP1,LAYERSCREEN_SAVING,0,0,0);
	Waitframe();
	Game->Save();
}//end
bool linkWalkingOntoFlag(int flag, int setting,bool fullTile)//start
{
	int lspeed = Ceiling(1.5+LinkMovement_GetLinkSpeedBoost());
	return LinkOnFlagMod(flag,LinkMovement[LM_STICKX]*lspeed,LinkMovement[LM_STICKY]*lspeed,setting,fullTile);
}//end
bool LinkOnFlagMod(int flag, int x, int y, int setting, bool fullTile)//start
{
	int yCorrection = 0;
	unless(fullTile)yCorrection=8;
	int combos[4] = {ComboAt(Hero->X+x,Hero->Y+y+yCorrection),ComboAt(Hero->X+x+15,Hero->Y+y+yCorrection),ComboAt(Hero->X+x+15,Hero->Y+y+15),ComboAt(Hero->X+x,Hero->Y+y+15)};
	for(int i=0;i<4;i++)
	{
		if(setting)
			if(Screen->ComboI[combos[i]]==flag)return true;
		if(setting!=1)
			if(Screen->ComboF[combos[i]]==flag)return true;
	}
	return false;
}//end
bool LinkOnFlag(int flag)//start
{
	int combos[4] = {ComboAt(Hero->X,Hero->Y),ComboAt(Hero->X+15,Hero->Y),ComboAt(Hero->X+15,Hero->Y+15),ComboAt(Hero->X,Hero->Y+15)};
	for(int i=0;i<4;i++)
	{
		if(Screen->ComboF[combos[i]]==flag)return true;
	}
	return false;
}//end
void stopScreenTransition(int pxD,int pxR,int pxL, int pxU)//start
{
	if(Hero->Y>160-pxD)Input->Button[CB_DOWN]=false;
	if(Hero->X>240-pxR)Input->Button[CB_RIGHT]=false;
	if(Hero->X<0+pxL)Input->Button[CB_LEFT]=false;
	if(Hero->Y<0+pxU)Input->Button[CB_UP]=false;
}//end
void TotalNoAction()//start
{
	for(int q = 0; q < CB_MAX; ++q)
	{
		Input->Button[q] = false;
		Input->Press[q] = false;
	}
}//end
void WaitTotalNoAction()//start
{
	WaitTotalNoAction(1);
}//end
void WaitTotalNoAction(int frames)//start
{
	for(int j = 0; j < frames; ++j)
	{
		TotalNoAction();
		Waitframe();
	}
}//end
void killActions(int actions)//start
{
	for(int q = SizeOfArray(actions) - 1; q >= 0; --q)
	{
		Input->Button[actions[q]] = false;
		Input->Press[actions[q]] = false;
	}
}//end
void killActionsBut(int actions)//start
{
	DEFINE SIZE = SizeOfArray(actions);
	for(int q = 0; q < CB_MAX; ++q)
	{
		//Skip past any actions in the whitelist
		for(int j = SIZE-1; j >= 0; --j)
		{
			unless(q < CB_MAX) return;
			if(q == actions[j])
			{
				++q;
				j = SIZE-1;
			}
		}
		//Disable anything else
		Input->Button[q] = false;
		Input->Press[q] = false;
	}
}//end
bool isTouchingCombo(int comboID)//start
{
	int x = Hero->X;
	int y = Hero->Y;
	if(Screen->ComboD[ComboAt(Hero->X,Hero->Y+8)]==comboID)return true;
	if(Screen->ComboD[ComboAt(Hero->X+15,Hero->Y+8)]==comboID)return true;
	if(Screen->ComboD[ComboAt(Hero->X,Hero->Y+15)]==comboID)return true;
	if(Screen->ComboD[ComboAt(Hero->X+15,Hero->Y+15)]==comboID)return true;
	return false;
}//end
void NoDirs()//start
{
	killActions({CB_DOWN,CB_UP,CB_LEFT,CB_RIGHT});
}//end
int countNPCInRange(int x, int y, int radius)//start
{
	int npcCount = 0;
	for(int i = Screen->NumNPCs();i>0;--i)
	{
		npc anNPC = Screen->LoadNPC(i);
		if(anNPC->X>x-(radius+anNPC->HitWidth-1)&&anNPC->X<x+radius&&anNPC->Y>y-(radius+anNPC->HitHeight-1)&&anNPC->Y<y+radius)
		{
			npcCount++;
		}
	}
	return npcCount;
}//end
npc getNthNPCInRange(int x, int y, int radius, int num)//start
{
	int npcCount = 0;
	for(int i = Screen->NumNPCs();i>0;--i)
	{
		npc anNPC = Screen->LoadNPC(i);
		if(anNPC->X>x-(radius+anNPC->HitWidth-1)&&anNPC->X<x+radius&&anNPC->Y>y-(radius+anNPC->HitHeight-1)&&anNPC->Y<y+radius)
		{
			if(npcCount==num)
			{
				return anNPC;
			}
			else
			{
				npcCount++;
			}
		}
	}
}//end
//start Screen Freezing
enum FreezeState
{
	FREEZE_FORCE_NONE = -1,
	FREEZE_NONE,
	FREEZE_ACTION_BUT_FFC,
	FREEZE_ACTION,
	FREEZE_PICTOGRAPH
};
FreezeState curFrz = FREEZE_NONE;
bool indivFreeze[susptLAST];
bool forceActive[susptLAST];
void Screen_Freeze(FreezeState frz)
{
	curFrz = frz;
	isFrozen = frz>FREEZE_NONE;
	switch(frz)
	{
		case FREEZE_FORCE_NONE:
		{
			for(int q = 0; q < susptLAST; ++q)
			{
				Game->Suspend[q] = false;
				indivFreeze[q] = false;
				forceActive[q] = false;
			}
			curFrz = FREEZE_NONE;
			break;
		}
		case FREEZE_NONE:
		{
			for(int q = 0; q < susptLAST; ++q)
			{
				Game->Suspend[q] = indivFreeze[q] && !forceActive[q];
			}
			break;
		}
		case FREEZE_ACTION_BUT_FFC:
		{
			for(int q = 0; q < susptLAST; ++q)
			{
				switch(q)
				{
					case susptCONTROLSTATE:
					case susptGLOBALGAME:
					case susptLINKACTIVE:
					case susptUPDATEFFC:
					case susptFFCSCRIPTS:
					case susptSCREENDRAW:
					case susptSCRIPDRAWCLEAR:
					case susptONEFRAMECONDS:
					case susptCOMBOANIM:
						Game->Suspend[q] = indivFreeze[q] && !forceActive[q];
						break;
					default:
						Game->Suspend[q] = !forceActive[q];
				}
			}
			break;
		}
		case FREEZE_ACTION:
		{
			for(int q = 0; q < susptLAST; ++q)
			{
				switch(q)
				{
					case susptCONTROLSTATE:
					case susptGLOBALGAME:
					case susptLINKACTIVE:
					case susptSCREENDRAW:
					case susptSCRIPDRAWCLEAR:
					case susptONEFRAMECONDS:
						Game->Suspend[q] = indivFreeze[q] && !forceActive[q];
						break;
					default:
						Game->Suspend[q] = !forceActive[q];
				}
			}
			break;
		}
		case FREEZE_PICTOGRAPH:
		{
			for(int q = 0; q < susptLAST; ++q)
			{
				switch(q)
				{
					case susptCONTROLSTATE:
					case susptGLOBALGAME:
					case susptLINKACTIVE:
					case susptSCREENDRAW:
					case susptSCRIPDRAWCLEAR:
					case susptONEFRAMECONDS:
					case susptCOMBOANIM:
						Game->Suspend[q] = indivFreeze[q] && !forceActive[q];
						break;
					case susptLINK:
					case susptITEMSCRIPTENGINE:
						Game->Suspend[q] = false;
						break;
					default:
						Game->Suspend[q] = !forceActive[q];
				}
			}
			break;
		}
	}
}

FreezeState Get_Freeze()
{
	return curFrz;
}

void FreezeOne(int q, bool frz)
{
	indivFreeze[q] = frz;
	Screen_Freeze(Get_Freeze()); //Refresh the freeze state
}

bool getFreezeOne(int q) {return indivFreeze[q];}

void ForceUnfreeze(int q, bool unfrz)
{
	forceActive[q] = unfrz;
	Screen_Freeze(Get_Freeze()); //Refresh the freeze state
}

bool getForceUnfreeze(int q) {return forceActive[q];}

void oldScreen_Freeze(int freeze)
{
	ffc f1 = Screen->LoadFFC(31);
	ffc f2 = Screen->LoadFFC(32);
	if(freeze==2)
	{
		f1->Data = COMBO_FRZ1;
		f2->Data = COMBO_FRZ2;
		isFrozen=true;
	}
	else if(freeze==1)
	{
		f1->Data = COMBO_FRZ1;
		f2->Data = 0;
		isFrozen=true;
	}
	else
	{
		f1->Data = 0;
		f2->Data = 0;
		isFrozen=false;
	}
}

int oldGet_Freeze()
{
	ffc f1 = Screen->LoadFFC(31);
	ffc f2 = Screen->LoadFFC(32);
	return (f1->Data == COMBO_FRZ1) ? (f2->Data == COMBO_FRZ2 ? 1 : 2) : (0);
}//end
int getNPCfromUID(npc n)//start
{
	for(int i = 1;i<=Screen->NumNPCs();i++)
	{
		npc anNPC = Screen->LoadNPC(i);
		if(anNPC->UID==n->UID)return i;
	}
	return -1;
}//end
int fullCounter(int counter)//start
{
	return Game->Counter[counter]+Game->DCounter[counter];
}//end
bool isOverworldScreen()//start
{
	dmapdata dm = Game->LoadDMapData(Game->GetCurDMap());
	if(IsDungeonFlag())return false;
	if(IsInteriorFlag())return false;
	if(dm->Type%2)return true;
	return false;
}//end
void FastLine(int layer, int x, int y, int x2, int y2, int color, int opacity)//start
{
	Screen->Line(layer, x, y, x2, y2, color, 0, 0, 0, 0, opacity);
}//end
void HeightFastLine(int layer, int x, int y, int x2, int y2, int color, int opacity)//start
{
	HeightLine(layer, x, y, x2, y2, color, 0, 0, 0, 0, opacity);
}//end
void killAllSfx() //start
{
	for(int q = 1; q < 256; ++q) Audio->EndSound(q);
}//end
void pauseAllSfx() //start
{
	for(int q = 1; q < 256; ++q) Audio->PauseSound(q);
}//end
void resumeAllSfx() //start
{
	for(int q = 1; q < 256; ++q) Audio->ResumeSound(q);
}//end
int getPressedDir8() //start
{
	if(Input->Button[CB_RIGHT] && Input->Button[CB_DOWN]) return DIR_RIGHTDOWN;
	if(Input->Button[CB_LEFT] && Input->Button[CB_DOWN]) return DIR_LEFTDOWN;
	if(Input->Button[CB_LEFT] && Input->Button[CB_UP]) return DIR_LEFTUP;
	if(Input->Button[CB_RIGHT] && Input->Button[CB_UP]) return DIR_RIGHTUP;
	if(Input->Button[CB_RIGHT]) return DIR_RIGHT;
	if(Input->Button[CB_DOWN]) return DIR_DOWN;
	if(Input->Button[CB_LEFT]) return DIR_LEFT;
	if(Input->Button[CB_UP]) return DIR_UP;
	return -1;
}//end
int validateDir(int dir, int defaultdir) //start
{
	if(dir<0||dir>7)return defaultdir;
	return dir;
}//end
//start Screen Edge stuff
DEFINE SCREDGE_LEFT = 8;
DEFINE SCREDGE_RIGHT = 232;
DEFINE SCREDGE_TOP = 8;
DEFINE SCREDGE_BOTTOM = 152;
bool offscreen(int x, int y) //start
{
	return x <= SCREDGE_LEFT || x >= SCREDGE_RIGHT || y <= SCREDGE_TOP || y >= SCREDGE_BOTTOM;
}//end
int forceonscreenx(int x) //start
{
	return Clamp(x,SCREDGE_LEFT+1,SCREDGE_RIGHT-1);
}//end
int forceonscreeny(int y) //start
{
	return Clamp(y,SCREDGE_TOP+1,SCREDGE_BOTTOM-1);
}//end
//end
void resetMusic() //start
{
	int midi = CurMapdata()->MIDI;
	if(midi==-4) midi = Game->LoadDMapData(Game->GetCurDMap())->MIDI;
	unless(midi==Game->GetMIDI()) Audio->PlayMIDI(midi);
}//end
void getFontName(char32 buf, int font) //start
{
	switch(font)
	{
		case FONT_Z1:
			strcpy(buf, "Zelda NES");
			break;
			
		case FONT_Z3:
			strcpy(buf, "Link to the Past");
			break;
			
		case FONT_Z3SMALL:
			strcpy(buf, "LttP Small");
			break;
			
		case FONT_DEF:
			strcpy(buf, "Allegro Default");
			break;
			
		case FONT_L:
			strcpy(buf, "GUI Font Bold");
			break;
			
		case FONT_L2:
			strcpy(buf, "GUI Font");
			break;
			
		case FONT_P:
			strcpy(buf, "GUI Font Narrow");
			break;
			
		case FONT_MATRIX:
			strcpy(buf, "Zelda NES (Matrix)");
			break;
			
		case FONT_ZTIME:
			strcpy(buf, "BS Time (Incomplete)");
			break;
			
		case FONT_S:
			strcpy(buf, "Small");
			break;
			
		case FONT_S2:
			strcpy(buf, "Small 2");
			break;
			
		case FONT_SP:
			strcpy(buf, "S. Proportional");
			break;
			
		case FONT_SUBSCREEN1:
			strcpy(buf, "SS 1 (Numerals)");
			break;
			
		case FONT_SUBSCREEN2:
			strcpy(buf, "SS 2 (Incomplete)");
			break;
			
		case FONT_SUBSCREEN3:
			strcpy(buf, "SS 3");
			break;
			
		case FONT_SUBSCREEN4:
			strcpy(buf, "SS 4 (Numerals)");
			break;
			
		case FONT_LA:
			strcpy(buf, "Link's Awakening");
			break;
			
		case FONT_GORON:
			strcpy(buf, "Goron");
			break;
			
		case FONT_ZORAN:
			strcpy(buf, "Zoran");
			break;
			
		case FONT_HYLIAN1:
			strcpy(buf, "Hylian 1");
			break;
			
		case FONT_HYLIAN2:
			strcpy(buf, "Hylian 2");
			break;
			
		case FONT_HYLIAN3:
			strcpy(buf, "Hylian 3");
			break;
			
		case FONT_HYLIAN4:
			strcpy(buf, "Hylian 4");
			break;
			
		case FONT_GBORACLE:
			strcpy(buf, "Oracle");
			break;
			
		case FONT_GBORACLEP:
			strcpy(buf, "Oracle Proportional");
			break;
			
		case FONT_DSPHANTOM:
			strcpy(buf, "Phantom");
			break;
			
		case FONT_DSPHANTOMP:
			strcpy(buf, "Phantom Proportional");
			break;
			
		case FONT_ATARI800:
			strcpy(buf, "Atari 800");
			break;
			
		case FONT_ACORN:
			strcpy(buf, "Acorn");
			break;
			
		case FONT_ADOS:
			strcpy(buf, "ADOS");
			break;
			
		case FONT_ALLEGRO:
			strcpy(buf, "Allegro");
			break;
			
		case FONT_APPLE2:
			strcpy(buf, "Apple II");
			break;
			
		case FONT_APPLE2_80COL:
			strcpy(buf, "Apple II 80 Column");
			break;
			
		case FONT_APPLE2GS:
			strcpy(buf, "Apple IIgs");
			break;
			
		case FONT_AQUARIUS:
			strcpy(buf, "Aquarius");
			break;
			
		case FONT_ATARI400:
			strcpy(buf, "Atari 400");
			break;
			
		case FONT_C64:
			strcpy(buf, "C64");
			break;
			
		case FONT_C64_HIRES:
			strcpy(buf, "C64 HiRes");
			break;
			
		case FONT_CGA:
			strcpy(buf, "IBM CGA");
			break;
			
		case FONT_COCO:
			strcpy(buf, "COCO Mode I");
			break;
			
		case FONT_COCO2:
			strcpy(buf, "COCO Mode II");
			break;
			
		case FONT_COUPE:
			strcpy(buf, "Coupe");
			break;
			
		case FONT_CPC:
			strcpy(buf, "Amstrad CPC");
			break;
			
		case FONT_FANTASY:
			strcpy(buf, "Fantasy Letters");
			break;
			
		case FONT_FDS_KANA:
			strcpy(buf, "FDS Katakana");
			break;
			
		case FONT_FDSLIKE:
			strcpy(buf, "FDSesque");
			break;
			
		case FONT_FDS_ROMAN:
			strcpy(buf, "FDS Roman");
			break;
			
		case FONT_FF:
			strcpy(buf, "FF");
			break;
			
		case FONT_FUTHARK:
			strcpy(buf, "Elder Futhark");
			break;
			
		case FONT_GAIA:
			strcpy(buf, "Gaia");
			break;
			
		case FONT_HIRA:
			strcpy(buf, "Hira");
			break;
			
		case FONT_JP:
			strcpy(buf, "JP Unsorted");
			break;
			
		case FONT_KONG:
			strcpy(buf, "Kong");
			break;
			
		case FONT_MANA:
			strcpy(buf, "Mana");
			break;
			
		case FONT_MARIOLAND:
			strcpy(buf, "Mario");
			break;
			
		case FONT_MOT:
			strcpy(buf, "Mot CPU");
			break;
			
		case FONT_MSX0:
			strcpy(buf, "MSX Mode 0");
			break;
			
		case FONT_MSX1:
			strcpy(buf, "MSX Mode 1");
			break;
			
		case FONT_PET:
			strcpy(buf, "PET");
			break;
			
		case FONT_PSTART:
			strcpy(buf, "Homebrew");
			break;
			
		case FONT_SATURN:
			strcpy(buf, "Mr. Saturn");
			break;
			
		case FONT_SCIFI:
			strcpy(buf, "Sci-Fi");
			break;
			
		case FONT_SHERWOOD:
			strcpy(buf, "Sherwood");
			break;
			
		case FONT_SINQL:
			strcpy(buf, "Sinclair QL");
			break;
			
		case FONT_SPECTRUM:
			strcpy(buf, "Spectrum");
			break;
			
		case FONT_SPECTRUM_LG:
			strcpy(buf, "Spectrum Large");
			break;
			
		case FONT_TI99:
			strcpy(buf, "TI99");
			break;
			
		case FONT_TRS:
			strcpy(buf, "TRS");
			break;
			
		case FONT_Z2:
			strcpy(buf, "Zelda 2");
			break;
			
		case FONT_LISA:
			strcpy(buf, "Lisa");
			break;
	}
} //end
void ffcInvis(ffc f, bool invis) //start
{
	f->Flags[FFCF_LENSVIS] = invis;
	f->Flags[FFCF_LENSINVIS] = invis;
}//end
ffc LoadUnusedFFC() //start
{
	for(int i=FFCS_MIN_FFC; i<=FFCS_MAX_FFC; ++i)
	{
		ffc f = Screen->LoadFFC(i);
		
		if(f->Script!=0 ||
		 (f->Data!=0 && f->Data!=FFCS_INVISIBLE_COMBO) ||
		 f->Flags[FFCF_CHANGER])
			continue;
			
		return f;
	}
	return NULL;
}//end
void FlashScreen(Color color, bool subscreen) //start
{
	Screen->Rectangle(7, 0, subscreen?-56:0, 256, 176, color, 1, 0, 0, 0, true, OP_OPAQUE);
}//end
void FlashScreenTrans(Color color, bool subscreen) //start
{
	Screen->Rectangle(7, 0, subscreen?-56:0, 256, 176, color, 1, 0, 0, 0, true, OP_TRANS);
}//end
bool HeroIsHolding() //start
{
	switch(Hero->Action)
	{
		case LA_HOLD1LAND:
		case LA_HOLD2LAND:
		case LA_HOLD1WATER:
		case LA_HOLD2WATER:
			return true;
	}
	return false;
}//end
void WaitForItemPickup() //start
{
	bool wasFroze = getFreezeOne(susptLINK);
	FreezeOne(susptLINK,false);
	int waitcount = 10;
	until(HeroIsHolding() || !--waitcount) Waitframe();
	while(HeroIsHolding()) Waitframe();
	while(Tango_AnySlotIsActive()) Waitframe();;
	FreezeOne(susptLINK,wasFroze);
}//end
ItemID getDropsetDrop(int dset) //start
{
	switch(dset)
	{
		case DROPSET_GRASS:
		{
			int roll = Rand(200);
			if(roll<75) return IT_INVALID;
			else if(roll<75+40) return IT_RUP_1;
			else if(roll<75+40+30) return IT_HEART;
			else if(roll<75+40+30+3) return IT_BUGS;
			else if(roll<75+40+30+3+1) return IT_RUP_20;
			else if(roll<75+40+30+3+1+10) return IT_RUP_5;
			else if(roll<75+40+30+3+1+10+8) return IT_BOMB_4;
			else if(roll<75+40+30+3+1+10+8+8) return IT_ARROW_5;
			else return IT_MAGIC_SMALL;
		}
	}
}//end
bool SubscreenHidden() //start
{
	return ScreenFlag(SF_VIEW,SFV_NOSUBSCREEN);
}//end
int ftoia(char ptr, int pos, float num) //start
{
	if(OPTION_VALUE(TRUE_INT_SIZE) && num == -214748.3648)
	{
		strcpy(ptr,pos,"-2147483648",0);
		return 11;
	}
	int oldPos=pos;
	int place=100000;
	int digit;
	bool printZero=false;
	
	if(num<0)
	{
		ptr[pos]='-';
		++pos;
		num=-num;
	}
	 
	for(int i=0; i<10; ++i)
	{
		digit=((num/place)<<0)%10;
		
		if(digit>0 || printZero)
		{
			ptr[pos]=digit+'0';
			++pos;
			
			// Start printing 0 at the first non-zero digit.
			printZero=true;
		}
		
		num%=place; // To make sure num/place doesn't overflow when place<1
		place/=10;
		
		if(place==0.0001) // Last digit
			printZero=true;
	}
	
	return pos-oldPos;
}
int ftoia(char buf, float f)
{
	return ftoia(buf, 0, f);
}
//end
float iatof(char ptr) //start
{
	DEFINE sz = SizeOfArray(ptr);
	int output;
	bool neg = ptr[0]=='-';
	for(int q = (neg ? 1 : 0); q < sz && ptr[q]!=0; ++q)
	{
		output *= 10;
		output += (ptr[q]-'0')/10000;
		if(neg ? (q>10) : (q>9)) break;
	}
	if(output<0) return output; //handle -2147483648
	return output * (neg ? -1 : 1);
}//end
//end Misc Functions
//start Arrays
int shiftBackArray(u arr, u emptyVal) //start
{
	int sz = SizeOfArray(arr);
	for(int index = 0; index < sz; ++index)
	{
		int count;
		if(arr[index]==emptyVal)
		{
			do
			{
				++count;
				unless(index+count<sz)
				{
					return index;
				}
			} while(arr[index+count]==emptyVal);
			arr[index] = arr[index+count];
			arr[index+count] = emptyVal;
		}
	}
	return sz;
}//end
int FirstPosOf(u arr, u val) //start
{
	return FirstPosOf(arr, val, 0);
}//end
int FirstPosOf(u arr, u val, int start) //start
{
	DEFINE sz = SizeOfArray(arr);
	for(int q = start; q < sz; ++q)
	{
		if(arr[q]==val) return q;
	}
	return -1;
}//end
void memcpy(untyped dest, untyped src) //start
{
	memcpy(dest, src, Min(SizeOfArray(dest),SizeOfArray(src)));
}//end
//end
//start Keyboard
void KeyToString(int key, char buf)
{
	KeyToString(key, buf, false);
}

void KeyToString(int key, char buf, bool ShowPad)
{
	KeyToString(key, buf, ShowPad, false);
}

void KeyToString(int key, char buf, bool ShowPad, bool AllCaps)
{
	switch(key)
	{
		case KEY_TAB:
			strcat(buf, "Tab");
			break;
		
		case KEY_BACKSPACE:
			strcat(buf, "Back");
			break;
			
		case KEY_ENTER:
		case KEY_ENTER_PAD:
			strcat(buf, "Enter");
			if(ShowPad && key == KEY_ENTER_PAD) strcat(buf, " (Pad)");
			break;
			
		case KEY_SPACE:
			strcat(buf, "Space");
			break;
			
		case KEY_DEL:
		case KEY_DEL_PAD:
			strcat(buf, "Del");
			if(ShowPad && key == KEY_DEL_PAD) strcat(buf, " (Pad)");
			break;
			
		case KEY_HOME:
			strcat(buf, "Home");
			break;
			
		case KEY_END:
			strcat(buf, "End");
			break;
			
		case KEY_PGUP:
			strcat(buf, "PgUp");
			break;
			
		case KEY_PGDN:
			strcat(buf, "PgDn");
			break;
			
		case KEY_UP:
			strcat(buf, "Up");
			break;
			
		case KEY_DOWN:
			strcat(buf, "Down");
			break;
			
		case KEY_LEFT:
			strcat(buf, "Left");
			break;
			
		case KEY_RIGHT:
			strcat(buf, "Right");
			break;
		
		case KEY_PRTSCR:
			strcat(buf, "PrintScr");
			break;
			
		case KEY_PAUSE:
			strcat(buf, "Pause");
			break;
		
		case KEY_ESC:
			strcat(buf, "Esc");
			break;
			
		case KEY_F1:
		case KEY_F2:
		case KEY_F3:
		case KEY_F4:
		case KEY_F5:
		case KEY_F6:
		case KEY_F7:
		case KEY_F8:
		case KEY_F9:
			strcat(buf, {'F', key - KEY_F1 + '1', 0});
			break;
			
		case KEY_F10:
		case KEY_F11:
		case KEY_F12:
			strcat(buf, {'F', '1', key - KEY_F10 + '0', 0});
			break;
			
		case KEY_LCONTROL:
			strcat(buf, "LCtrl");
			break;
			
		case KEY_RCONTROL:
			strcat(buf, "RCtrl");
			break;
			
		case KEY_LSHIFT:
			strcat(buf, "LShift");
			break;
			
		case KEY_RSHIFT:
			strcat(buf, "RShift");
			break;
			
		case KEY_ALT:
			strcat(buf, "LAlt");
			break;
			
		case KEY_ALTGR:
			strcat(buf, "RAlt");
			break;
			
		case KEY_LWIN:
			strcat(buf, "LWin");
			break;
			
		case KEY_RWIN:
			strcat(buf, "RWin");
			break;
			
		case KEY_MENU:
			strcat(buf, "Menu");
			break;
			
		case KEY_SCRLOCK:
			strcat(buf, "ScrLock");
			break;
		
		case KEY_NUMLOCK:
			strcat(buf, "NumLock");
			break;
		
		case KEY_CAPSLOCK:
			strcat(buf, "CapsLock");
			break;
			
		case KEY_COMMAND:
			strcat(buf, "Cmd");
			break;
			
		default:
			char keyChar = KeyToChar(key, false, false);
			strcat(buf, (char[2]){AllCaps ? LowerToUpper(keyChar) : keyChar});
			if(ShowPad)
			{
				switch(key)
				{
					case KEY_SLASH_PAD:
					case KEY_MINUS_PAD:
					case KEY_PLUS_PAD:
					case KEY_ASTERISK:
					case KEY_EQUALS_PAD:
					case KEY_0_PAD:
					case KEY_1_PAD:
					case KEY_2_PAD:
					case KEY_3_PAD:
					case KEY_4_PAD:
					case KEY_5_PAD:
					case KEY_6_PAD:
					case KEY_7_PAD:
					case KEY_8_PAD:
					case KEY_9_PAD:
						strcat(buf, " (Pad)");
				}
			}
	}
}

int getKeyPress()
{
	for(int key = -4096; key < KEY_FINAL; key < -1 ? (key /= 2) : ++key)
	{
		if(Input->ReadKey[key]) return key;
	}
	return 0;
}
//end
//start Misc Scripts

ffc script SOLID //start
{
	void run()
	{
		while(true)
		{
			ffcSolid(this);
			Waitframe();
		}
	}
} //end
//start AmmoRefiller
ffc script AmmoRefiller
{
	void run(int itemID, int framesToWait, bool spawnMultiple)
	{
		this->Data = COMBO_INVIS;
		for(int i=0;true;i++)
		{
			if(!(i%framesToWait))
			{
				item it = CreateItemAt(itemID,this->X,this->Y);
				if(!spawnMultiple)
				{
					while(it->isValid())Waitframe();
				}
			}
			if(i==framesToWait*10)i=0;
			Waitframe();
		}
	}
}
//end AmmoRefiller
//start sidequests
int hasQuestItem(int itemslot)
{
	if(itemslot==1)
	{
		if(Hero->Item[182])return 5;
		if(Hero->Item[181])return 4;
		if(Hero->Item[180])return 3;
		if(Hero->Item[179])return 2;
		if(Hero->Item[178])return 1;
		return 0;
	}
	else if(itemslot==2)
	{
		if(Hero->Item[186])return 1;
		return 0;
	}
	else if(itemslot==3)
	{
		if(Hero->Item[184])return 3;
		if(Hero->Item[185])return 2;
		if(Hero->Item[183])return 1;
		return 0;
	}
}

int getQuestItem(int itemslot, int num)
{
	if(!num)num = hasQuestItem(itemslot);
	if(!num)return 0;
	if(itemslot==1)
	{
		int qits[] = {178,179,180,181,182};
		return qits[num-1];
	}
	else if(itemslot==2)
	{
		return 186;
	}
	else if(itemslot==3)
	{
		int qits[] = {183,185,184};
		return qits[num-1];
	}
}
//end sidequests
//start NameChange
ffc script renameLink
{
	void run()
	{
		DEFINE CHAR0 = 11260;
		DEFINE BORDERTILE = 11193;
		DEFINE CURSORTILE = 11200;
		DEFINE FIRSTX = 64;
		DEFINE FIRSTY = 64;
		DEFINE CHAR_OFFSET = -32;// The CHAR0 tile points to the "Spacebar" character, which is character 32; thus a character must be offset by -32 to get the correct tile.
		DEFINE Y_OFFSET = -1;
		DEFINE X_OFFSET = 0;
		Screen_Freeze(FREEZE_ACTION_BUT_FFC);
		startTypingMode(8,true);
		char buf[9];
		int cursor = 0;
		while(true)
		{
			cursor = __getTvar(TVAR_INDEX);
			Screen->FastTile(6,FIRSTX-16,FIRSTY-16,BORDERTILE,2,OP_OPAQUE);
			Screen->FastTile(6,FIRSTX-16,FIRSTY,BORDERTILE+20,2,OP_OPAQUE);
			Screen->FastTile(6,FIRSTX-16,FIRSTY+16,BORDERTILE+40,2,OP_OPAQUE);
			for(int i = FIRSTX; i <= FIRSTX+(16*7); i+=16)
			{
				Screen->FastTile(6,i,FIRSTY-16,BORDERTILE+1,2,OP_OPAQUE);
				Screen->FastTile(6,i,FIRSTY,BORDERTILE+1+20,2,OP_OPAQUE);
				Screen->FastTile(6,i,FIRSTY+16,BORDERTILE+1+40,2,OP_OPAQUE);
			}
			Screen->FastTile(6,FIRSTX+(16*7)+16,FIRSTY-16,BORDERTILE+2,2,OP_OPAQUE);
			Screen->FastTile(6,FIRSTX+(16*7)+16,FIRSTY,BORDERTILE+2+20,2,OP_OPAQUE);
			Screen->FastTile(6,FIRSTX+(16*7)+16,FIRSTY+16,BORDERTILE+2+40,2,OP_OPAQUE);
			if(((gameframe%40)<20) && __getTvar(TVAR_INDEX)<8)Screen->FastTile(6,FIRSTX+(cursor*16),FIRSTY+Y_OFFSET,CURSORTILE,2,OP_OPAQUE);
			remchr(buf,0);
			getType(buf);
			for(int i = 0; i < 8; i++)
			{
				if(buf[i]==0)continue;
				Screen->FastTile(6,FIRSTX+(i*16)+X_OFFSET,FIRSTY+Y_OFFSET,CHAR0+buf[i]+CHAR_OFFSET,2,OP_OPAQUE);
			}
			//32-126 inclusive
			if(typingJustEnded())
			{
				if(getTypeLength()>1)
				{
					Game->SetSaveName(buf);
					clearTypedInput();
					Screen_Freeze(FREEZE_NONE);
					Quit();
				}
				else
					startTypingMode(8,true);
			}
			Waitframe();
		}
	}
}
//end NameChange
//start ShowString
ffc script ShowString
{
	void run(u str, int doAfter, bool string)
	{
		if(string)
		{
			ShowStringAndWait(str);
			if(str==gbuf)remchr(gbuf,0);
		}
		else ShowMessageAndWait(str);
		unless(doAfter)Quit();
		switch(doAfter)
		{
			case 1:
				if(tangoTemp)
				{
					saveTheGame();
					Hero->PitWarp(0,0x10);
					Hero->X = 120;
					Hero->Y = 32;
					resetTime();
				}
				break;
			case 2:
				if(tangoTemp)
				{
					if(hour>=6&&hour<18)
					{
						hour=18;
						time=0;
					}
					else if(day<3)
					{
						hour=6;
						time=0;
						day++;
					}
					else if(hour>12)
					{
						hour=0;
						time=0;
					}
				}
				break;
			case 3:
				if(tangoTemp)
					slowTime = !slowTime;
				break;
		}
	}
}
//end ShowString

//end
//start Solidity
void itemSolid(item it)//start
{
	int linkspeed = Ceiling(1.5);
	int width = it->HitWidth;
	int height = it->HitHeight;
	int bottomheight = Hero->BigHitbox ? height : height - 8;
	if(bottomheight<1) bottomheight = 1; //Ensure that it is actually solid, even if only 8 tall with non-big hitbox
	if((Hero->Y>=it->Y-(16+linkspeed)) && (Hero->Y<=it->Y-16) && (Hero->X>=it->X-15) && (Hero->X<=it->X+(width-1)))//start inputdown
	{
		if(Hero->InputDown)
		{
			if(Hero->Y!=it->Y-16)Hero->Y=it->Y-16;
			Hero->Dir=DIR_DOWN;
			if(Hero->X>=it->X+(width-4))
			{
				if(CanWalk(Hero->X,Hero->Y,DIR_RIGHT,Abs(Hero->X-(it->X+width)),false))Hero->X=it->X+width;
			} else if(Hero->X<=it->X-12)if(CanWalk(Hero->X,Hero->Y,DIR_LEFT,Abs(Hero->X-it->X-16),false))Hero->X=it->X-16;
		}
		Hero->InputDown=false;
		Hero->PressDown=false;
		return;
	}//end
	if((Hero->Y<=it->Y+(bottomheight+linkspeed)) && (Hero->Y>=it->Y+bottomheight) && (Hero->X>=it->X-15) && (Hero->X<=it->X+(width-1))){//start inputup
		if(Hero->InputUp){
			if(Hero->Y!=it->Y+bottomheight)Hero->Y=it->Y+bottomheight;
			Hero->Dir=DIR_UP;
			if(Hero->X>=it->X+(width-4)){
				if(CanWalk(Hero->X,Hero->Y,DIR_RIGHT,Abs(Hero->X-(it->X+width)),false))Hero->X=it->X+width;
			} else if(Hero->X<=it->X-12)if(CanWalk(Hero->X,Hero->Y,DIR_LEFT,Abs(Hero->X-it->X-16),false))Hero->X=it->X-16;
		}
		Hero->InputUp=false;
		Hero->PressUp=false;
		return;
	}//end
	if((Hero->X>=it->X-(16+linkspeed)) && (Hero->X<=it->X-16) && (Hero->Y<=it->Y+(bottomheight-1)) && (Hero->Y>=it->Y-15)){//start inputright
		if(Hero->InputRight){
			if(Hero->X!=it->X-16)Hero->X=it->X-16;
			Hero->Dir=DIR_RIGHT;
			if(Hero->Y>=it->Y+(bottomheight-4)){
				if(CanWalk(Hero->X,Hero->Y,DIR_DOWN,Abs(Hero->Y-(it->Y+bottomheight)),false))Hero->Y=it->Y+bottomheight;
			} else if(Hero->Y<=it->Y-12)if(CanWalk(Hero->X,Hero->Y,DIR_UP,Abs(Hero->Y-(it->Y-16)),false))Hero->Y=it->Y-16;
		}
		Hero->InputRight=false;
		Hero->PressRight=false;
		return;
	}//end
	if((Hero->X<=it->X+(width+linkspeed)) && (Hero->X>=it->X+width) && (Hero->Y>=it->Y-15) && (Hero->Y<=it->Y+(bottomheight-1))){//start inputleft
		if(Hero->InputLeft){
			if(Hero->X!=it->X+width)Hero->X=it->X+width;
			Hero->Dir=DIR_LEFT;
			if(Hero->Y>=it->Y+(bottomheight-4)){
				if(CanWalk(Hero->X,Hero->Y,DIR_DOWN,Abs(Hero->Y-(it->Y+bottomheight)),false))Hero->Y=it->Y+bottomheight;
			} else if(Hero->Y<=it->Y-12)if(CanWalk(Hero->X,Hero->Y,DIR_UP,Abs(Hero->Y-(it->Y-16)),false))Hero->Y=it->Y-16;
		}
		Hero->InputLeft=false;
		Hero->PressLeft=false;
		return;
	}//end
}//end
//end
