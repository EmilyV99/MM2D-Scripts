////////////////////////////////////////
//                                    //
//       MM2D Script: Minigames       //
//                                    //
////////////////////////////////////////

//start Octorok Shooting Game
ffc script octoShootingGame //Call RunFFCScript from the NPC->interact(), when you pay the fee
{
	void run()
	{
		setGlobalVar(GVAR_MGSTATE,GV_MISC,1);
		DEFINE LEFT = 48;
		DEFINE MID_X = 120;
		DEFINE RIGHT = 192;
		DEFINE TOP = 8;
		DEFINE MID_Y = 40;
		DEFINE BOTTOM = 72;
		DEFINE COOLDOWN = 20;
		DEFINE FRAMES_ROUND = 6 * FRAMES_MINUTE;
		int startArrows = Game->Counter[CR_ARROWS];
		int items[] = {B_item, EX1_item, EX2_item};
		B_item = I_BOWARROW;
		EX1_item = 0;
		EX2_item = 0;
		int timer = 15 * FRAMES_ROUND;
		int phaseTimer = FRAMES_ROUND;
		npc r1 = CreateNPCAt(TARGET_OCTO_RED, MID_X, BOTTOM);
		npc r2 = CreateNPCAt(TARGET_OCTO_RED, LEFT, TOP);
		npc r3 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, TOP);
		npc r4;
		npc r5;
		npc b1;
		npc b2;
		npc b3;
		npc b4;
		int phase = 1;
		int kills = 0;
		bool initPhase = false;
		setGlobalVar(GVAR_ARROWANGLE,GV_MISC,270);
		int cooldown = -1;
		for(int q = Screen->NumLWeapons(); q > 0; --q)
		{
			lweapon weap = Screen->LoadLWeapon(q);
			weap->DeadState = 0;
		}
		while(true)
		{
			switch(phase)
			{
				case 1://r1, r2, r3
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=2;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 2:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, LEFT, MID_Y);
						r2 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, MID_Y);
						r3 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, TOP);
						b1 = CreateNPCAt(TARGET_OCTO_BLUE, MID_X, MID_Y);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(b1->isValid())if(b1->HP<1){timer-=FRAMES_ROUND/2;b1=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=3;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 3:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, LEFT, TOP);
						r2 = CreateNPCAt(TARGET_OCTO_RED, MID_X, TOP);
						r3 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, BOTTOM);
						b1 = CreateNPCAt(TARGET_OCTO_BLUE, RIGHT, TOP);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(b1->isValid())if(b1->HP<1){timer-=FRAMES_ROUND/2;b1=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=4;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 4:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, LEFT, TOP);
						r2 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, TOP);
						r3 = CreateNPCAt(TARGET_OCTO_RED, LEFT, BOTTOM);
						r4 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, BOTTOM);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(r4->isValid())if(r4->HP<1){++kills;r4=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=5;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						if(r4->isValid()){r4->HP = 0;r4=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 5:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, MID_X, TOP);
						r2 = CreateNPCAt(TARGET_OCTO_RED, MID_X, MID_Y);
						b1 = CreateNPCAt(TARGET_OCTO_BLUE, LEFT, MID_Y);
						b2 = CreateNPCAt(TARGET_OCTO_BLUE, RIGHT, MID_Y);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(b1->isValid())if(b1->HP<1){timer-=FRAMES_ROUND/2;b1=Debug->Null();}
					if(b2->isValid())if(b2->HP<1){timer-=FRAMES_ROUND/2;b2=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=6;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
						if(b2->isValid()){b2->HP = 0;b2=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 6:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, MID_X, BOTTOM);
						r2 = CreateNPCAt(TARGET_OCTO_RED, LEFT, MID_Y);
						r3 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, TOP);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=7;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 7:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, LEFT, TOP);
						r2 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, TOP);
						r3 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, BOTTOM);
						b1 = CreateNPCAt(TARGET_OCTO_BLUE, MID_X, MID_Y);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(b1->isValid())if(b1->HP<1){timer-=FRAMES_ROUND/2;b1=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=8;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 8:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, LEFT, TOP);
						r2 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, TOP);
						r3 = CreateNPCAt(TARGET_OCTO_RED, MID_X, TOP);
						b1 = CreateNPCAt(TARGET_OCTO_BLUE, LEFT, BOTTOM);
						b2 = CreateNPCAt(TARGET_OCTO_BLUE, RIGHT, BOTTOM);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(b1->isValid())if(b1->HP<1){timer-=FRAMES_ROUND/2;b1=Debug->Null();}
					if(b2->isValid())if(b2->HP<1){timer-=FRAMES_ROUND/2;b2=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=9;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
						if(b2->isValid()){b2->HP = 0;b2=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 9:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, MID_X, TOP);
						r2 = CreateNPCAt(TARGET_OCTO_RED, MID_X, MID_Y);
						r3 = CreateNPCAt(TARGET_OCTO_RED, MID_X, BOTTOM);
						b1 = CreateNPCAt(TARGET_OCTO_BLUE, LEFT, BOTTOM);
						b2 = CreateNPCAt(TARGET_OCTO_BLUE, RIGHT, BOTTOM);
						b3 = CreateNPCAt(TARGET_OCTO_BLUE, LEFT, MID_Y);
						b4 = CreateNPCAt(TARGET_OCTO_BLUE, RIGHT, MID_Y);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(b1->isValid())if(b1->HP<1){timer-=FRAMES_ROUND/2;b1=Debug->Null();}
					if(b2->isValid())if(b2->HP<1){timer-=FRAMES_ROUND/2;b2=Debug->Null();}
					if(b3->isValid())if(b3->HP<1){timer-=FRAMES_ROUND/2;b3=Debug->Null();}
					if(b4->isValid())if(b4->HP<1){timer-=FRAMES_ROUND/2;b4=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=10;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
						if(b2->isValid()){b2->HP = 0;b2=Debug->Null();}
						if(b3->isValid()){b3->HP = 0;b3=Debug->Null();}
						if(b4->isValid()){b4->HP = 0;b4=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 10:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, LEFT, MID_Y);
						r2 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, TOP);
						r3 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, BOTTOM);
						b1 = CreateNPCAt(TARGET_OCTO_BLUE, LEFT, BOTTOM);
						b2 = CreateNPCAt(TARGET_OCTO_BLUE, RIGHT, MID_Y);
						b3 = CreateNPCAt(TARGET_OCTO_BLUE, LEFT, TOP);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(b1->isValid())if(b1->HP<1){timer-=FRAMES_ROUND/2;b1=Debug->Null();}
					if(b2->isValid())if(b2->HP<1){timer-=FRAMES_ROUND/2;b2=Debug->Null();}
					if(b3->isValid())if(b3->HP<1){timer-=FRAMES_ROUND/2;b3=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=11;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
						if(b2->isValid()){b2->HP = 0;b2=Debug->Null();}
						if(b3->isValid()){b3->HP = 0;b3=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 11:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, MID_X, MID_Y);
						r2 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, TOP);
						r3 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, BOTTOM);
						r4 = CreateNPCAt(TARGET_OCTO_RED, LEFT, TOP);
						r5 = CreateNPCAt(TARGET_OCTO_RED, LEFT, BOTTOM);
						b1 = CreateNPCAt(TARGET_OCTO_BLUE, LEFT, MID_Y);
						b2 = CreateNPCAt(TARGET_OCTO_BLUE, RIGHT, MID_Y);
						b3 = CreateNPCAt(TARGET_OCTO_BLUE, MID_X, TOP);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(r4->isValid())if(r4->HP<1){++kills;r4=Debug->Null();}
					if(r5->isValid())if(r5->HP<1){++kills;r5=Debug->Null();}
					if(b1->isValid())if(b1->HP<1){timer-=FRAMES_ROUND/2;b1=Debug->Null();}
					if(b2->isValid())if(b2->HP<1){timer-=FRAMES_ROUND/2;b2=Debug->Null();}
					if(b3->isValid())if(b3->HP<1){timer-=FRAMES_ROUND/2;b3=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=12;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						if(r4->isValid()){r4->HP = 0;r4=Debug->Null();}
						if(r5->isValid()){r5->HP = 0;r5=Debug->Null();}
						if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
						if(b2->isValid()){b2->HP = 0;b2=Debug->Null();}
						if(b3->isValid()){b3->HP = 0;b3=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 12:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, LEFT, TOP);
						r2 = CreateNPCAt(TARGET_OCTO_RED, MID_X, TOP);
						r3 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, TOP);
						b1 = CreateNPCAt(TARGET_OCTO_BLUE, LEFT, BOTTOM);
						b2 = CreateNPCAt(TARGET_OCTO_BLUE, RIGHT, BOTTOM);
						b3 = CreateNPCAt(TARGET_OCTO_BLUE, LEFT, MID_Y);
						b4 = CreateNPCAt(TARGET_OCTO_BLUE, RIGHT, MID_Y);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(b1->isValid())if(b1->HP<1){timer-=FRAMES_ROUND/2;b1=Debug->Null();}
					if(b2->isValid())if(b2->HP<1){timer-=FRAMES_ROUND/2;b2=Debug->Null();}
					if(b3->isValid())if(b3->HP<1){timer-=FRAMES_ROUND/2;b3=Debug->Null();}
					if(b4->isValid())if(b4->HP<1){timer-=FRAMES_ROUND/2;b4=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=13;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
						if(b2->isValid()){b2->HP = 0;b2=Debug->Null();}
						if(b3->isValid()){b3->HP = 0;b3=Debug->Null();}
						if(b4->isValid()){b4->HP = 0;b4=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 13:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, LEFT, MID_Y);
						r2 = CreateNPCAt(TARGET_OCTO_RED, MID_X, MID_Y);
						r3 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, MID_Y);
						b1 = CreateNPCAt(TARGET_OCTO_BLUE, LEFT, TOP);
						b2 = CreateNPCAt(TARGET_OCTO_BLUE, MID_X, TOP);
						b3 = CreateNPCAt(TARGET_OCTO_BLUE, RIGHT, TOP);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(b1->isValid())if(b1->HP<1){timer-=FRAMES_ROUND/2;b1=Debug->Null();}
					if(b2->isValid())if(b2->HP<1){timer-=FRAMES_ROUND/2;b2=Debug->Null();}
					if(b3->isValid())if(b3->HP<1){timer-=FRAMES_ROUND/2;b3=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=14;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
						if(b2->isValid()){b2->HP = 0;b2=Debug->Null();}
						if(b3->isValid()){b3->HP = 0;b3=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 14:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, LEFT, TOP);
						r2 = CreateNPCAt(TARGET_OCTO_RED, LEFT, MID_Y);
						r3 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, MID_Y);
						r4 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, TOP);
						b1 = CreateNPCAt(TARGET_OCTO_BLUE, LEFT, BOTTOM);
						b2 = CreateNPCAt(TARGET_OCTO_BLUE, MID_X, BOTTOM);
						b3 = CreateNPCAt(TARGET_OCTO_BLUE, RIGHT, BOTTOM);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(r4->isValid())if(r4->HP<1){++kills;r4=Debug->Null();}
					if(b1->isValid())if(b1->HP<1){timer-=FRAMES_ROUND/2;b1=Debug->Null();}
					if(b2->isValid())if(b2->HP<1){timer-=FRAMES_ROUND/2;b2=Debug->Null();}
					if(b3->isValid())if(b3->HP<1){timer-=FRAMES_ROUND/2;b3=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=15;
						initPhase=true;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						if(r4->isValid()){r4->HP = 0;r4=Debug->Null();}
						if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
						if(b2->isValid()){b2->HP = 0;b2=Debug->Null();}
						if(b3->isValid()){b3->HP = 0;b3=Debug->Null();}
						Waitframe();
						continue;
					}
					break;
				case 15:
					if(initPhase)
					{
						r1 = CreateNPCAt(TARGET_OCTO_RED, LEFT, TOP);
						r2 = CreateNPCAt(TARGET_OCTO_RED, RIGHT, TOP);
						r3 = CreateNPCAt(TARGET_OCTO_RED, MID_X, TOP);
						r4 = CreateNPCAt(TARGET_OCTO_RED, MID_X, MID_Y);
						r5 = CreateNPCAt(TARGET_OCTO_RED, MID_X, BOTTOM);
						phaseTimer = FRAMES_ROUND;
						initPhase = false;
					}
					if(r1->isValid())if(r1->HP<1){++kills;r1=Debug->Null();}
					if(r2->isValid())if(r2->HP<1){++kills;r2=Debug->Null();}
					if(r3->isValid())if(r3->HP<1){++kills;r3=Debug->Null();}
					if(r4->isValid())if(r4->HP<1){++kills;r4=Debug->Null();}
					if(r5->isValid())if(r5->HP<1){++kills;r5=Debug->Null();}
					if(phaseTimer==0)
					{
						phase=0;
						if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
						if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
						if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
						if(r4->isValid()){r4->HP = 0;r4=Debug->Null();}
						if(r5->isValid()){r5->HP = 0;r5=Debug->Null();}
						if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
						if(b2->isValid()){b2->HP = 0;b2=Debug->Null();}
						if(b3->isValid()){b3->HP = 0;b3=Debug->Null();}
						if(b4->isValid()){b4->HP = 0;b4=Debug->Null();}
						arrowAimMode = false;
						break;
					}
					break;
			}
			Game->Counter[CR_ARROWS] = 99;
			if(!arrowAimMode)
			{
				if(cooldown==-1)
				{
					cooldown = COOLDOWN;
					B_item = 0;
				}
				arrowAimMode = true;
			}
			else
			{
				if(cooldown==0)
				{
					B_item = I_BOWARROW;
					cooldown = -1;
				}
				else if(cooldown>0)cooldown--;
			}
			Link->X = 120;
			Link->Y = 112;
			timer--;
			phaseTimer--;
			Screen->FastTile(6,0,136,loadItemTile(I_BOWARROW),loadItemCSet(I_BOWARROW),OP_OPAQUE);
			Screen->FastTile(6,0,152,loadItemTile(I_CLOCK),loadItemCSet(I_CLOCK),OP_OPAQUE);
			int buf[] = "  :  :  ";
			buf[0] = Div(Div(timer,FRAMES_HOUR),10) + 48;
			buf[1] = Div(timer,FRAMES_HOUR)%10 + 48;
			buf[3] = Div(Div((timer%FRAMES_HOUR),FRAMES_MINUTE),10) + 48;
			buf[4] = Div((timer%FRAMES_HOUR),FRAMES_MINUTE)%10 + 48;
			buf[6] = Div((timer%FRAMES_MINUTE),10) + 48;
			buf[7] = (timer%FRAMES_MINUTE)%10 + 48;
			Screen->DrawString(6,16,152,FONT_DSPHANTOMP,0x0F,0x01,TF_NORMAL,buf,OP_OPAQUE);
			//
			Screen->DrawInteger(6,16,136,FONT_DSPHANTOMP,0x0F,0x01,0,0,kills,0,OP_OPAQUE);
			setGlobalVar(10,GV_MISC,kills);
			setGlobalVar(11,GV_MISC,timer);
			Link->PressL=false;Link->InputL=false;
			runOmniArrows(2);
			if(timer<=0)break;
			Waitframe();
		}
		if(r1->isValid()){r1->HP = 0;r1=Debug->Null();}
		if(r2->isValid()){r2->HP = 0;r2=Debug->Null();}
		if(r3->isValid()){r3->HP = 0;r3=Debug->Null();}
		if(r4->isValid()){r4->HP = 0;r4=Debug->Null();}
		if(r5->isValid()){r5->HP = 0;r5=Debug->Null();}
		if(b1->isValid()){b1->HP = 0;b1=Debug->Null();}
		if(b2->isValid()){b2->HP = 0;b2=Debug->Null();}
		if(b3->isValid()){b3->HP = 0;b3=Debug->Null();}
		if(b4->isValid()){b4->HP = 0;b4=Debug->Null();}
		arrowAimMode = false;
		Game->Counter[CR_ARROWS] = startArrows;
		B_item = items[0];
		EX1_item = items[1];
		EX2_item = items[2];
		setGlobalVar(GVAR_MGSTATE,GV_MISC,0);
		tangoTempI = kills;
	}
}
//end
//start Invisible Maze Game
int invisMazeLayout[88];
ffc script invisMazeGame
{
	void run(int chestFFC)
	{
		int timer = 30 * FRAMES_MINUTE;
		for(int x = 0; x < 11; ++x)
			for(int y = 0; y < 8; ++y)
			{
				Screen->ComboD[(x+1) + (16*(2+y))] += invisMazeLayout[x + (11*y)];
			}
		while(timer > 0)
		{
			Waitframe();
			if(getChestState(3))break;
			--timer;
		}
		ffc chest = Screen->LoadFFC(chestFFC);
		Screen->ComboD[32] = Screen->ComboD[48];
		chest->Script = 0;
		chest->Data = COMBO_INVIS;
		for(int x = 0; x < 11; ++x)
			for(int y = 0; y < 8; ++y)
			{
				Screen->ComboD[(x+1) + (16*(2+y))] -= invisMazeLayout[x + (11*y)];
			}
	}
}

bool startMazeGame(int cost, int prize)
{
	if(fullCounter(CR_RUPEES) < cost)return false;
	invisMazeLayout[88]=0;
	setChestState(3, false);
	int chestFFC = RunFFCScript(FFC_CHEST,{prize,3});
	ffc chest = Screen->LoadFFC[chestFFC];
	chest->X = 0;
	chest->Y = 32;
	RunFFCScript(FFC_INVISMAZE,{chestFFC});
	return true;
}

void generateMazeLayout()
{
	int mazeLayout[88];
	int active[88];
	while(true)
	{
		active[0] = (11*1)+10;
		active[1] = (11*2)+10;
		active[2] = (11*3)+10;
		active[3] = (11*4)+10;
		active[4] = (11*5)+10;
		active[5] = (11*6)+10;
		active[6] = -1;
		bool success = false;
		int activeLeft = 6;
		while(active[0] != -1)
		{
			/*for(int i = 0; i < 1; ++i)
			{
				for(int q = 0; q < 88; ++q)
				{
					Screen->FastTile(6,16*(q%11),16*(Div(q,11)),TILE_COLOR+15+Cond(mazeLayout[q]>0,-1*(mazeLayout[q]-1),-5),0,OP_OPAQUE);
				}
				if(success)Screen->FastTile(6,TILE_COLOR+6,0,16*11,0,OP_OPAQUE);
				Waitframe();
			}*/
			for(int q = 0; active[q] != -1; ++q)
			{
				if(mazeLayout[active[q]]!=0)
				{
					active[q] = -2;
					--activeLeft;
					continue;
				}
				if(active[q]==0)
				{
					success = true;
					mazeLayout[active[q]] = 1;
				}
				else
				{
					if(activeLeft==1) mazeLayout[active[q]] = 1;
					else mazeLayout[active[q]] = Choose(1,2);
					if(mazeLayout[active[q]] == 2)
					{
						active[q] = -2;
						--activeLeft;
					}
				}
			}
			int new[88];
			int index = 0;
			for(int q = 0; active[q] != -1; ++q)
			{
				if(active[q]<-1)continue;
				if(active[q]+1<88)if((active[q] % 11) != 10)if(mazeLayout[active[q]+1]==0)
				{
					new[index] = active[q]+1;
					++index;
				}
				if(active[q]-1>=0)if((active[q] % 11) != 0)if(mazeLayout[active[q]-1]==0)
				{
					new[index] = active[q]-1;
					++index;
				}
				if(active[q]+11<88)if(mazeLayout[active[q]+11]==0)
				{
					new[index] = active[q]+11;
					++index;
				}
				if(active[q]-11>=0)if(mazeLayout[active[q]-11]==0)
				{
					new[index] = active[q]-11;
					++index;
				}
			}
			new[index] = -1;
			activeLeft = index;
			for(int q = 0; q < 88; ++q)
			{
				active[q] = new[q];
			}
		}
		if(success)
		{
			for(int q = 0; q < 88; ++q)
			{
				if(mazeLayout[q]==0)mazeLayout[q]=2;
			}
			break;
		}
		//TraceS("Maze generation failed! Regenerating!\n");
		for(int q = 0; q < 88; ++q)
		{
			mazeLayout[q] = 0;
			active[q] = 0;
		}
		continue;
		/*TraceS("Maze generation failed! Quitting!\n");
		invisMazeLayout[0] = -1;
		return;*/
	}
	//TraceS("Maze generated!\n");
	for(int q = 0; q < 88; ++q)invisMazeLayout[q]=Clamp(mazeLayout[q]-1,0,1);
}
//end
