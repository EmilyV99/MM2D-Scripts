////////////////////////////////////////
//                                    //
//     MM2D Script: Tango Funcs       //
//                                    //
////////////////////////////////////////

DEFINE TANGO_DEBUG = 0;
int subscreenTangoSlot = TANGO_INVALID;
bool subscreenCursorChanged = false;

void ShowMessageAndWait(int msg)
{
	ShowMessageAndWait(msg,false,false);
}

void ShowMessageAndWait(int msg, bool menu4way)
{
	ShowMessageAndWait(msg,menu4way,false);
}

void ShowMessageAndWait(int msg, bool menu4way, bool isNPC)
{
	int slot = ShowMessage(msg,TSTYLE_MAJORAS);
	handleMessageSlot(slot,menu4way,isNPC);
}

void getNPCName(int buf, int NPCid)
{
	remchr(buf,0);
	strcpy(buf,NPCNames[NPCid]);
	strcat(buf,"@waituntil(@npcend())@close()"); //Literal here is Tango function to wait for MAINSLOT to be finished / UNFINISHED /
}

void ShowNPCStringAndWait(int str, int NPCid, bool menu4way)
{
	setGlobalVar(GVAR_ACTIVENPCID,GV_MISC,NPCid);
	ShowStringAndWait(str,menu4way,true);
	setGlobalVar(GVAR_ACTIVENPCID,GV_MISC,0);
}

void ShowNPCMessageAndWait(int str, int NPCid, bool menu4way)
{
	setGlobalVar(GVAR_ACTIVENPCID,GV_MISC,NPCid);
	ShowMessageAndWait(str,menu4way,true);
	setGlobalVar(GVAR_ACTIVENPCID,GV_MISC,0);
}

//start Overloads
void ShowNPCMessageAndWait(int str, int NPCid)
{
	ShowNPCMessageAndWait(str,NPCid,false);
}

void ShowNPCStringAndWait(int str, int NPCid)
{
	ShowNPCStringAndWait(str,NPCid,false);
}//end

void ShowStringAndWait(int str)
{
	ShowStringAndWait(str,false,false);
}

void ShowStringAndWait(int str, bool menu4way)
{
	ShowStringAndWait(str,menu4way,false);
}

void ShowStringAndWait(int str, bool menu4way, bool isNPC)
{
	int slot = ShowString(str,TSTYLE_MAJORAS);
	handleMessageSlot(slot,menu4way,isNPC);
}

void SignShowMessageAndWait(int msg)
{
	int slot = ShowMessage(msg,TSTYLE_SIGNS);
	while(!Tango_SlotIsActive(slot)||!Tango_SlotIsFinished(slot))Waitframe();
	Tango_ScrollSlot(slot,-Tango_GetSlotMaxScrollPos(slot));
	handleMessageSlot(slot,false,false);
}

void handleMessageSlot(int slot, bool menu4way)
{
	handleMessageSlot(slot,menu4way,false);
}

void handleMessageSlot(int slot)
{
	handleMessageSlot(slot,false,false);
}

void handleMessageSlot(int slot, bool menu4way, bool isNPC)//start handleMessageSlot
{
	int delay = 0;
	int NPCname[MAXNAMELENGTH];
	int lastid = 0;
	if(isNPC)initNPCSlot();
	while(Tango_SlotIsActive(slot))
	{
		bool menuActive = Tango_MenuIsActive();
		if(isNPC)
		{
			int slot = getGlobalVar(GVAR_NPCTANGOSLOT,GV_MISC);
			if(getGlobalVar(GVAR_ACTIVENPCID,GV_MISC)!=lastid)
			{
				lastid = getGlobalVar(GVAR_ACTIVENPCID,GV_MISC);
				getNPCName(NPCname, lastid);
				NPCTileSetup(Tango_GetStringWidth(NPCNames[lastid],Tango_GetStyleAttribute(TSTYLE_NPCNAME,TANGO_STYLE_TEXT_FONT)));
				initNPCSlot();
				Tango_LoadString(slot,NPCname);
			}
		}
		if(Tango_SlotIsFinished(slot)||menuActive||waitingForA)
		{
			int maxScroll = Tango_GetSlotMaxScrollPos(slot);
			int scroll = Tango_GetSlotScrollPos(slot);
			//Scrolling
			float scrollSpeed = 1.5;
			if(Link->InputA)scrollSpeed*=2;
			if(Link->InputUp)
				Tango_ScrollSlot(slot, -scrollSpeed);
			else if(Link->InputDown)
				Tango_ScrollSlot(slot, scrollSpeed);
			//Scroll arrows
			if(scroll<maxScroll)
			{
				Screen->FastCombo(7,208,56+9,14084,0,OP_OPAQUE);
				delay = __TANGO_AUTO_ADVANCE_TIME;
				if(Link->PressB)
				{
					Link->PressB=false;
					Link->InputB=false;
					Tango_ScrollSlot(slot,maxScroll);
				}
			}
			if(!menuActive&&(scroll==maxScroll||waitingForA))
			{
				Screen->FastCombo(7,208,48+9,14088,0,OP_OPAQUE);//Press A indicatior
			}
			if(scroll>0)
			{
				Screen->FastCombo(7,208,18+9,14086,0,OP_OPAQUE);
			}
			//Fix menu cursor when scrolling
			if(menuActive&&scroll!=maxScroll)
			{
				Tango_SetMenuCursor(0,0);
				NoDirs();
			}
			else if(menuActive)
			{
				Tango_SetMenuCursor(TANGO_MENU_CURSOR_COMBO,0);
				if(menuActive&&!menu4way)
				{
					if(Link->PressRight)
					{
						VTango_ChoiceShift(1);
					}
					else if(Link->PressLeft)
					{
						VTango_ChoiceShift(-1);
					}
					NoDirs();
				}
			}
			if(scroll!=maxScroll&&!waitingForA)NoAction();
			if(delay>0)
			{
				delay--;
				Link->InputA=Link->PressA;
				Link->InputB=Link->PressB;
			}
			if(Link->PressA)waitingForA=false;
		}
		Link->PressStart=false;
		Link->InputStart=false;
		Waitframe();
	}
	if(isNPC)closeNPC();
}//end handleMessageSlot

void VTango_ChoiceShift(int shift)
{
	int pos = Tango_GetMenuCursorPosition()+shift;
	if(pos>=__Tango_Data[__TDIDX_CHOICE_COUNT])pos=0;
	else if(pos<0)pos=__Tango_Data[__TDIDX_CHOICE_COUNT]-1;
	Tango_SetMenuCursorPosition(pos);
}

int ShowMessage(int msg, int style)
{
	int slot = getGlobalVar(GVAR_MAINTANGOSLOT,GV_MISC);
	if(slot==TANGO_INVALID)
	{
		slot = Tango_GetFreeSlot(TANGO_SLOT_ANY);
		if(slot==TANGO_INVALID)
			return TANGO_INVALID;
		setGlobalVar(GVAR_MAINTANGOSLOT,GV_MISC,slot);
	}
	Tango_ClearSlot(slot);
	Tango_LoadMessage(slot,msg);
	Tango_SetSlotStyle(slot,style);
	Tango_SetSlotPosition(slot,32,25);//16 (+9)
	Tango_ActivateSlot(slot);
	
	return slot;
}

int ShowString(int str, int style)
{
	int slot = getGlobalVar(GVAR_MAINTANGOSLOT,GV_MISC);
	if(slot==TANGO_INVALID)
	{
		slot = Tango_GetFreeSlot(TANGO_SLOT_ANY);
		if(slot==TANGO_INVALID)
			return TANGO_INVALID;
		setGlobalVar(GVAR_MAINTANGOSLOT,GV_MISC,slot);
	}
	Tango_ClearSlot(slot);
	Tango_LoadString(slot,str);
	Tango_SetSlotStyle(slot,style);
	Tango_SetSlotPosition(slot,32,25);//16
	Tango_ActivateSlot(slot);
	
	return slot;
}

void TangoInit()
{
	setupStyles();
	Tango_Start();
	setGlobalVar(GVAR_MAINTANGOSLOT,GV_MISC,TANGO_INVALID);
	setGlobalVar(GVAR_NPCTANGOSLOT,GV_MISC,TANGO_INVALID);
	setGlobalVar(GVAR_ACTIVENPCID,GV_MISC,0);
}

void initNPCSlot()
{
	int slot = getGlobalVar(GVAR_NPCTANGOSLOT,GV_MISC);
	if(slot==TANGO_INVALID)
	{
		slot = Tango_GetFreeSlot(TANGO_SLOT_ANY);
		setGlobalVar(GVAR_NPCTANGOSLOT,GV_MISC,slot);
	}
	Tango_ClearSlot(slot);
	Tango_SetSlotStyle(slot,TSTYLE_NPCNAME);
	Tango_SetSlotPosition(slot,32,0);//55
	Tango_ActivateSlot(slot);
}

void closeNPC()
{
	int slot = getGlobalVar(GVAR_NPCTANGOSLOT,GV_MISC);
	Tango_ClearSlot(slot);
}

void showItemCaption(int str)
{
	if(subscreenTangoSlot==TANGO_INVALID)
	{
		subscreenTangoSlot = Tango_GetFreeSlot(TANGO_SLOT_ANY);
	}
	else if(!Tango_SlotIsActive(subscreenTangoSlot)||subscreenCursorChanged)
	{
		Tango_ClearSlot(subscreenTangoSlot);
		Tango_LoadString(subscreenTangoSlot,str);
		Tango_SetSlotStyle(subscreenTangoSlot,TSTYLE_ICAPTION);
		Tango_SetSlotPosition(subscreenTangoSlot,64,128);
		Tango_ActivateSlot(subscreenTangoSlot);
		Link->PressA=false;
		Link->InputA=false;
	}
}

void hideItemCaption()
{
	if(subscreenTangoSlot!=TANGO_INVALID&&Tango_SlotIsActive(subscreenTangoSlot))
	{
		Tango_ClearSlot(subscreenTangoSlot);
		Tango_ReserveSlot(subscreenTangoSlot);
	}
}

void NPCTileSetup(int width)
{
	tTraceS("Width in pix, before clamp: ");tTrace(width);
	width = Clamp(width+10,0,12*16);//+10 for the 5 pixels on either side of the box
	tTraceS("Width in pix, after clamp: ");tTrace(width);
	tTraceS("Width in tiles: ");tTrace(Ceiling(width/16));
	tTraceNL();
	ClearTileBlock(12188,12219);
	for(int i = 0; i < width; i+=16)
	{
		if(i<16)
			CopyTileBlock(12180,12200,12188+Floor(i/16));
		else if(i>=width-16)
			CopyTileBlock(12182,12202,12188+Floor(i/16));
		else
			CopyTileBlock(12181,12201,12188+Floor(i/16));
	}
}

void setupStyles()//start styles
{
	//COMMON: (Default and Signs)
	bool looping = true;
	for(int i = TSTYLE_MAJORAS;looping;)
	{
		Tango_SetStyleAttribute(i,TANGO_STYLE_BACKDROP_TYPE,TANGO_BACKDROP_TILE);
		Tango_SetStyleAttribute(i,TANGO_STYLE_BACKDROP_CSET,0);
		Tango_SetStyleAttribute(i,TANGO_STYLE_BACKDROP_TILE,12088);
		Tango_SetStyleAttribute(i,TANGO_STYLE_BACKDROP_WIDTH,12);
		Tango_SetStyleAttribute(i,TANGO_STYLE_BACKDROP_HEIGHT,3);
		
		Tango_SetStyleAttribute(i,TANGO_STYLE_TEXT_FONT,TANGO_FONT_GUI);
		Tango_SetStyleAttribute(i,TANGO_STYLE_TEXT_CSET,0);
		Tango_SetStyleAttribute(i,TANGO_STYLE_TEXT_COLOR,1);
		Tango_SetStyleAttribute(i,TANGO_STYLE_TEXT_X,8);
		Tango_SetStyleAttribute(i,TANGO_STYLE_TEXT_Y,3);
		Tango_SetStyleAttribute(i,TANGO_STYLE_TEXT_WIDTH,176);
		Tango_SetStyleAttribute(i,TANGO_STYLE_TEXT_HEIGHT,42);
		Tango_SetStyleAttribute(i,TANGO_STYLE_TEXT_SPEED,3);
		Tango_SetStyleAttribute(i,TANGO_STYLE_TEXT_SFX,18);
		
		//Alt (()) [[]] {{}} <<>>
		Tango_SetStyleAttribute(i,TANGO_STYLE_ALT_CSET_1,1);
		Tango_SetStyleAttribute(i,TANGO_STYLE_ALT_COLOR_1,7);
		Tango_SetStyleAttribute(i,TANGO_STYLE_ALT_CSET_2,0);
		Tango_SetStyleAttribute(i,TANGO_STYLE_ALT_COLOR_2,7);
		Tango_SetStyleAttribute(i,TANGO_STYLE_ALT_CSET_3,1);
		Tango_SetStyleAttribute(i,TANGO_STYLE_ALT_COLOR_3,3);
		Tango_SetStyleAttribute(i,TANGO_STYLE_ALT_CSET_4,5);
		Tango_SetStyleAttribute(i,TANGO_STYLE_ALT_COLOR_4,13);
		
		Tango_SetStyleAttribute(i,TANGO_STYLE_MENU_CURSOR_COMBO,TANGO_MENU_CURSOR_COMBO);
		Tango_SetStyleAttribute(i,TANGO_STYLE_MENU_CURSOR_CSET,0);
		Tango_SetStyleAttribute(i,TANGO_STYLE_MENU_CHOICE_INDENT,16);
		
		Tango_SetStyleAttribute(i,TANGO_STYLE_MENU_CURSOR_MOVE_SFX,5);
		Tango_SetStyleAttribute(i,TANGO_STYLE_MENU_SELECT_SFX,83);
		Tango_SetStyleAttribute(i,TANGO_STYLE_MENU_CANCEL_SFX,5);
		if(i==TSTYLE_MAJORAS)
		{
			i = TSTYLE_SIGNS;
		}
		else if(i==TSTYLE_SIGNS)
		{
			i = TSTYLE_NPCNAME;
		}
		else if(i==TSTYLE_NPCNAME)
		{
			looping = false;
		}
	}
	//Flags
	Tango_SetStyleAttribute(TSTYLE_MAJORAS,TANGO_STYLE_FLAGS,TANGO_FLAG_ENABLE_SPEEDUP | TANGO_FLAG_ENABLE_SUPER_SPEED);
	Tango_SetStyleAttribute(TSTYLE_SIGNS,TANGO_STYLE_FLAGS,TANGO_FLAG_INSTANTANEOUS);
	
	//Item Caption
	Tango_SetStyleAttribute(TSTYLE_ICAPTION,TANGO_STYLE_BACKDROP_TYPE,TANGO_BACKDROP_CLEAR);
	Tango_SetStyleAttribute(TSTYLE_ICAPTION,TANGO_STYLE_TEXT_FONT,TANGO_FONT_MAJORAS2D);
	Tango_SetStyleAttribute(TSTYLE_ICAPTION,TANGO_STYLE_TEXT_CSET,5);
	Tango_SetStyleAttribute(TSTYLE_ICAPTION,TANGO_STYLE_TEXT_X,0);
	Tango_SetStyleAttribute(TSTYLE_ICAPTION,TANGO_STYLE_TEXT_Y,0);
	Tango_SetStyleAttribute(TSTYLE_ICAPTION,TANGO_STYLE_TEXT_WIDTH,144);
	Tango_SetStyleAttribute(TSTYLE_ICAPTION,TANGO_STYLE_TEXT_HEIGHT,32);
	Tango_SetStyleAttribute(TSTYLE_ICAPTION,TANGO_STYLE_TEXT_SPEED,999);
	Tango_SetStyleAttribute(TSTYLE_ICAPTION,TANGO_STYLE_TEXT_SFX,18);
	Tango_SetStyleAttribute(TSTYLE_ICAPTION,TANGO_STYLE_FLAGS,TANGO_FLAG_INSTANTANEOUS | TANGO_FLAG_CENTERED);
	
	//NPC Names
	Tango_SetStyleAttribute(TSTYLE_NPCNAME,TANGO_STYLE_BACKDROP_WIDTH,12);
	Tango_SetStyleAttribute(TSTYLE_NPCNAME,TANGO_STYLE_BACKDROP_HEIGHT,2);
	Tango_SetStyleAttribute(TSTYLE_NPCNAME,TANGO_STYLE_TEXT_CSET,1);
	Tango_SetStyleAttribute(TSTYLE_NPCNAME,TANGO_STYLE_TEXT_COLOR,3);
	Tango_SetStyleAttribute(TSTYLE_NPCNAME,TANGO_STYLE_TEXT_X,5);
	Tango_SetStyleAttribute(TSTYLE_NPCNAME,TANGO_STYLE_TEXT_Y,11);
	Tango_SetStyleAttribute(TSTYLE_NPCNAME,TANGO_STYLE_TEXT_WIDTH,132);
	Tango_SetStyleAttribute(TSTYLE_NPCNAME,TANGO_STYLE_TEXT_HEIGHT,16);
	Tango_SetStyleAttribute(TSTYLE_NPCNAME,TANGO_STYLE_FLAGS,TANGO_FLAG_INSTANTANEOUS);
	Tango_SetStyleAttribute(TSTYLE_NPCNAME,TANGO_STYLE_BACKDROP_TILE,12188);
}//end

//start customtracers
void tTraceS(int str)
{
	if(TANGO_DEBUG)TraceS(str);
}

void tTrace(int i)
{
	if(TANGO_DEBUG)Trace(i);
}

void tTraceNL()
{
	if(TANGO_DEBUG)TraceNL();
}
//end customtracers
