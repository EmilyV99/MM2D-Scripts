////////////////////////////////////////
//                                    //
//      MM2D Script: Subscreen        //
//                                    //
////////////////////////////////////////


void toggleSubscreen()//start
{
	subscreen=!subscreen;
	if(subscreen)
	{
		Screen_Freeze(FREEZE_ACTION);
		Game->PlaySound(81);
	}
	else
	{
		Screen_Freeze(FREEZE_NONE);
		Game->PlaySound(82);
		hideItemCaption();
	}
}//end

void runSubscreen()
{
	subscreenCursorChanged = false;
	bool dungeon = false;
	if(Game->GetCurDMap()<DMAP_TOTAL)
	{
		dungeon = DUNGEONS[Game->GetCurDMap()];
	}
	//start SwapScreen
	int lastSubState = subState;
	if(Input->Press[CB_R])
	{
		subState++;
		if(subState>2)
		{
			subState = 0;
		}
		cursorPos = 0;
	}
	else if(Input->Press[CB_L])
	{
		subState--;
		if(subState<0)
		{
			subState = 2;
		}
		cursorPos = 0;
	}
	unless(cursorPos)
	{
		if(subState == SUBSTATE_ITEMS)
		{
			cursorPos = ITEM_LOCS[6];
			cursorIndex = 6;
		}
		else if(subState==SUBSTATE_KEY)
		{
			cursorPos = KEY_LOCS[1];
			cursorIndex = 1;
		}
		else if(subState==SUBSTATE_MAP)
		{
			if(dungeon)
			{
				cursorPos = DUNGMAP_LOCS[0];
				cursorIndex = 0;
			}
			else
			{
				cursorPos = MAP_LOCS[0];
				cursorIndex = 0;
			}
		}
	}
	if(subState!=lastSubState)
	{
		subscreenCursorChanged = true;
	}
	//end SwapScreen
	//start MoveCursor
	int lastIndex = cursorIndex;
	unless(subState)
	{
		if(Input->Press[CB_DOWN])
		{
			cursorIndex+=12;
		}
		else if(Input->Press[CB_UP])
		{
			cursorIndex-=12;
		}
		else if(Input->Press[CB_RIGHT])
		{
			cursorIndex++;
		}
		else if(Input->Press[CB_LEFT])
		{
			cursorIndex--;
		}
		if(cursorIndex>=ITEM_MAX_INDEX)
		{
			cursorIndex-=ITEM_MAX_INDEX;
		}
		else if(cursorIndex<0)
		{
			cursorIndex+=ITEM_MAX_INDEX;
		}
		cursorPos = ITEM_LOCS[cursorIndex];
	}
	else if(subState==1)
	{
		if(Input->Press[CB_DOWN])
		{
			unless(cursorIndex)cursorIndex=18;
			else if(cursorIndex>=1&&cursorIndex<=5)cursorIndex+=7;
			else if(cursorIndex==6)cursorIndex=17;
			else if(cursorIndex==7)cursorIndex=18;
			else if(cursorIndex==8||cursorIndex==9)cursorIndex=14;
			else if(cursorIndex==10)cursorIndex=15;
			else if(cursorIndex==11||cursorIndex==12)cursorIndex=16;
			else if(cursorIndex==13||cursorIndex==14)cursorIndex=1;
			else if(cursorIndex==15)cursorIndex=3;
			else if(cursorIndex==16)cursorIndex=5;
			else if(cursorIndex==17)cursorIndex=6;
			else if(cursorIndex==18)cursorIndex=0;
		}
		else if(Input->Press[CB_UP])
		{
			unless(cursorIndex)cursorIndex=18;
			else if(cursorIndex>=8&&cursorIndex<=12)cursorIndex-=7;
			else if(cursorIndex==6)cursorIndex=17;
			else if(cursorIndex==7)cursorIndex=0;
			else if(cursorIndex==1||cursorIndex==2)cursorIndex=14;
			else if(cursorIndex==3)cursorIndex=15;
			else if(cursorIndex==4||cursorIndex==5)cursorIndex=16;
			else if(cursorIndex==13)cursorIndex=1;
			else if(cursorIndex==14)cursorIndex=8;
			else if(cursorIndex==15)cursorIndex=10;
			else if(cursorIndex==16)cursorIndex=12;
			else if(cursorIndex==17)cursorIndex=6;
			else if(cursorIndex==18)cursorIndex=0;
		}
		else if(Input->Press[CB_RIGHT])
		{
			if(cursorIndex==12)
			{
				cursorIndex=6;
			}
			else if(cursorIndex==7)
			{
				cursorIndex=13;
			}
			else
			{
				cursorIndex++;
			}
			if(cursorIndex>=KEY_MAX_INDEX)
			{
				cursorIndex=0;
			}
		}
		else if(Input->Press[CB_LEFT])
		{
			if(cursorIndex==13)
			{
				cursorIndex=7;
			}
			else
			{
				cursorIndex--;
			}
			if(cursorIndex<0)
			{
				cursorIndex=KEY_MAX_INDEX-1;
			}
		}
		cursorPos = KEY_LOCS[cursorIndex];
	}
	else if(subState==2)
	{
		if(dungeon)
		{
		
		}
		else
		{
		
		}
	}
	if(cursorIndex!=lastIndex)
	{
		Game->PlaySound(5);
		subscreenCursorChanged = true;
	}
	//end MoveCursor
	int cursorRow = locToRow(cursorPos);
	int cursorCol = locToCol(cursorPos);
	//start DrawThings
	char itemDescStr[512];
	unless(subState)
	{
		drawBase(SCRN_SUBSCREEN_ITEM);
		//start Draw Item Screen
		//start Masks
		if(Hero->Item[IT_MASK_POSTMANSHAT])
		{//Postman's Hat
			drawTileToLoc(loadItemTile(IT_MASK_POSTMANSHAT),loadItemCSet(IT_MASK_POSTMANSHAT),2,1,6);
		}
		if(Hero->Item[IT_MASK_ALLNIGHT])
		{//All-Night Mask
			drawTileToLoc(loadItemTile(IT_MASK_ALLNIGHT),loadItemCSet(IT_MASK_ALLNIGHT),2,2,6);
		}
		if(Hero->Item[IT_MASK_BLAST])
		{//Blast Mask
			drawTileToLoc(loadItemTile(IT_MASK_BLAST),loadItemCSet(IT_MASK_BLAST),2,3,6);
		}
		if(Hero->Item[IT_MASK_STONE])
		{//Stone Mask
			drawTileToLoc(loadItemTile(IT_MASK_STONE),loadItemCSet(IT_MASK_STONE),2,4,6);
		}
		if(Hero->Item[IT_MASK_GFAIRY])
		{//Great Fairy's Mask
			drawTileToLoc(loadItemTile(IT_MASK_GFAIRY),loadItemCSet(IT_MASK_GFAIRY),2,5,6);
		}
		if(Hero->Item[IT_MASK_DEKU])
		{//Deku Mask
			drawTileToLoc(loadItemTile(IT_MASK_DEKU),loadItemCSet(IT_MASK_DEKU),2,6,6);
		}
		if(Hero->Item[IT_MASK_KEATON])
		{//Keaton's Mask
			drawTileToLoc(loadItemTile(IT_MASK_KEATON),loadItemCSet(IT_MASK_KEATON),3,1,6);
		}
		if(Hero->Item[IT_MASK_BREMEN])
		{//Bremen Mask
			drawTileToLoc(loadItemTile(IT_MASK_BREMEN),loadItemCSet(IT_MASK_BREMEN),3,2,6);
		}
		if(Hero->Item[IT_MASK_BUNNYHOOD])
		{//Bunny Hood
			drawTileToLoc(loadItemTile(IT_MASK_BUNNYHOOD),loadItemCSet(IT_MASK_BUNNYHOOD),3,3,6);
		}
		if(Hero->Item[IT_MASK_DONGERO])
		{//Don Gero's Mask
			drawTileToLoc(loadItemTile(IT_MASK_DONGERO),loadItemCSet(IT_MASK_DONGERO),3,4,6);
		}
		if(Hero->Item[IT_MASK_SCENTS])
		{//Mask of Scents
			drawTileToLoc(loadItemTile(IT_MASK_SCENTS),loadItemCSet(IT_MASK_SCENTS),3,5,6);
		}
		if(Hero->Item[IT_MASK_GORON])
		{//Goron Mask
			drawTileToLoc(loadItemTile(IT_MASK_GORON),loadItemCSet(IT_MASK_GORON),3,6,6);
		}
		if(Hero->Item[IT_MASK_ROMANI])
		{//Romani's Mask
			drawTileToLoc(loadItemTile(IT_MASK_ROMANI),loadItemCSet(IT_MASK_ROMANI),4,1,6);
		}
		if(Hero->Item[IT_MASK_CIRCUS])
		{//Circus Leader's Mask
			drawTileToLoc(loadItemTile(IT_MASK_CIRCUS),loadItemCSet(IT_MASK_CIRCUS),4,2,6);
		}
		if(Hero->Item[IT_MASK_KAFEI])
		{//Kafei's Mask
			drawTileToLoc(loadItemTile(IT_MASK_KAFEI),loadItemCSet(IT_MASK_KAFEI),4,3,6);
		}
		if(Hero->Item[IT_MASK_COUPLES])
		{//Couple's Mask
			drawTileToLoc(loadItemTile(IT_MASK_COUPLES),loadItemCSet(IT_MASK_COUPLES),4,4,6);
		}
		if(Hero->Item[IT_MASK_TRUTH])
		{//Mask of Truth
			drawTileToLoc(loadItemTile(IT_MASK_TRUTH),loadItemCSet(IT_MASK_TRUTH),4,5,6);
		}
		if(Hero->Item[IT_MASK_ZORA])
		{//Zora Mask
			drawTileToLoc(loadItemTile(IT_MASK_ZORA),loadItemCSet(IT_MASK_ZORA),4,6,6);
		}
		if(Hero->Item[IT_MASK_KAMARO])
		{//Kamaro's Mask
			drawTileToLoc(loadItemTile(IT_MASK_KAMARO),loadItemCSet(IT_MASK_KAMARO),5,1,6);
		}
		if(Hero->Item[IT_MASK_GIBDO])
		{//Gibdo Mask
			drawTileToLoc(loadItemTile(IT_MASK_GIBDO),loadItemCSet(IT_MASK_GIBDO),5,2,6);
		}
		if(Hero->Item[IT_MASK_GARO])
		{//Garo Mask
			drawTileToLoc(loadItemTile(IT_MASK_GARO),loadItemCSet(IT_MASK_GARO),5,3,6);
		}
		if(Hero->Item[IT_MASK_CAPTAINHAT])
		{//Captain's Hat
			drawTileToLoc(loadItemTile(IT_MASK_CAPTAINHAT),loadItemCSet(IT_MASK_CAPTAINHAT),5,4,6);
		}
		if(Hero->Item[IT_MASK_GIANT])
		{//Giant's Mask
			drawTileToLoc(loadItemTile(IT_MASK_GIANT),loadItemCSet(IT_MASK_GIANT),5,5,6);
		}
		if(Hero->Item[IT_MASK_DEITY])
		{//Fierce Deity's Mask
			drawTileToLoc(loadItemTile(IT_MASK_DEITY),loadItemCSet(IT_MASK_DEITY),5,6,6);
		}
		//end Masks
		//start Items
		if(Hero->Item[IT_OCARINA])
		{//Ocarina of Time
			drawTileToLoc(loadItemTile(IT_OCARINA),loadItemCSet(IT_OCARINA),2,9,6);
		}
		if(Hero->Item[IT_BOWARROW])
		{//Arrow
			drawTileToLoc(loadItemTile(IT_BOWARROW),loadItemCSet(IT_BOWARROW),2,10,6);
		}
		if(Hero->Item[IT_FIREARROWS])
		{//Fire Arrow
			drawTileToLoc(loadItemTile(IT_FIREARROWS),loadItemCSet(IT_FIREARROWS),2,11,6);
		}
		if(Hero->Item[IT_ICEARROWS])
		{//Ice Arrow
			drawTileToLoc(loadItemTile(IT_ICEARROWS),loadItemCSet(IT_ICEARROWS),2,12,6);
		}
		if(Hero->Item[IT_LIGHTARROWS])
		{//Light Arrow
			drawTileToLoc(loadItemTile(IT_LIGHTARROWS),loadItemCSet(IT_LIGHTARROWS),2,13,6);
		}
		if(Hero->Item[IT_BOMBBAG])
		{//Bombs (item is 3 for bombs and 139 for bombchus, check is for bomb bag)
			drawTileToLoc(loadItemTile(IT_BOMBS),loadItemCSet(IT_BOMBS),3,9,6);
			drawTileToLoc(loadItemTile(IT_BOMBCHUS),loadItemCSet(IT_BOMBCHUS),3,10,6);
		}
		if(Hero->Item[IT_DEKUSTICK])
		{//Deku Stick
			int tile = loadItemTile(IT_DEKUSTICK);
			if(dekuStickLitTimer>0)tile+=20;
			drawTileToLoc(tile,loadItemCSet(IT_DEKUSTICK),3,11,6);
		}
		if(Hero->Item[IT_DEKUNUTS])
		{//Deku Nut
			drawTileToLoc(loadItemTile(IT_DEKUNUTS),loadItemCSet(IT_DEKUNUTS),3,12,6);
		}
		if(Hero->Item[IT_MAGICBEANS])
		{//Magic Bean
			drawTileToLoc(loadItemTile(IT_MAGICBEANS),loadItemCSet(IT_MAGICBEANS),3,13,6);
		}
		if(Hero->Item[IT_BOMBBAG_POWDERKEG])
		{//Powder Keg (item is 48,check is for bomb bag)
			drawTileToLoc(loadItemTile(IT_POWDERKEG),loadItemCSet(IT_POWDERKEG),4,9,6);
		}
		if(Hero->Item[IT_PICTOGRAPH])
		{
			drawTileToLoc(loadItemTile(IT_PICTOGRAPH),loadItemCSet(IT_PICTOGRAPH),4,10,6);
		}
		if(Hero->Item[IT_LENS])
		{//Lens of Truth
			drawTileToLoc(loadItemTile(IT_LENS),loadItemCSet(IT_LENS),4,11,6);
		}
		if(Hero->Item[IT_HOOKSHOT])
		{//Hookshot
			drawTileToLoc(loadItemTile(IT_HOOKSHOT),loadItemCSet(IT_HOOKSHOT),4,12,6);
		}
		if(Hero->Item[IT_SWORD_GFAIRY_HAS])
		{//GFSword
			drawTileToLoc(loadItemTile(IT_SWORD_GFAIRY_HAS),loadItemCSet(IT_SWORD_GFAIRY_HAS),4,13,6);
		}
		//
		if(Hero->Item[IT_EMPTYBOTTLE_1])
		{
			drawTileToLoc(loadItemTile(IT_EMPTYBOTTLE_1),loadItemCSet(IT_EMPTYBOTTLE_1),5,9,6);
		}
		if(Hero->Item[IT_EMPTYBOTTLE_2])
		{
			drawTileToLoc(loadItemTile(IT_EMPTYBOTTLE_2),loadItemCSet(IT_EMPTYBOTTLE_2),5,10,6);
		}
		if(Hero->Item[IT_EMPTYBOTTLE_3])
		{
			drawTileToLoc(loadItemTile(IT_EMPTYBOTTLE_3),loadItemCSet(IT_EMPTYBOTTLE_3),5,11,6);
		}
		if(Hero->Item[IT_EMPTYBOTTLE_4])
		{
			drawTileToLoc(loadItemTile(IT_EMPTYBOTTLE_4),loadItemCSet(IT_EMPTYBOTTLE_4),5,12,6);
		}
		if(Hero->Item[IT_EMPTYBOTTLE_5])
		{
			drawTileToLoc(loadItemTile(IT_EMPTYBOTTLE_5),loadItemCSet(IT_EMPTYBOTTLE_5),5,13,6);
		}
		if(Hero->Item[IT_EMPTYBOTTLE_6])
		{
			drawTileToLoc(loadItemTile(IT_EMPTYBOTTLE_6),loadItemCSet(IT_EMPTYBOTTLE_6),5,14,6);
		}
		//
		if(hasQuestItem(1)>0)
		{
			int qit = getQuestItem(1,0);
			drawTileToLoc(loadItemTile(qit),loadItemCSet(qit),2,14,6);
			if(cursorIndex==11)
			{
				itemdata theItem = Game->LoadItemData(qit);
				theItem->GetName(itemDescStr);
			}
		}
		if(hasQuestItem(2)>0)
		{
			int qit = getQuestItem(2,0);
			drawTileToLoc(loadItemTile(qit),loadItemCSet(qit),3,14,6);
			if(cursorIndex==23)
			{
				itemdata theItem = Game->LoadItemData(qit);
				theItem->GetName(itemDescStr);
			}
		}
		if(hasQuestItem(3)>0)
		{
			int qit = getQuestItem(3,0);
			drawTileToLoc(loadItemTile(qit),loadItemCSet(qit),4,14,6);
			if(cursorIndex==35)
			{
				itemdata theItem = Game->LoadItemData(qit);
				theItem->GetName(itemDescStr);
			}
		}
		//
		//end Items
		//CURSOR:
		drawTileToLoc(loadItemTile(CURSOR_ITEM),loadItemCSet(CURSOR_ITEM),cursorRow,cursorCol,6);
		//Equipping of items is handled in //EX_ITEMS//
		ItemID itOnCursor = ItemIDs[cursorIndex];
		if(itOnCursor!=0&&canEquip(itOnCursor))
		{
			if(itOnCursor>=146&&itOnCursor<=151)
			{
				getBottleStateName(getBottleState(itOnCursor-145),itemDescStr);
			}
			else
			{
				itemdata theItem = Game->LoadItemData(itOnCursor);
				theItem->GetName(itemDescStr);
			}
		}
		//end Draw Item Screen
	}
	else if(subState==1)
	{
		drawBase(SCRN_SUBSCREEN_KEY);
		//start Draw Key Screen
		int cursorNotes[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		if(Hero->Item[IT_OCARINA])
		{//start songs
			if(LEARNED_SONGS[SONG_SongOfTime])
			{
				drawTileToLoc(TILE_NOTE_DEFAULT,0,3,3,6);
				cursorNotes[1]=SONGNOTES_SongOfTime;
				if(cursorIndex==1)
				{
					strcpy(itemDescStr,"Song of Time");
					if(pressA)
					{
						fakeSong = true;
						playSong(SONGNOTES_SongOfTime);
						playedSong=-1;
					}
				}
			}
			if(LEARNED_SONGS[SONG_SongOfHealing])
			{
				drawTileToLoc(TILE_NOTE_DEFAULT,0,3,4,6);
				cursorNotes[2]=SONGNOTES_SongOfHealing;
				if(cursorIndex==2)
				{
					strcpy(itemDescStr,"Song of Healing");
					if(pressA)
					{
						fakeSong = true;
						playSong(SONGNOTES_SongOfHealing);
						playedSong=-1;
					}
				}
			}
			if(LEARNED_SONGS[SONG_SongOfStorms])
			{
				drawTileToLoc(TILE_NOTE_DEFAULT,0,3,5,6);
				cursorNotes[3]=SONGNOTES_SongOfStorms;
				if(cursorIndex==3)
				{
					strcpy(itemDescStr,"Song of Storms");
					if(pressA)
					{
						fakeSong = true;
						playSong(SONGNOTES_SongOfStorms);
						playedSong=-1;
					}
				}
			}
			if(LEARNED_SONGS[SONG_EponasSong])
			{
				drawTileToLoc(TILE_NOTE_DEFAULT,0,3,6,6);
				cursorNotes[4]=SONGNOTES_EponasSong;
				if(cursorIndex==4)
				{
					strcpy(itemDescStr,"Epona's Song");
					if(pressA)
					{
						fakeSong = true;
						playSong(SONGNOTES_EponasSong);
						playedSong=-1;
					}
				}
			}
			if(LEARNED_SONGS[SONG_SongOfSoaring])
			{
				drawTileToLoc(TILE_NOTE_DEFAULT,0,3,7,6);
				cursorNotes[5]=SONGNOTES_SongOfSoaring;
				if(cursorIndex==5)
				{
					strcpy(itemDescStr,"Song of Soaring");
					if(pressA)
					{
						fakeSong = true;
						playSong(SONGNOTES_SongOfSoaring);
						playedSong=-1;
					}
				}
			}
			if(LEARNED_SONGS[SONG_SonataOfAwakening])
			{
				drawTileToLoc(TILE_NOTE_DEFAULT+1,0,4,3,6);
				cursorNotes[8]=SONGNOTES_SonataOfAwakening;
				if(cursorIndex==8)
				{
					strcpy(itemDescStr,"Sonata Of Awakening");
					if(pressA)
					{
						fakeSong = true;
						playSong(SONGNOTES_SonataOfAwakening);
						playedSong=-1;
					}
				}
			}
			if(LEARNED_SONGS[SONG_GoronsLullaby])
			{
				drawTileToLoc(TILE_NOTE_DEFAULT+2,0,4,4,6);
				cursorNotes[9]=SONGNOTES_GoronsLullaby;
				if(cursorIndex==9)
				{
					strcpy(itemDescStr,"Goron's Lullaby");
					if(pressA)
					{
						fakeSong = true;
						playSong(SONGNOTES_GoronsLullaby);
						playedSong=-1;
					}
				}
			}
			if(LEARNED_SONGS[SONG_NewWaveBossaNova])
			{
				drawTileToLoc(TILE_NOTE_DEFAULT+3,0,4,5,6);
				cursorNotes[10]=SONGNOTES_NewWaveBossaNova;
				if(cursorIndex==10)
				{
					strcpy(itemDescStr,"New Wave Bossa Nova");
					if(pressA)
					{
						fakeSong = true;
						playSong(SONGNOTES_NewWaveBossaNova);
						playedSong=-1;
					}
				}
			}
			if(LEARNED_SONGS[SONG_ElegyOfEmptiness])
			{
				drawTileToLoc(TILE_NOTE_DEFAULT+4,0,4,6,6);
				cursorNotes[11]=SONGNOTES_ElegyOfEmptiness;
				if(cursorIndex==11)
				{
					strcpy(itemDescStr,"Elegy Of Emptiness");
					if(pressA)
					{
						fakeSong = true;
						playSong(SONGNOTES_ElegyOfEmptiness);
						playedSong=-1;
					}
				}
			}
			if(LEARNED_SONGS[SONG_OathToOrder])
			{
				drawTileToLoc(TILE_NOTE_DEFAULT+5,0,4,7,6);
				cursorNotes[12]=SONGNOTES_OathToOrder;
				if(cursorIndex==12)
				{
					strcpy(itemDescStr,"Oath To Order");
					if(pressA)
					{
						fakeSong = true;
						playSong(SONGNOTES_OathToOrder);
						playedSong=-1;
					}
				}
			}
		}//end songs
		if(Hero->Item[IT_QUIVER_BIGGEST])
		{
			drawTileToLoc(loadItemTile(IT_QUIVER_BIGGEST),loadItemCSet(IT_QUIVER_BIGGEST),6,7,6);
			if(cursorIndex==16)
			{
				itemdata theItem = Game->LoadItemData(76);
				theItem->GetName(itemDescStr);
			}
		}
		else if(Hero->Item[IT_QUIVER_BIG])
		{
			drawTileToLoc(loadItemTile(IT_QUIVER_BIG),loadItemCSet(IT_QUIVER_BIG),6,7,6);
			if(cursorIndex==16)
			{
				itemdata theItem = Game->LoadItemData(75);
				theItem->GetName(itemDescStr);
			}
		}
		else if(Hero->Item[IT_BOWARROW])
		{//Check is for Arrows
			drawTileToLoc(loadItemTile(IT_QUIVER),loadItemCSet(IT_QUIVER),6,7,6);
			if(cursorIndex==16)
			{
				itemdata theItem = Game->LoadItemData(IT_QUIVER);
				theItem->GetName(itemDescStr);
			}
		}
		if(Hero->Item[IT_BOMBBAG_BIGGEST])
		{
			drawTileToLoc(loadItemTile(IT_BOMBBAG_BIGGEST),loadItemCSet(IT_BOMBBAG_BIGGEST),6,5,6);
			if(cursorIndex==15)
			{
				itemdata theItem = Game->LoadItemData(IT_BOMBBAG_BIGGEST);
				theItem->GetName(itemDescStr);
			}
		}
		else if(Hero->Item[IT_BOMBBAG_BIG])
		{
			drawTileToLoc(loadItemTile(IT_BOMBBAG_BIG),loadItemCSet(IT_BOMBBAG_BIG),6,5,6);
			if(cursorIndex==15)
			{
				itemdata theItem = Game->LoadItemData(IT_BOMBBAG_BIG);
				theItem->GetName(itemDescStr);
			}
		}
		else if(Hero->Item[IT_BOMBBAG])
		{
			drawTileToLoc(loadItemTile(IT_BOMBBAG),loadItemCSet(IT_BOMBBAG),6,5,6);
			if(cursorIndex==15)
			{
				itemdata theItem = Game->LoadItemData(IT_BOMBBAG);
				theItem->GetName(itemDescStr);
			}
		}
		if(Hero->Item[IT_SWORD_GILDED])
		{
			drawTileToLoc(loadItemTile(IT_SWORD_GILDED),loadItemCSet(IT_SWORD_GILDED),6,1,6);
			if(cursorIndex==13)
			{
				itemdata theItem = Game->LoadItemData(IT_SWORD_GILDED);
				theItem->GetName(itemDescStr);
			}
		}
		else if(Hero->Item[IT_SWORD_RAZOR])
		{
			drawTileToLoc(loadItemTile(IT_SWORD_RAZOR),loadItemCSet(IT_SWORD_RAZOR),6,1,6);
			if(cursorIndex==13)
			{
				itemdata theItem = Game->LoadItemData(IT_SWORD_RAZOR);
				theItem->GetName(itemDescStr);
			}
		}
		else
		{
			drawTileToLoc(loadItemTile(IT_SWORD_KOKIRI),loadItemCSet(IT_SWORD_KOKIRI),6,1,6);
			if(cursorIndex==13)
			{
				itemdata theItem = Game->LoadItemData(IT_SWORD_KOKIRI);
				theItem->GetName(itemDescStr);
			}
		}
		if(hasMirrorShield)
		{
			drawTileToLoc(loadItemTile(37),loadItemCSet(37),6,3,6);
			if(cursorIndex==14)
			{
				itemdata theItem = Game->LoadItemData(37);
				theItem->GetName(itemDescStr);
			}
		}
		else
		{
			drawTileToLoc(loadItemTile(8),loadItemCSet(8),6,3,6);
			if(cursorIndex==14)
			{
				itemdata theItem = Game->LoadItemData(8);
				theItem->GetName(itemDescStr);
			}
		}
		if(Hero->Item[IT_REMAINS1])
		{
			
			unless(cursorIndex)
			{
				itemdata theItem = Game->LoadItemData(IT_REMAINS1);
				theItem->GetName(itemDescStr);
			}
		}
		if(Hero->Item[IT_REMAINS2])
		{
			
			if(cursorIndex==6)
			{
				itemdata theItem = Game->LoadItemData(IT_REMAINS2);
				theItem->GetName(itemDescStr);
			}
		}
		if(Hero->Item[IT_REMAINS3])
		{
			
			if(cursorIndex==7)
			{
				itemdata theItem = Game->LoadItemData(IT_REMAINS3);
				theItem->GetName(itemDescStr);
			}
		}
		if(Hero->Item[IT_REMAINS4])
		{
			
			if(cursorIndex==18)
			{
				itemdata theItem = Game->LoadItemData(IT_REMAINS4);
				theItem->GetName(itemDescStr);
			}
		}
		drawTileToLoc(64640 + (Game->Generic[GEN_HEARTPIECES]),0,6,9,6);
		if(cursorIndex==17)
		{
			unless(Game->Generic[GEN_HEARTPIECES])
			{
				strcpy(itemDescStr,"Heart Pieces");
			}
			else if(Game->Generic[GEN_HEARTPIECES]==1)
			{
				strcpy(itemDescStr,"Piece of Heart");
			}
			else if(Game->Generic[GEN_HEARTPIECES]==2)
			{
				strcpy(itemDescStr,"2 Pieces of Heart");
			}
			else if(Game->Generic[GEN_HEARTPIECES]==3)
			{
				strcpy(itemDescStr,"3 Pieces of Heart");
			}
		}
		//Draw song notes
		if(cursorNotes[cursorIndex]!=0)
		{
			int notes = cursorNotes[cursorIndex];
			for(int i = 0;i<8;i++)
			{
				int note_tile = noteToTile(notes[i]);
				int note_cset = noteToCSet(notes[i]);
				drawTileToLoc(note_tile,note_cset,1,1+i,6);
			}
		}
		//CURSOR:
		bool large = false;
		for(int i = 0;i<4;i++)
		{
			if(cursorPos==QUAD_LOCS[i])
			{
				large = true;
			}
		}
		if(large)
		{
			drawTileToLoc(loadItemTile(LARGE_CURSOR_ITEM),loadItemCSet(LARGE_CURSOR_ITEM),cursorRow,cursorCol,6);
			drawTileToLoc(loadItemTile(LARGE_CURSOR_ITEM)+20,loadItemCSet(LARGE_CURSOR_ITEM),cursorRow,cursorCol+1,6);
			drawTileToLoc(loadItemTile(LARGE_CURSOR_ITEM)+40,loadItemCSet(LARGE_CURSOR_ITEM),cursorRow+1,cursorCol+1,6);
			drawTileToLoc(loadItemTile(LARGE_CURSOR_ITEM)+60,loadItemCSet(LARGE_CURSOR_ITEM),cursorRow+1,cursorCol,6);
		}
		else
		{
			drawTileToLoc(loadItemTile(CURSOR_ITEM),loadItemCSet(CURSOR_ITEM),cursorRow,cursorCol,6);
		}
		//end Draw Key Screen
	}
	else if(subState==2)
	{
		if(dungeon)
		{
			drawBase(SCRN_SUBSCREEN_MAP_DUNGEON);
			//start Draw Dungeon Map
			//UNFINISHED
			//end Draw Dungeon Map
		}
		else
		{
			drawBase(SCRN_SUBSCREEN_MAP_OVERWORLD);
			//start Draw Overworld Map
			//UNFINISHED
			//end Draw Overworld Map
		}
	}
	showItemCaption(itemDescStr);
	//end DrawThings
}

void hidePassive(bool set)
{
	setGlobalBool(GVAR_HIDE_PASSIVESUB,GV_MISC_BOOL, set);
}
void passiveSubscreen()//start PassiveSubscreen
{
	//printf("Passive subscr %d\n",gameframe);
	//if(getGlobalBool(GVAR_OPTIONS_MENU, GV_MISC_BOOL)) return; //No subscreen in the options menu
	//Inventory
	if(getGlobalBool(GVAR_HIDE_PASSIVESUB,GV_MISC_BOOL))
		return;
	int A_tile = TILE_INVIS;
	int R_tile = TILE_INVIS;
	int A_cset = 0;
	int R_cset = 0;
	int L_tile = TILE_INVIS;
	int L_cset = 0;
	int RUPEE_tile = 60;
	int RUPEE_cset = 5;
	if(Hero->Item[IT_WALLET_BIG])
	{
		RUPEE_cset = 1;
	}
	else if(Hero->Item[IT_WALLET])
	{
		RUPEE_cset = 0;
	}
	switch(form)
	{
		case FORM_HUMAN:
		case FORM_FIERCE_DEITY:
			A_tile = loadItemTile(Hero->ItemA);
			A_cset = loadItemCSet(Hero->ItemA);
			if(form==FORM_FIERCE_DEITY||!Hero->Item[IT_SWORD_GFAIRY])
			{
				if(hasMirrorShield)
				{
					R_tile = loadItemTile(37);
					R_cset = loadItemCSet(37);
				}
				else
				{
					R_tile = loadItemTile(8);
					R_cset = loadItemCSet(8);
				}
			}
			break;
		case FORM_DEKU:
			A_tile = loadItemTile(Hero->ItemA);
			A_cset = loadItemCSet(Hero->ItemA);
			if(Hero->Item[IT_DEKU_BUBBLE])
			{
				R_tile = loadItemTile(IT_DEKU_BUBBLE);
				R_cset = loadItemCSet(IT_DEKU_BUBBLE);
			}
			break;
		case FORM_GORON:
			if(curled)
			{
				A_tile = loadItemTile(IT_GORON_POUND);
				A_cset = loadItemCSet(IT_GORON_POUND);
			}
			else
			{
				A_tile = loadItemTile(Hero->ItemA);
				A_cset = loadItemCSet(Hero->ItemA);
			}
			R_tile = TILE_CURL;
			R_cset = 0;
			break;
		case FORM_ZORA:
			A_tile = loadItemTile(Hero->ItemA);
			A_cset = loadItemCSet(Hero->ItemA);
			R_tile = loadItemTile(23);
			R_cset = loadItemCSet(23);
			break;
	}
	unless(form)
		switch(mask)
		{
			case MASK_BLAST:
			{
				unless(getGlobalVar(GVAR_BLASTMASKCOOLDOWN,0))
				{
					L_tile=loadItemTile(189);
					L_cset=loadItemCSet(189);
				}
			break;}
		}
	int EX1_tile = loadItemTile(EX1_item);
	int EX2_tile = loadItemTile(EX2_item);
	int B_tile = loadItemTile(B_item);
	int B_cset = loadItemCSet(B_item);
	int EX1_cset = loadItemCSet(EX1_item);
	int EX2_cset = loadItemCSet(EX2_item);
	if(EX1_item==IT_DEKUSTICK&&dekuStickLitTimer>0)EX1_tile+=20;
	if(EX2_item==IT_DEKUSTICK&&dekuStickLitTimer>0)EX2_tile+=20;
	if(B_item==IT_DEKUSTICK&&dekuStickLitTimer>0)B_tile+=20;
	if(isArrow(B_item)&&B_item!=IT_BOWARROW)++B_tile;
	if(isArrow(EX1_item)&&EX1_item!=IT_BOWARROW)++EX1_tile;
	if(isArrow(EX2_item)&&EX2_item!=IT_BOWARROW)++EX2_tile;
	if(getGlobalBool(GVAR_AGAINST_PICKUP,GV_MISC_BOOL))
	{
		R_tile=TILE_GRAB;
		setGlobalBool(GVAR_AGAINST_PICKUP,GV_MISC_BOOL,false);
	}
	else if(HoldingObject)
	{
		EX1_tile=TILE_INVIS;
		EX2_tile=TILE_INVIS;
		B_tile=TILE_INVIS;
		A_tile=TILE_THROW;
		R_tile= (HoldingObject==HOLD_BOMB) ? TILE_DROP : TILE_THROW;
	}
	else if(Deku_flying>0)
	{
		EX1_tile=TILE_INVIS;
		EX2_tile=TILE_INVIS;
		B_tile=TILE_INVIS;
		A_tile=loadItemTile(IT_DEKUNUTS);
		A_cset=loadItemCSet(IT_DEKUNUTS);
		R_tile=TILE_DROP;
	}
	else if(arrowAimMode || getGlobalVar(GVAR_MGSTATE,GV_MISC)==MG_SHOOTING)
	{
		L_tile = (getGlobalVar(GVAR_MGSTATE,GV_MISC)==MG_SHOOTING) ? TILE_INVIS : TILE_QUIT;
		L_cset=0;
		R_tile = TILE_AIM;
		R_cset=0;
		unless(isArrow(B_item))B_tile = TILE_INVIS;
		unless(isArrow(EX1_item))EX1_tile = TILE_INVIS;
		unless(isArrow(EX2_item))EX2_tile = TILE_INVIS;
		A_tile = TILE_INVIS;
	}
	else if(getGlobalBool(GVAR_PICTURE_MODE,GV_MISC_BOOL))
	{
		L_tile = TILE_BANDW;
		R_tile = TILE_SNAP;
		B_tile = TILE_QUIT;
		EX1_tile = TILE_QUIT;
		EX2_tile = TILE_QUIT;
		A_tile = TILE_VIEW;
	}
	Screen->FastTile(7,BX,BY,B_tile,B_cset,OP_OPAQUE);
	Screen->FastTile(7,EX1X,EX1Y,EX1_tile,EX1_cset,OP_OPAQUE);
	Screen->FastTile(7,EX2X,EX2Y,EX2_tile,EX2_cset,OP_OPAQUE);
	Screen->FastTile(7,AX,AY,A_tile,A_cset,OP_OPAQUE);
	Screen->FastTile(7,RX,RY,R_tile,R_cset,OP_OPAQUE);
	Screen->FastTile(7,LX,LY,L_tile,L_cset,OP_OPAQUE);
	//Mask
	int maskx = MASKX;
	if(mask==MASK_GIANTS)
	{
		Screen->FastTile(7,MASKX+8,MASKY,currMaskTile+1,6,OP_OPAQUE);
		maskx-=8;
	}
	Screen->FastTile(7,maskx,MASKY,currMaskTile,6,OP_OPAQUE);
	//Rupee Marker
	Screen->FastTile(7,26,-24,RUPEE_tile,RUPEE_cset,OP_OPAQUE);
	//Tael
	if(Hero->Item[IT_TAEL_1])
	{
		Screen->FastTile(7,TAEL_X,TAEL_Y,loadItemTile(IT_TAEL_1),0,OP_OPAQUE);
		Screen->FastTile(7,TAEL_X+16,TAEL_Y,loadItemTile(IT_TAEL_2),0,OP_OPAQUE);
	}
	//Time
	if(day<4)
	{
		if(slowTime)
		{
			Screen->FastTile(7,DAYSTART_X-8,DAYSTART_Y,SLOWTIME_TILE,0,OP_OPAQUE);
		}
		Screen->FastTile(7,DAYSTART_X,DAYSTART_Y,DAYTILE,0,OP_OPAQUE);
		Screen->FastTile(7,DAYSTART_X+16,DAYSTART_Y,DAYTILE+1,0,OP_OPAQUE);
		Screen->FastTile(7,DAYNUM_X,DAYNUM_Y,NUMBERTILE + day,0,OP_OPAQUE);
		Screen->FastTile(7,TIMESTART_X,TIMESTART_Y,NUMBERTILE + Floor(hour/10),0,OP_OPAQUE);
		Screen->FastTile(7,TIMESTART_X+7,TIMESTART_Y,NUMBERTILE + hour%10,0,OP_OPAQUE);
		Screen->FastTile(7,TIMESTART_X+12,TIMESTART_Y,SEMICOLON,0,OP_OPAQUE);
		int minute = Floor(time/FRAMES_MINUTE);
		Screen->FastTile(7,TIMESTART_X+17,TIMESTART_Y,NUMBERTILE + Floor(minute/10),0,OP_OPAQUE);
		Screen->FastTile(7,TIMESTART_X+24,TIMESTART_Y,NUMBERTILE + minute%10,0,OP_OPAQUE);
	}
	else
	{
		Screen->FastTile(7,DAYSTART_X-4,DAYSTART_Y,DOOMTILE,0,OP_OPAQUE);
		Screen->FastTile(7,DAYSTART_X+12,DAYSTART_Y,DOOMTILE + 1,0,OP_OPAQUE);
	}
}//end PassiveSubscreen

//start subscreenFunctions
int noteToTile(int note)
{
	if(note==NOTE_A)return NOTETILE_A;
	if(note==NOTE_DOWN)return NOTETILE_DOWN;
	if(note==NOTE_RIGHT)return NOTETILE_RIGHT;
	if(note==NOTE_LEFT)return NOTETILE_LEFT;
	if(note==NOTE_UP)return NOTETILE_UP;
	return TILE_INVIS;
}

int noteToCSet(int note)
{
	if(note==NOTE_A)return NOTECSET_A;
	if(note==NOTE_DOWN)return NOTECSET_DOWN;
	if(note==NOTE_RIGHT)return NOTECSET_RIGHT;
	if(note==NOTE_LEFT)return NOTECSET_LEFT;
	if(note==NOTE_UP)return NOTECSET_UP;
	return 0;
}

int loadItemTile(int itID)
{
	unless(itID) return TILE_INVIS;
	itemdata i = Game->LoadItemData(itID);
	int frameNum = 0;
	if(i->ASpeed>0&&i->AFrames>0)
	{
		int temp = (gameframe%((i->ASpeed*i->AFrames)+(i->ASpeed*i->Delay)))-(i->Delay*i->ASpeed);
		if(temp>=0)
			frameNum = Floor(temp/i->ASpeed);
	}
	return i->Tile+frameNum;
}

int loadItemCSet(int itID)
{
	unless(itID) return 0;
	return Game->LoadItemData(itID)->CSet;
}

void drawTileToLoc(int tile, int cset, int row, int col, int layer)
{
	Screen->FastTile(layer,col*16,row*16,tile,cset,OP_OPAQUE);
}

int locToRow(int loc)
{
	return Floor(loc/16);
}

int locToCol(int loc)
{
	return (loc-(Floor(loc/16)*16));
}

void drawBase(int baseScreen)
{
	Screen->DrawScreen(6,MAP_SUBSCREEN,baseScreen,0,0,0);
}//end subscreenFunctions

//start subscreenSkin
void reskinSubscreen(int skin)
{
	if(skin!=1)
	{
		unless(getGlobalBool(GVAR_B_SPECTHEME,GV_MISC_BOOL))
		{
			setGlobalBool(GVAR_B_SPECTHEME,GV_MISC_BOOL,true);
			strcpy(gbuf,"A special subscreen theme is active!@char(26)Press CTRL+1 to toggle this theme.");
			RunFFCScript(FFC_SHOWSTRING,{gbuf,0,1});
		}
	}
	int source = 67600 + (120 * skin) + (Floor(skin/2)*20);
	CopyTileBlock(source, source + 119,67600);
}
//end subscreenSkin
