////////////////////////////////////////
//                                    //
//     MM2D Script: NPC/Cutscene      //
//                                    //
////////////////////////////////////////

//start NPC
char NPCNames[1000] = {"Tatl","Happy Mask Salesman","Banker","Bremor","Brac","","","Guard","Guard","Guard","Guard","",""};

void getNPCName(char buf, int index)
{
	switch(index)
	{
		case N_TATL:
			strcpy(buf,"Tatl");
			break;
		case N_HAPPYMASK:
			strcpy(buf,"Happy Mask Salesman");
			break;
		case N_BANKER:
			strcpy(buf,"Banker");
			break;
		case N_BREMOR:
			strcpy(buf,"Bremor");
			break;
		case N_BRAC:
			strcpy(buf,"Brac");
			break;
		/*case N_NAMECHANGE:
		case N_DIFFCHANGE:
			break;*/
		case N_GUARD_EAST:
		case N_GUARD_WEST:
		case N_GUARD_NORTH:
		case N_GUARD_SOUTH:
			strcpy(buf,"Guard");
			break;
		/*case N_SHOOTING_GALLERY_TOWN:
		case N_INVIS_MAZE_GIRL:
			break;*/
	}
}

enum NPCID
{
	N_TATL,
	N_HAPPYMASK,
	N_BANKER,
	N_BREMOR,
	N_BRAC,
	N_NAMECHANGE,
	N_DIFFCHANGE,
	N_GUARD_EAST,
	N_GUARD_WEST,
	N_GUARD_NORTH,
	N_GUARD_SOUTH,
	N_SHOOTING_GALLERY_TOWN,
	N_INVIS_MAZE_GIRL
};
ffc script NPC
{
	//
	//ComboUnder should be a solid version of the combo beneath the FFC
	//
	void run(int NPCid, int NPCcombo, int startday, int starthour, int endday, int endhour, int comboUnder, bool special)//start NPC setup
	{
		if(NPCcombo == COMBO_INVIS || NPCcombo == 0)
			NPCcombo = this->Data;
		this->Data = COMBO_INVIS;
		int loc = ComboAt(this->X,this->Y);
		bool visible = false;
		int comboDefault = Screen->ComboD[loc];
		if(NPCid==3&&GetCurDMap()!=0)//Hardcode for Bremor to make it not conflict with the cutscene on that screen
		{
			comboDefault = 38404;
		}
		until(special)//start
		{
			while(visible)
			{
				if(AgainstFFCBase(this) && Input->Press[CB_A])
				{
					Input->Button[CB_A] = false;
					Input->Press[CB_A] = false;
					interact(this, NPCid);
				}
				if(isAfter(endday,endhour,true) || isBefore(startday,starthour,false))
				{
					visible=false;
					this->Data = COMBO_INVIS;
					Screen->ComboD[loc]=comboDefault;
				}
				Waitframe();
			}
			until(visible)
			{
				if(isAfter(startday,starthour,true)&&isBefore(endday,endhour,false))
				{
					visible=true;
					this->Data = NPCcombo;
					Screen->ComboD[loc]=comboUnder;
				}
				Waitframe();
			}
		}//end
		while(special)//start
		{
			switch(NPCid)
			{
				case N_HAPPYMASK:
				{
					while(true)
					{
						until(HMS_Cutscene.HMS_visible)
						{
							Waitframe();
						}
						visible=true;
						this->Data = NPCcombo;
						Screen->ComboD[loc]=comboUnder;
						while(visible)
						{
							if(AgainstFFCBase(this) && Input->Press[CB_A])
							{
								Input->Button[CB_A] = false;
								Input->Press[CB_A] = false;
								interact(this, NPCid);
							}
							Waitframe();
						}
					}
				}
				case N_BANKER:
				case N_NAMECHANGE:
				case N_DIFFCHANGE:
				{
					this->Data=NPCcombo;
					while(true)
					{
						if(AgainstFFCBase(this) && Input->Press[CB_A])
						{
							Input->Button[CB_A] = false;
							Input->Press[CB_A] = false;
							interact(this, NPCid);
						}
						Waitframe();
					}
				}
				case N_GUARD_EAST:
				case N_GUARD_WEST:
				case N_GUARD_NORTH:
				case N_GUARD_SOUTH:
				{
					int xoff = Cond(NPCid>8,8,0);
					int yoff = Cond(NPCid>8,0,-8);
					int lastform = form;
					this->Data = NPCcombo;
					if(getGlobalVar(GVAR_GUARDSMOVED,GV_MISCRESETTABLE) && form != 1)
					{
						this->X += xoff;
						this->Y += yoff;
					}
					else
					{
						if(NPCid<9)
						{
							Screen->ComboD[loc+32] = 38410;
						}
						else
						{
							Screen->ComboD[loc+16] = 38410;
						}
					}
					if(NPCid<9)
					{
						Screen->ComboD[loc+16] = 38410;
					}
					else
					{
						Screen->ComboD[loc+17] = 38410;
					}
					while(true)
					{
						if(lastform == 1 && form != 1 && getGlobalVar(GVAR_GUARDSMOVED,GV_MISCRESETTABLE))
						{
							this->X += xoff;
							this->Y += yoff;
							if(NPCid<9)
							{
								Screen->ComboD[loc+32] = 38406;
							}
							else
							{
								Screen->ComboD[loc+16] = 38406;
							}
						}
						else if(lastform != 1 && form == 1 && getGlobalVar(GVAR_GUARDSMOVED,GV_MISCRESETTABLE))
						{
							this->X -= xoff;
							this->Y -= yoff;
							switch(NPCid)
							{
								case 7:
									Screen->ComboD[loc+32] = 38410;
									if(Hero->X>=this->X-16)Hero->X=this->X-16;
									break;
								case 8:
									Screen->ComboD[loc+32] = 38410;
									if(Hero->X<this->X+16)Hero->X=this->X+16;
									break;
								case 9:
									Screen->ComboD[loc+16] = 38410;
									if(Hero->Y<this->Y+24)Hero->Y=this->Y+24;
									break;
								case 10:
									Screen->ComboD[loc+16] = 38410;
									if(Hero->Y>this->Y)Hero->Y=this->Y;
									break;
							}
						}
						if(AgainstFFCBase(this) && Input->Press[CB_A])
						{
							Input->Button[CB_A] = false;
							Input->Press[CB_A] = false;
							if(form != 1 && !getGlobalVar(GVAR_GUARDSMOVED,GV_MISCRESETTABLE))
							{
								interact(this, NPCid, 0, {1});
								this->X += Cond(NPCid>8,8,0);
								this->Y += Cond(NPCid>8,0,-8);
								if(NPCid<9)
								{
									Screen->ComboD[loc+32] = 38406;
								}
								else
								{
									Screen->ComboD[loc+16] = 38406;
								}
							}
							interact(this, NPCid, 0, {0});
						}
						lastform = form;
						Waitframe();
					}
				}
				case N_SHOOTING_GALLERY_TOWN:
				{
					while(true)
					{
						if(hour>=22||hour<6)
						{
							ShowStringAndWait("OK, it's closing time.@char(26)See ya!");
							Hero->PitWarp(1,0x7C);
							Hero->X = 160;
							Hero->Y = 96;
						}
						if(AgainstFFCBase(this) && Input->Press[CB_A])
						{
							interact(this, NPCid);
						}
						Waitframe();
					}
				}
				case N_INVIS_MAZE_GIRL:
				{
					while(true)
					{
						if(hour<6||hour>=22)
						{
							ShowStringAndWait("Oh, I'm sorry. It's already time to close up shop. Come again.");
							Hero->PitWarp(1,0x7C);
							Hero->X = 80;
							Hero->Y = 16;
						}
						if(AgainstFFCBase(this) && Input->Press[CB_A])
						{
							interact(this, NPCid);
						}
						Waitframe();
					}
				}
			}
			Waitframe();
		}//end
	}//end NPC setup
	
	void interact(ffc person, int NPCid)//start interact
	{
		interact(person,NPCid,0);
	}
	
	void interact(ffc person, int NPCid, int NPCsound)
	{
		interact(person,NPCid,0,-1);
	}

	void interact(ffc person, int NPCid, int NPCsound, u args) //args is int[], misc size
	{
		Game->PlaySound(NPCsound);
		switch(NPCid)
		{
			case N_HAPPYMASK: //Happy Mask Salesman start
			{
				unless(HMS_Cutscene.CS1_seen)
				{
					ShowNPCMessageAndWait(6,NPCid);
					HMS_Cutscene.CS1_seen=true;
				}
				else
				{
					ShowNPCMessageAndWait(27,NPCid);
				}
				break;
			}
			//end
			case N_BANKER: //Banker start
			{
				if(fullCounter(CR_BANKBAL))
				{
					tangoTempI=0;
					ShowNPCStringAndWait("What's this? You need somethin'?@pressa()@26<<@choice(1)Deposit@choice(2)Withdraw>>@domenu(1)@set(@ttempi @chosen)@close()",NPCid);
					if(tangoTempI==1)
					{
						if(bankDeposit())
						{
							bankGiveRewards();
						}
					}
					else if(tangoTempI==2)
					{
						bankWithdraw();
					}
				}
				else
				{
					tangoTemp=false;
					ShowNPCStringAndWait("Hey there, little guy!@26Won't you deposit some ((Rupees))?@delay(120)@26Nowadays, even if people have money, they don't deposit anything. Nothing!   Nothing!!!@delay(120)@26So, for a limited time, I'll give you a special gift based on how much you deposit.@delay(120)@26For example, if you deposit ((200 rupees)), you'll get an item that holds a lot of ((rupees)).@delay(120)@26So, what'll it be?@26<<@choice(1)Deposit@choice(2)Don't Deposit>>@domenu()@append(45)",NPCid);
					if(tangoTemp)
					{
						ShowNPCStringAndWait("Alright!@pressa()@26So...",NPCid);
						if(bankDeposit())
						{
							ShowNPCStringAndWait("So, little guy, what's your name?@pressa()@26Hmm...@26{{@savename()}} is it?@pressa()@26Got it... I won't forget your deposits. Let me stamp you with my special ink.@pressa()@26Hey, relax! It doesn't leave any marks, and it's not gonna hurt.@pressa()@26There! Now I'll know you when I see you!",NPCid);
							bankGiveRewards();
						}
					}
					else
					{
						ShowNPCStringAndWait("Don't say that! C'mon... Trust me!@pressa()@26...Well, if you change your mind, come back and make a deposit!",NPCid);
					}
				}
				break;
			}
			//end
			case N_BREMOR: //Bremor, Carpenter (Red Pants) start
			{
				if(isBefore(2,6,false))
				{
					ShowNPCStringAndWait("Tsk! Is Brac working t'night? I wonder if that'll get finished.",NPCid);
				}
				else if (isBefore(3,6,false))
				{
					ShowNPCStringAndWait("Tsk, tsk, Brac...@26I wonder if this'll make it?",NPCid);
				}
				else
				{
					ShowNPCStringAndWait("Tsk! I knew it... It's startin' to feel like this job'll be impossible.",NPCid);
				}
				break;
			}
			//end
			case N_BRAC: //Brac, Carpenter (Green Pants) start
			{
				if(isBefore(2,6,false))
				{
					ShowNPCStringAndWait("Hey, apprentice! Don't just stand around lookin' at the sky all day!",NPCid);
				}
				else if (isBefore(3,6,false))
				{
					ShowNPCStringAndWait("Bremor! Don't be standin' 'round lookin' at yer feet all day!",NPCid);
				}
				else
				{
					ShowNPCStringAndWait("I'm sorry, Bremor, but I'm going, too!",NPCid);
				}
				break;
			}
			//end
			case N_NAMECHANGE: //Name-Changing Tablet start
			{
				tangoTemp=false;
				ShowStringAndWait("{{@savename()}}, would you like to change your name?@26<<@choice(1)Yes@choice(2)No>>@domenu()@append(45)");
				unless(tangoTemp)return;
				Screen_Freeze(FREEZE_ACTION_BUT_FFC);
				Waitframes(6);
				RunFFCScript(FFC_CHANGENAME,{0});
				break;
			}
			//end
			case N_DIFFCHANGE: //Difficulty-Changing Tablet start
			{
				unless(Hero->Item[I_OCARINA])
				{
					ShowNPCStringAndWait("Huh, this tablet seems like it's magical, but it isn't working now.",6);
				}
				else
				{
					remchr(shopString,0);
					switch(getGlobalVar(GVAR_DIFFICULTY,GV_MISC))
					{
						case 0:
						{
							strcpy(shopString,"Easy");
							break;
						}
						
						case 1:
						{
							strcpy(shopString,"Normal");
							break;
						}
						
						case 2:
						{
							strcpy(shopString,"Hard");
							break;
						}
					}
					tangoTempI = 1;
					ShowStringAndWait("Select a difficulty. You are presently on @string(@shopstr). Changing this will cause time to reset. @26<<@choice(1)EASY@choice(2)NORMAL@26@choice(3)HARD>>@domenu()@set(@ttempi @chosen)@close()",true);
					--tangoTempI;
					if(tangoTempI!=getGlobalVar(GVAR_DIFFICULTY,GV_MISC))
					{
						updateDifficulty(tangoTempI);
						saveTheGame();
						resetTime();
					}
				}
				break;
			}
			//end
			case N_GUARD_EAST:  //Guard East
			case N_GUARD_WEST:  //Guard West
			case N_GUARD_NORTH:  //Guard North 
			case N_GUARD_SOUTH: //Guard South start
			{
				if(args[0])
				{
					setGlobalVar(GVAR_GUARDSMOVED,GV_MISCRESETTABLE,1);
					switch(NPCid)
					{
						case 7:
						{
							ShowNPCStringAndWait("Stop right there! Have you some errand in the ((canyon))?@pressa()@26{{}}It is dangerous outside the town walls, so I cannot allow a child like you to...@pressa()@26@26...A ((sword))?@26@pressa()@26My apologies, sir. It was wrong of me to treat you like a child.",NPCid);
							return;
						}
						case 8:
						{
							ShowNPCStringAndWait("Stop right there! Have you some errand in the ((ocean))?@pressa()@26{{}}It is dangerous outside the town walls, so I cannot allow a child like you to...@pressa()@26@26...A ((sword))?@26@pressa()@26My apologies, sir. It was wrong of me to treat you like a child.",NPCid);
							return;
						}
						case 9:
						{
							ShowNPCStringAndWait("Stop right there! Have you some errand in the ((mountains))?@pressa()@26{{}}It is dangerous outside the town walls, so I cannot allow a child like you to...@pressa()@26@26...A ((sword))?@26@pressa()@26My apologies, sir. It was wrong of me to treat you like a child.",NPCid);
							return;
						}
						case 10:
						{
							ShowNPCStringAndWait("Stop right there! Have you some errand in the ((swamp))?@pressa()@26{{}}It is dangerous outside the town walls, so I cannot allow a child like you to...@pressa()@26@26...A ((sword))?@26@pressa()@26My apologies, sir. It was wrong of me to treat you like a child.",NPCid);
							return;
						}
					}
				}
				if(form==1)
				{
					switch(NPCid)
					{
						case 7:
						{
							ShowNPCStringAndWait("Wait a moment, Deku Scrub! Have you some errand in the ((canyon))?@pressa()@26{{}}It is dangerous outside the town walls, so I cannot allow a child like you to go out alone.@pressa()@26 Until you are old enough to carry a ((weapon)), you cannot pass through here without being accompanies by an adult.",NPCid);
							return;
						}
						case 8:
						{
							ShowNPCStringAndWait("Wait a moment, Deku Scrub! Have you some errand in the ((ocean))?@pressa()@26{{}}It is dangerous outside the town walls, so I cannot allow a child like you to go out alone.@pressa()@26 Until you are old enough to carry a ((weapon)), you cannot pass through here without being accompanied by an adult.",NPCid);
							return;
						}
						case 9:
						{
							ShowNPCStringAndWait("Wait a moment, Deku Scrub! Have you some errand in the ((mountains))?@pressa()@26{{}}It is dangerous outside the town walls, so I cannot allow a child like you to go out alone.@pressa()@26 Until you are old enough to carry a ((weapon)), you cannot pass through here without being accompanied by an adult.",NPCid);
							return;
						}
						case 10:
						{
							ShowNPCStringAndWait("Stop right there, Deku Scrub! Do you intend to return to the ((swamp)) alone?@pressa()@26{{}}It is dangerous outside the town walls, so I cannot allow a child like you to leave unaccompanied.@pressa()@26 You are not allowed to pass through here without an adult or until you are old enough to carry a ((weapon)).",NPCid);
							return;
						}
					}
				}
				switch(NPCid)
				{
					case 7:
					{
						ShowNPCStringAndWait("The canyon at ((Stone Tower)) lies this way. Be careful.",NPCid);
						return;
					}
					case 8:
					{
						ShowNPCStringAndWait("From ((Great Bay)) you can see clear to the ((ocean)). It lies in this direction. Be careful.",NPCid);
						return;
					}
					case 9:
					{
						ShowNPCStringAndWait("The mountains of ((Snowhead)) lies in this direction. Be careful.",NPCid);
						return;
					}
					case 10:
					{
						ShowNPCStringAndWait("The southern swamp at ((Woodfall)) lies in this direction. Be careful.",NPCid);
						return;
					}
				}
			}
			//end
			case N_SHOOTING_GALLERY_TOWN: //start Town Shooting Gallery Guy
			{
				tangoTempI=0;
				unless(form)
				{
					if(getNPCflag(N_SHOOTING_GALLERY_TOWN, FLAG2))
					{
						if(day<3)ShowStringAndWait("Wanna try?");
						else ShowStringAndWait("How about it?@char(26)Wanna try?");
					}
					else
					{
						if(day<3)ShowStringAndWait("If you think you can do it, why don'tcha give it a try, sonny?");
						else ShowStringAndWait("If you still have time, why don'tcha try it, sonny?");
						setNPCflag(N_SHOOTING_GALLERY_TOWN, FLAG2);
					}
					ShowStringAndWait("One game is 20 rupees.@char(26)<<@choice(1)OK@choice(2)No thanks>>@domenu()@set(@ttempi @chosen)@close()");
					if(tangoTempI==2)
					{
						if(day<3)ShowStringAndWait("...Well, then, be that way!");
						else ShowStringAndWait("Usually, this place is packed during the festival...@char(26)But not this year.");
						return;
					}
					else
					{
						while(true)
						{
							unless(Hero->Item[I_BOWARROW])
							{
								if(day<3)ShowStringAndWait("Huh? You don't have a bow?@char(26)Then I guess you can't play.");
								else ShowStringAndWait("Huh? You don't have a bow?@char(26)Well, that's too bad...");
								return;
							}
							else if(fullCounter(CR_RUPEES)<20)
							{
								if(day<3)ShowStringAndWait("Oy! Oy! You don't have enough Rupees, sonny!");
								else ShowStringAndWait("You don't have enough ((Rupees))?@char(26)... That's too bad.");
								return;
							}
							else
							{
								Game->DCounter[CR_RUPEES] -= 20;
								unless(getNPCflag(11,FLAG1))
								{
									ShowStringAndWait("All right, sonny!@char(26)The rules are simple...");
									ShowStringAndWait("Hit as many ((red ones)) as you can within the time limit.");
									ShowStringAndWait("If you hit a [[blue one]], you lose time, so watch out!");
									ShowStringAndWait("You can use as many arrows as you'd like. Press {{B}} to shoot them.");
									ShowStringAndWait("Score at least 40 points to get a fabulous prize! Good luck!");
									setNPCflag(11,FLAG1);
								}
								else
								{
									ShowStringAndWait("All right, sonny!@char(26)Aim for the ((red ones)).@char(26)Don't mess up and hit one of them [[blue ones]] by mistake!");
									ShowStringAndWait("Good luck!");
								}
								tangoTempI = -1;
								RunFFCScript(FFC_MINIGAME_OCTO,{0});
								while(tangoTempI==-1)Waitframe();
								if(tangoTempI<40)
								{
									if(day<3)ShowStringAndWait("You hit @number(@ttempi), did ya?@char(26)Oh, that's too bad...");
									else ShowStringAndWait("So, you hit @number(@ttempi), did ya?@char(26)Too bad...");
									if(day<3)ShowStringAndWait("So? You can't stop, can ya? You can play as often as you'd like as long as you have enough ((Rupees)).");
									else ShowStringAndWait("Frustrating, ain't it?@char(26)Wanna try again?");
								}
								else if(tangoTempI<50)
								{
									ShowStringAndWait("Well look at that! You hit @number(@ttempi)! Well, here ya go!");
									if(getFlagGlobalVar(GVAR_MGOCTO,GV_MINIGAME,FLAG1))
									{
										item itm = CreateItemAt(I_RUP_50,Hero->X,Hero->Y);
										itm->Pickup = IP_HOLDUP;
									}
									else
									{
										item itm = CreateItemAt(Items::getItem(Items::IL_TCSHOOTING1),Hero->X,Hero->Y);
										itm->Pickup = IP_HOLDUP;
										flagGlobalVar(GVAR_MGOCTO,GV_MINIGAME,FLAG1);
									}
									if(day==3)ShowStringAndWait("This may be our last day in buisiness, and you shot pretty well...");
									return;
								}
								else
								{
									ShowStringAndWait("Huh? No way!@char(26)That was perfect!");
									ShowStringAndWait("Well, here ya go!");
									if(getFlagGlobalVar(GVAR_MGOCTO,GV_MINIGAME,FLAG2))
									{
										item itm = CreateItemAt(I_RUP_200,Hero->X,Hero->Y);
										itm->Pickup = IP_HOLDUP;
									}
									else
									{
										item itm = CreateItemAt(Items::getItem(Items::IL_TCSHOOTING2),Hero->X,Hero->Y);
										itm->Pickup = IP_HOLDUP;
										flagGlobalVar(GVAR_MGOCTO,GV_MINIGAME,FLAG2);
									}
									if(day==3)ShowStringAndWait("This may be our last day in buisiness, and you shot pretty well...");
									return;
								}
								ShowStringAndWait("One game is ((20 rupees)).@char(26)<<@choice(1)OK@choice(2)No thanks>>@domenu()@set(@ttempi @chosen)@close()");
								if(tangoTempI==2)
								{
									if(day<3)ShowStringAndWait("...Well, then, be that way!");
									else ShowStringAndWait("Usually, this place is packed during the festival...@char(26)But not this year.");
									return;
								}
							}
						}
					}
				}
				else 
				{
					switch(form)
					{
						case FORM_DEKU:
							unless(getNPCflag(11,FLAG3))
							{
								ShowStringAndWait("Oh! When I saw that fairy, I thought you were that troublemakin' brat with the mask.");
								setNPCflag(11,FLAG3);
							}
							if(Hero->Item[I_BOWARROW])ShowStringAndWait("Sorry, but you can't play if you can't shoot a bow.");
							else ShowStringAndWait("Sorry, but you can't play if you don't have a bow.");
							break;
						case FORM_GORON:
							unless(getNPCflag(11,FLAG4))
							{
								ShowStringAndWait("Well, look at you! You've got quite a build! I betcha can lift anything!");
								ShowStringAndWait("But...");
								setNPCflag(11,FLAG4);
							}
							if(Hero->Item[I_BOWARROW])ShowStringAndWait("Sorry...If you can't shoot a bow, you can't play.");
							else ShowStringAndWait("Sorry...If you don't have a bow, you can't play.");
							break;
						case FORM_ZORA:
							unless(getNPCflag(11,FLAG5))
							{
								ShowStringAndWait("I swear I've seen you somewhere before...");
								ShowStringAndWait("Well, let me tell ya");
								setNPCflag(11,FLAG5);
							}
							if(Hero->Item[I_BOWARROW])ShowStringAndWait("If you can't shoot a bow, you can't play. Sorry.");
							else ShowStringAndWait("If you don't have a bow, you can't play. Sorry.");
							break;
					}
				}
				break;
			}
			//end
			case N_INVIS_MAZE_GIRL: //start invis chest maze lady
			{
				if(getGlobalVar(GVAR_MGSTATE,GV_MISC)) return;
				int price;
				ItemID prize;
				bool skip;
				if(person->Misc[0]) //Just played
				{
					if(person->Misc[0]==2) //Just won
						ShowStringAndWait("Did you have fun?");
					ShowStringAndWait("Umm...Won't you try again?");
					person->Misc[0] = 0;
					skip=true;
				}
				tangoTempI=0;
				switch(form)
				{
					case FORM_DEKU: //start
						price = 10;
						prize = I_DEKUNUTS_10;
						unless(skip)ShowStringAndWait("Oh, what a cute little customer! So, do you want to play?");
						ShowStringAndWait("For you, it's only ((10 Rupees)).@char(26)<<@choice(1)OK@choice(2)No thanks>>@domenu()@set(@ttempi @chosen)@close()");
						if(tangoTempI==2)
						{
							ShowStringAndWait("Oh really? Too bad!@char(26)...Come again.");
						}
						else if(tangoTempI)
						{
							if(startMazeGame(price,prize,false,person))
							{
								ShowStringAndWait("If you can make it all the way to the ((treasure chest)) and ((open)) it within the ((time limit)), I'll give you a special prize.");
								ShowStringAndWait("Finding out what's inside is half the fun!");
								ShowStringAndWait("Are you ready?");
							}
							else
							{
								ShowStringAndWait("Oh, no...I'm sorry...@char(26)You don't have enough ((Rupees))...");
							}
						}
						break;//end
					case FORM_GORON: //start
						price = 30;
						prize = getFlagGlobalVar(GVAR_CHESTGAME,GV_MINIGAME,FLAG1) ? I_RUP_50 : Items::getItem(IL_INVISMAZE_CHEST);
						unless(skip)ShowStringAndWait("Well, aren't you a fit fellow! Wanna play?");
						ShowStringAndWait("For you, it's ((30 Rupees)).@char(26)<<@choice(1)OK@choice(2)No thanks>>@domenu()@set(@ttempi @chosen)@close()");
						if(tangoTempI==2)
						{
							ShowStringAndWait("Oh...really?");
						}
						else
						{
							if(startMazeGame(price,prize,true,person))
							{
								ShowStringAndWait("If you can make it all the way to the ((treasure chest)) and ((open)) it within the ((time limit)), I'll give you a special prize.");
								ShowStringAndWait("Finding out what's inside is half the fun!");
								ShowStringAndWait("Are you ready?");
							}
							else
							{
								ShowStringAndWait("Oh, no...I'm sorry...@char(26)You don't have enough ((Rupees))...");
							}
						}
						break;//end
					case FORM_ZORA: //start
						price = 5;
						prize = I_RUP_20;
						unless(skip)ShowStringAndWait("Well, hello there, handsome! Wanna play?");
						ShowStringAndWait("Hey...For you, it's only ((5 Rupees)).@char(26)<<@choice(1)OK@choice(2)No thanks>>@domenu()@set(@ttempi @chosen)@close()");
						if(tangoTempI==2)
						{
							ShowStringAndWait("Oh really? That's too bad! And you're just my type, too...");
						}
						else
						{
							if(startMazeGame(price,prize,false,person))
							{
								ShowStringAndWait("If you can make it all the way to the ((treasure chest)) and ((open)) it within the ((time limit)), I'll give you a special prize.");
								ShowStringAndWait("Finding out what's inside is half the fun!");
								ShowStringAndWait("Are you ready?");
							}
							else
							{
								ShowStringAndWait("Oh, no...I'm sorry...@char(26)You don't have enough ((Rupees))...");
							}
						}
						break;//end
					default: //start
						price = 20;
						prize = I_RUP_50;
						unless(skip)ShowStringAndWait("Come in! Oh, is the kid collecting masks? How about it? Wanna play?");
						ShowStringAndWait("For you, it's ((20 Rupees)).@char(26)<<@choice(1)OK@choice(2)No thanks>>@domenu()@set(@ttempi @chosen)@close()");
						if(tangoTempI==2)
						{
							ShowStringAndWait("Oh really? Too bad!@char(26)...Come again.");
						}
						else
						{
							if(startMazeGame(price,prize,false,person))
							{
								ShowStringAndWait("If you can make it all the way to the ((treasure chest)) and ((open)) it within the ((time limit)), I'll give you a special prize.");
								ShowStringAndWait("Finding out what's inside is half the fun!");
								ShowStringAndWait("Are you ready?");
							}
							else
							{
								ShowStringAndWait("Oh, no...I'm sorry...@char(26)You don't have enough ((Rupees))...");
							}
						}
						//end
				}
				if(day!=1)startMazeGame(price,prize,form==FORM_GORON,person);
				break;
			}
			//end
			case -1: //  start
			{
				
				break;
			}
			//end
			default:
			{
				Debug::print("[NPC][void interact()] NPC id is not assigned! Something is wrong!");
				tangoTempI = NPCid;
				ShowStringAndWait("ERROR: NPC_DIALOGUE NOT FOUND FOR NPC ID @number(@ttempi)");
			}
		}
	}//end interact
	//start bankFuncs
	bool bankDeposit()
	{
		bool notnew = fullCounter(CR_BANKBAL);
		int deposited = 0;
		if(fullCounter(CR_BANKBAL))
		{
			ShowNPCStringAndWait("Excuse me, but let me take a look at you...@delay(120)@26Ah, yes... {{@savename()}}.@26If I remember, you're the little guy who deposited ((@number(@bankbal) rupees)).",2);
		}
		unless(bankMaxDeposit())
		{
			if(fullCounter(CR_RUPEES)<=0)
			{
				ShowNPCStringAndWait("Hmm... You play mean jokes, little guy! You haven't even got a single ((Rupee))!@delay(120)@26Come back and deposit some after you save up a bunch!",2);
				notnew=false;
			}
			else
			{
				ShowNPCStringAndWait("I can only hold 5000 rupees per account.",2);
			}
		}
		else
		{
			deposited = chooseTripleDigitNum(bankMaxDeposit(),SFX_BANKMENU);
			Game->DCounter[CR_RUPEES]-=deposited;
			Game->DCounter[CR_BANKBAL]+=deposited;
		}
		if(notnew)
		{
			ShowNPCStringAndWait("All right, little guy, now I've got a total of ((@number(@bankbal) Rupees)) from you!",2);
			ShowNPCStringAndWait("Come back and deposit some after you save up a bunch!",2);
		}
		return deposited;
	}
	
	bool bankWithdraw()
	{
		ShowNPCStringAndWait("Excuse me, but let me take a look at you...@delay(120)@26Ah, yes... {{@savename()}}.@26If I remember, you're the little guy who deposited ((@number(@bankbal) rupees)).",2);
		unless(bankMaxWithdraw())
		{
			ShowNPCStringAndWait("You can't hold any more rupees, little guy!",2);
			return 0;
		}
		else
		{
			ShowNPCStringAndWait("So...",2);
		}
		int withdrawn = chooseTripleDigitNum(bankMaxWithdraw(),SFX_BANKMENU);
		Game->DCounter[CR_RUPEES]+=withdrawn;
		Game->DCounter[CR_BANKBAL]-=withdrawn;
		if(fullCounter(CR_BANKBAL))ShowNPCStringAndWait("Come back and deposit some after you save up a bunch!",2);
		else ShowNPCStringAndWait("Look, little guy, all the ((Rupees)) you deposited are gone, so you can't use that {{stamp}} anymore.",2);
		return withdrawn;
	}//end bankFuncs
}

int getNPCCombo(int data, int id, int NPCcombo, int startday, int starthour, int endday, int endhour, bool special)
{
	if(NPCcombo == COMBO_INVIS || NPCcombo == 0)
		NPCcombo = data;
	unless(special)
	{
		if(isAfter(startday,starthour,true)&&isBefore(endday,endhour,false)) return NPCcombo;
		return 0;
	}
	switch(id)
	{
		case 1:
		case 2:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
		case 12:
			return NPCcombo;
		default:
			return 0;
	}
}

//end NPC
//start Cutscenes
//Key: 1 = One-Time, R = Repeating (resets each cycle)
screendata script HMS_Cutscene //start HMS appears behind you (1)
{
	bool HMS_visible = false;
	bool CS1_seen = false;
	DEFINE X = 120;
	DEFINE Y = 128;
	void run()
	{
		if(CS1_seen)
		{
			HMS_visible = true;
			Quit();
		}
		bool waiting = true;
		until(CS1_seen)
		{
			while(waiting)
			{
				if(Hero->X>X-32&&Hero->X<X+32&&Hero->Y>Y-8)
				{
					waiting=false;
				}
				Waitframe();
			}
			if(CS1_seen)
			{
				Quit();
			}
			HMS_visible = true;
			NoAction();
			Waitframe();
			Game->PlaySound(220);
			ShowMessageAndWait(5);
			Hero->Y=Y-16;
			waiting=true;
		}
	}
}//end
screendata script Festival_Door_Open //start FestivalDoor(R)
{
	DEFINE COMBO_UL = 38392;
	void run(int level)
	{
		mapdata m = Game->LoadMapData(2,0x6B); //Festival door screen
		if(isBefore(3,24,false))
		{
			if(level==2)
			{
				Screen->ComboD[71]=COMBO_UL;
				Screen->ComboD[72]=COMBO_UL+1;
				Screen->ComboD[87]=COMBO_UL+4;
				Screen->ComboD[88]=COMBO_UL+5;
			}
			else
			{
				Game->SetComboData(2, 0x6B, 71, COMBO_UL);
				Game->SetComboData(2, 0x6B, 72, COMBO_UL+1);
				Game->SetComboData(2, 0x6B, 87, COMBO_UL+4);
				Game->SetComboData(2, 0x6B, 88, COMBO_UL+5);
			}
		}
		else
		{
			if(level==2)
			{
				Screen->ComboD[71]=COMBO_UL+2;
				Screen->ComboD[72]=COMBO_UL+3;
				Screen->ComboD[87]=COMBO_UL+6;
				Screen->ComboD[88]=COMBO_UL+7;
			}
			else
			{
				Game->SetComboData(2, 0x6B, 71, COMBO_UL+2);
				Game->SetComboData(2, 0x6B, 72, COMBO_UL+3);
				Game->SetComboData(2, 0x6B, 87, COMBO_UL+6);
				Game->SetComboData(2, 0x6B, 88, COMBO_UL+7);
			}
			Quit();
		}
		
		if(level==2)
		{
			while(true)
			{
				if(day==3&&!hour&&!time)
				{
					//Play SFX for festival door opening // UNFINISHED //
				}
				if(isAfter(3,24,true))
				{
					Screen->ComboD[71]=COMBO_UL+2;
					Screen->ComboD[72]=COMBO_UL+3;
					Screen->ComboD[87]=COMBO_UL+6;
					Screen->ComboD[88]=COMBO_UL+7;
					Quit();
				}
				Waitframe();
			}
		}
		else
		{
			while(true)
			{
				if(day==3&&!hour&&!time)
				{
					//Play SFX for festival door opening // UNFINISHED //
				}
				if(isAfter(3,24,true))
				{
					Game->SetComboData(2, 0x6B, 71, COMBO_UL+2);
					Game->SetComboData(2, 0x6B, 72, COMBO_UL+3);
					Game->SetComboData(2, 0x6B, 87, COMBO_UL+6);
					Game->SetComboData(2, 0x6B, 88, COMBO_UL+7);
					Quit();
				}
				Waitframe();
			}
		}
	}
}//end
screendata script SCTTower //start South Clock Town tower building (R)
{
	DEFINE X = 112;
	DEFINE Y = 80;
	void run(int level)
	{
		int combos[] = {87,88,89,103,104,105};
		switch(level)
		{
			case 1:
				while(true)
				{
					if(day==2)
						HeightFastCombo(true,4,X,Y+16,COMBO_BREMOR,0,OP_OPAQUE);//Draw Bremor from the third layer
					else if(day==3)
					{
						HeightFastCombo(true,4,X+16,Y,getChestCombo(COMBO_CHEST,IL_CTTOWERMONEY_CHEST),0,OP_OPAQUE); //Draw the chest on the third layer
						if(isBefore(3,18,false))
							HeightFastCombo(true,4,X+32,Y,COMBO_BREMOR,0,OP_OPAQUE);//Draw Bremor from the third layer
					}
					Waitframe();
				}
			case 2:
				while(true)
				{
					if(day>=2)
					{
						for(int i=0;i<6;i++)
						{
							Screen->ComboD[combos[i]]=COMBO_CT_TAN_WALL;
						}
						if(Hero->X>=X-8&&Hero->X<X+48&&Hero->Y>=Y-8&&Hero->Y<Y+32)
						{
							Hero->X=X+16;
							Hero->Y=Y+32;
						}
						while(true)
						{
							for(int i=0;i<6;i++)
							{
								HeightFastCombo(true,4,ComboX(combos[i]),ComboY(combos[i]),COMBO_PLANKS,2,OP_OPAQUE);
							}
							if(day==3)
							{
								HeightFastCombo(true,4,X+16,Y,getChestCombo(COMBO_CHEST,IL_CTTOWERMONEY_CHEST),0,OP_OPAQUE);
								if(isBefore(3,18,false))
									HeightFastCombo(true,4,X+32,Y,COMBO_BREMOR,0,OP_OPAQUE);//Draw Bremor from the third layer
							}
							Waitframe();
						}
					}
					Waitframe();
				}
			case 3:
				while(true)
				{
					if(day>=2)
					{
						for(int i=0;i<6;i++)
						{
							//if((i==2 && day == 3 && hour < 18) || (i==3 && day == 2))continue;
							Screen->ComboD[combos[i]]=COMBO_PLANKS_SOLID;
							Screen->ComboC[combos[i]]=2;
						}
						while(true)
						{
							if(day==3)
							{
								ffc f = Screen->LoadFFC(RunFFCScript(FFC_CHEST,{IL_CTTOWERMONEY_CHEST}));
								f->X=X+16;
								f->Y=Y;
								Quit();
							}
							Waitframe();
						}
					}
					Waitframe();
				}
		}
	}
}
//end
screendata script SpawnStrayFairy //start A stray fairy appeared! (R)
{
	void run(int itemID, int x, int y, bool day, int offset)
	{
		item it;
		mapdata map = CurMapdata();
		for(int q = offset; q > 0; --q)
		{
			map = upMapdata(map);
		}
		for(int q = offset; q < 0; ++q)
		{
			map = downMapdata(map);
		}
		if(map->State[ST_ITEM]) Quit(); //Don't re-spawn a grabbed fairy
		for(int q = 1; q <= Screen->NumItems(); ++q)
		{
			item temp = Screen->LoadItem(q);
			if(temp->Type == IC_STRAYFAIRY)
			{
				it = temp;
				break;
			}
		}
		while(true)
		{
			if(this->State[ST_ITEM]) Quit();
			if(day==isDay() && !it)
			{
				it = CreateItemAt(itemID, x, y);
				it->Misc[ITEMMISC_LAYERDMAP] = Game->GetCurDMap() + 1 + offset;
				it->Misc[FAIRYMISC_TYPE] = FAIRY_MAPDATA;
				it->Misc[FAIRYMISC_VALUE] = map;
			}
			while(day==isDay())
				Waitframe();
			Remove(it);
			it = NULL;
			until(day==isDay())
				Waitframe();
		}
	}
} //end
//start Signpost
ffc script Signpost
{
	void run(int m, int input, bool largeHitbox, bool anySide)
	{
		int loc = ComboAt(this->X,this->Y);
		while(true)
		{
			until(AgainstComboBase(loc,largeHitbox,anySide) && SelectPressInput(input)) Waitframe();
			SetInput(input,false);
			SignShowMessageAndWait(m);
			Waitframe();
		}
	}
	bool AgainstComboBase(int loc, bool largeHitbox, bool anySide)
	{
		if(isFrozen)return false;
		if(largeHitbox && !anySide)
		{
			return Hero->Z == 0 && (Hero->Dir == DIR_UP && Hero->Y == ComboY(loc)+16 && Abs(Hero->X-ComboX(loc)) < 8);
		}
		else if (!largeHitbox&&!anySide)
		{
			return Hero->Z == 0 && (Hero->Dir == DIR_UP && Hero->Y == ComboY(loc)+8 && Abs(Hero->X-ComboX(loc)) < 8);
		}
		else if (largeHitbox && anySide)
		{
			return Hero->Z == 0 && ((Hero->Dir == DIR_UP && Hero->Y == ComboY(loc)+16 && Abs(Hero->X-ComboX(loc)) < 8)||(Hero->Dir == DIR_DOWN && Hero->Y == ComboY(loc)-16 && Abs(Hero->X-ComboX(loc)) < 8)||(Hero->Dir == DIR_LEFT && Hero->X == ComboX(loc)+16 && Abs(Hero->Y-ComboY(loc)) < 8)||(Hero->Dir == DIR_RIGHT && Hero->X == ComboX(loc)-16 && Abs(Hero->Y-ComboY(loc)) < 8));
		}
		else if (!largeHitbox && anySide)
		{
			return Hero->Z == 0 && ((Hero->Dir == DIR_UP && Hero->Y == ComboY(loc)+8 && Abs(Hero->X-ComboX(loc)) < 8)||(Hero->Dir == DIR_DOWN && Hero->Y == ComboY(loc)-16 && Abs(Hero->X-ComboX(loc)) < 8)||(Hero->Dir == DIR_LEFT && Hero->X == ComboX(loc)+16 && Abs(Hero->Y-ComboY(loc)) < 8)||(Hero->Dir == DIR_RIGHT && Hero->X == ComboX(loc)-16 && Abs(Hero->Y-ComboY(loc)) < 8));
		}
		else {return false;}
	}
}

//!!These functions should only be included in your script file once!!
bool SelectPressInput(int input)
{
	if(input == 0) return Input->Press[CB_A];
	else if(input == 1) return Input->Press[CB_B];
	else if(input == 2) return Input->Press[CB_L];
	else if(input == 3) return Input->Press[CB_R];
}

void SetInput(int input, bool state)
{
	if(input == 0) Input->Button[CB_A] = state;
	else if(input == 1) Input->Button[CB_B] = state;
	else if(input == 2) Input->Button[CB_L] = state;
	else if(input == 3) Input->Button[CB_R] = state;
}
//end Signpost
//start Shop
ffc script Shop
{
	void run(int itemID, int price, int shopSpecial, bool reqBottle)
	{
		if(shopSpecial!=0)
		{
			//handle each shop id seperately, altering "itemID".
		}
		unless(itemID)Quit();
		item thisVisual = CreateItemAt(itemID, this->X, this->Y);
		thisVisual->Pickup=IP_DUMMY;
		this->Data=COMBO_INVIS;
		int loc = ComboAt(this->X,this->Y);
		while(true)
		{
			until(AgainstComboBase(loc) && SelectPressInput(0))
			{ 
				unless(thisVisual->isValid())
				{
					thisVisual = CreateItemAt(itemID, this->X, this->Y);
					thisVisual->Pickup=IP_DUMMY;
				}
				Waitframe();
			}
			SetInput(0,false);
			//Set shop vars
			tangoTemp=false;
			remchr(shopString,0);
			itemdata i = Game->LoadItemData(itemID);
			i->GetName(shopString);
			shopPrice=price;
			//
			bool hasEmptyBottle = CanFillBottle();
			if((fullCounter(CR_RUPEES))>=price&&(!reqBottle||hasEmptyBottle))
			{
				ShowMessageAndWait(MSG_SHOPS);
				if(tangoTemp)
				{
					item itm = CreateItemAt(itemID, Hero->X, Hero->Y);
					itm->Pickup = IP_HOLDUP;
					Game->DCounter[CR_RUPEES] -= price;
					WaitNoAction(10);
				}
			}
			else if(reqBottle&&!hasEmptyBottle)
			{
				ShowMessageAndWait(30);//No bottle
			}
			else
			{
				ShowMessageAndWait(29);//No money
			}
		}
	}
	bool AgainstComboBase(int loc)
	{
		return Hero->Z == 0 && (Hero->Dir == DIR_UP && (Hero->Y >= ComboY(loc)+8&&Hero->Y <ComboY(loc)+16) && Abs(Hero->X-ComboX(loc)) < 8);
	}
}
//end Shop
//start bank
int bankMaxWithdraw()
{
	int fee = 0;
	if(isBetween(0,6))fee=4;
	return Max(0,Min(Game->MCounter[CR_RUPEES]-(fullCounter(CR_RUPEES)),fullCounter(CR_BANKBAL) - fee));
}

int bankMaxDeposit()
{
	return Min(fullCounter(CR_RUPEES),5000-fullCounter(CR_BANKBAL));
}

void bankGiveRewards()
{
	if(fullCounter(CR_BANKBAL)>=200&&!getGlobalVar(GVAR_BANK_REW1,GV_MISC))
	{
		item i = CreateItemAt(Items::getItem(Items::IL_BANKER1),Hero->X,Hero->Y);
		i->Pickup = IP_HOLDUP;
		ShowStringAndWait("Here, you've deposited enough rupees to earn a reward!");
		setGlobalVar(GVAR_BANK_REW1,GV_MISC,1);
	}
	if(fullCounter(CR_BANKBAL)>=1000&&!getGlobalVar(GVAR_BANK_REW2,GV_MISC))
	{
		item i = CreateItemAt(Items::getItem(Items::IL_BANKER2),Hero->X,Hero->Y);
		i->Pickup = IP_HOLDUP;
		ShowStringAndWait("Here, you've deposited enough rupees to earn another reward!");
		setGlobalVar(GVAR_BANK_REW2,GV_MISC,1);
	}
	if(fullCounter(CR_BANKBAL)>=5000&&!getGlobalVar(GVAR_BANK_REW3,GV_MISC))
	{
		item i = CreateItemAt(Items::getItem(Items::IL_BANKER3),Hero->X,Hero->Y);
		i->Pickup = IP_HOLDUP;
		ShowStringAndWait("Here, you've deposited enough rupees to earn the final reward!");
		setGlobalVar(GVAR_BANK_REW3,GV_MISC,1);
	}
}

int chooseTripleDigitNum(int max)
{
	return chooseTripleDigitNum(max,0);
}

int chooseTripleDigitNum(int max, int sfx)
{
	DEFINE NUMZERO = 11180;
	DEFINE BORDERTILE = 11201;
	DEFINE CURSORTILE = 11200;
	DEFINE FIRSTX = 104;
	DEFINE FIRSTY = 64;
	bool running = true;
	int nums[3];
	int num = 0;
	int cursor = 2;
	Screen_Freeze(FREEZE_ACTION_BUT_FFC);
	while(running)
	{
		Screen->FastTile(6,FIRSTX,FIRSTY,BORDERTILE,2,OP_OPAQUE);
		Screen->FastTile(6,FIRSTX+16,FIRSTY,BORDERTILE+1,2,OP_OPAQUE);
		Screen->FastTile(6,FIRSTX+32,FIRSTY,BORDERTILE+2,2,OP_OPAQUE);
		if(gameframe%40<20)Screen->FastTile(6,FIRSTX+(cursor*16),FIRSTY,CURSORTILE,2,OP_OPAQUE);
		Screen->FastTile(6,FIRSTX,FIRSTY,NUMZERO+nums[0],2,OP_OPAQUE);
		Screen->FastTile(6,FIRSTX+16,FIRSTY,NUMZERO+nums[1],2,OP_OPAQUE);
		Screen->FastTile(6,FIRSTX+32,FIRSTY,NUMZERO+nums[2],2,OP_OPAQUE);
		if(Input->Press[CB_UP])
		{
			nums[cursor]++;
			if(nums[cursor]>9)nums[cursor]-=10;
			Audio->PlaySound(sfx);
		}
		else if(Input->Press[CB_DOWN])
		{
			nums[cursor]--;
			if(nums[cursor]<0)nums[cursor]+=10;
			Audio->PlaySound(sfx);
		}
		if(Input->Press[CB_RIGHT])
		{
			cursor++;
			if(cursor>2)cursor-=3;
			Audio->PlaySound(sfx);
		}
		else if(Input->Press[CB_LEFT])
		{
			cursor--;
			if(cursor<0)cursor+=3;
			Audio->PlaySound(sfx);
		}
		if(Input->Press[CB_A])
		{
			num = (nums[0]*100)+(nums[1]*10)+(nums[2]);
			if(num>max)
			{
				num=max;
				nums[0]=Floor(num/100);
				nums[1]=Floor(num/10)%10;
				nums[2]=num%10;
				Audio->PlaySound(sfx);
			}
			else
			{
				running=false;
			}
		}
		TotalNoAction();
		Waitframe();
	}
	Screen_Freeze(FREEZE_NONE);
	return num;
}
//end bank
//start Locked Door
enum LockedDoors
{
	LD_SHOOTINGGALLERY,
	LD_INVISMAZE
};
ffc script lockedDoor
{
	void run(int id, int undercombo)
	{
		int loc = ComboAt(this->X,this->Y);
		int basecombo = Screen->ComboD[loc];
		switch(id)
		{
			case LD_SHOOTINGGALLERY:
			{
				while(true)
				{
					while(hour>=22||hour<6)
					{
						Screen->ComboD[loc] = undercombo;
						if(Input->Press[CB_A])
						{
							if(AgainstFFCBase(this))
							{
								Input->Press[CB_A]=false;Input->Button[CB_A]=false;
								ShowStringAndWait("Shooting Gallery@char(26)((6 a.m. to 10 p.m.))");
								
							}
						}
						Waitframe();
					}
					Screen->ComboD[loc] = basecombo;
					while(hour<22&&hour>=6)Waitframe();
				}
				break;
			}
			
			case LD_INVISMAZE:
			{
				while(true)
				{
					while(hour>=22||hour<6)
					{
						Screen->ComboD[loc] = undercombo;
						if(Input->Press[CB_A])
						{
							if(AgainstFFCBase(this))
							{
								Input->Press[CB_A]=false;Input->Button[CB_A]=false;
								ShowStringAndWait("Treasure Chest Shop@char(26)((6 a.m. to 10 p.m.))");
								
							}
						}
						Waitframe();
					}
					Screen->ComboD[loc] = basecombo;
					while(hour<22&&hour>=6)Waitframe();
				}
				break;
			}
			
			default:
			{
				TraceS("ERROR: UNDEFINED LOCKED DOOR");
				ShowStringAndWait("ERROR: UNDEFINED LOCKED DOOR");
				break;
			}
		}
	}
}
//end Locked Door
bool AgainstFFCBase(ffc f)
{
	return !isFrozen && Hero->Z == 0 && ((Hero->Dir == DIR_UP && Hero->Y == f->Y+8+(16*(f->TileHeight-1)) && Abs(Hero->X-f->X) < 8)||(Hero->Dir == DIR_DOWN && Hero->Y == f->Y-16 + (16*(f->TileHeight-1)) && Abs(Hero->X-f->X) < 8)||(Hero->Dir == DIR_LEFT && Hero->X == f->X+(16*f->TileWidth) && Hero->Y <= f->Y+8+(16*(f->TileHeight-1)) && Hero->Y >= f->Y-8+(16*(f->TileHeight-1)))||(Hero->Dir == DIR_RIGHT && Hero->X == f->X-16 && Hero->Y <= f->Y+8+(16*(f->TileHeight-1)) && Hero->Y >= f->Y-8+(16*(f->TileHeight-1))));
}
