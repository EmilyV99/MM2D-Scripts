////////////////////////////////////////
//                                    //
//   MM2D Script: Main Import File    //
//                                    //
////////////////////////////////////////

import "std.zh"
//start typedefs
typedef const int GVAR;
typedef const int DEFINE;
//end typedefs

//start header imports
import "scripts/string.zh"
import "scripts/ffcscript.zh"
import "scripts/LinkMovement.zh"
import "tango.zh"
import "tango/font/GUI.zh"
import "tango/font/MajoraFont.zh"
import "ghost.zh"
import "scripts/TypeAString.zh"
import "scripts/Tint.zh"
//end
//start MM Imports
import "scripts/MM2D Scripts/MM2D Constants and Global Vars.z"
import "scripts/MM2D Scripts/MM2D Drawing.z"
import "scripts/MM2D Scripts/MM2D Environment.z"
import "scripts/MM2D Scripts/MM2D Global Scripts.z"
import "scripts/MM2D Scripts/MM2D Height.z"
import "scripts/MM2D Scripts/MM2D Items.z"
import "scripts/MM2D Scripts/MM2D Masks and Forms.z"
import "scripts/MM2D Scripts/MM2D NPC-Cutscene.z"
import "scripts/MM2D Scripts/MM2D Ocarina.z"
import "scripts/MM2D Scripts/MM2D Subscreen.z"
import "scripts/MM2D Scripts/MM2D Tango.z"
import "scripts/MM2D Scripts/MM2D Time.z"
//end
//start ghost imports
import "scripts/ghost/Skulltula.z"
//end

//start AmmoRefiller
ffc script AmmoRefiller
{
	void run(int itemID, int framesToWait, bool spawnMultiple)
	{
		this->Data = COMBO_INVIS;
		for(int i=0;true;i++)
		{
			if(!(i%framesToWait))
			{
				item it = CreateItemAt(itemID,this->X,this->Y);
				if(!spawnMultiple)
				{
					while(it->isValid())Waitframe();
				}
			}
			if(i==framesToWait*10)i=0;
			Waitframe();
		}
	}
}
//end AmmoRefiller
//start sidequests
int hasQuestItem(int itemslot)
{
	if(itemslot==1)
	{
		if(Link->Item[182])return 5;
		else if(Link->Item[181])return 4;
		else if(Link->Item[180])return 3;
		else if(Link->Item[179])return 2;
		else if(Link->Item[178])return 1;
		else return 0;
	}
	else if(itemslot==2)
	{
		if(Link->Item[186])return 1;
		else return 0;
	}
	else if(itemslot==3)
	{
		if(Link->Item[184])return 3;
		else if(Link->Item[185])return 2;
		else if(Link->Item[183])return 1;
		else return 0;
	}
}

int getQuestItem(int itemslot, int num)
{
	if(!num)num = hasQuestItem(itemslot);
	if(!num)return 0;
	if(itemslot==1)
	{
		int qits[] = {178,179,180,181,182};
		return qits[num-1];
	}
	else if(itemslot==2)
	{
		return 186;
	}
	else if(itemslot==3)
	{
		int qits[] = {183,185,184};
		return qits[num-1];
	}
}
//end sidequests
//start NameChange
ffc script renameLink
{
	void run()
	{
		DEFINE CHAR0 = 11260;
		DEFINE BORDERTILE = 11196;
		DEFINE CURSORTILE = 11200;
		DEFINE FIRSTX = 64;
		DEFINE FIRSTY = 64;
		DEFINE CHAR_OFFSET = -32;// The CHAR0 tile points to the "Spacebar" character, which is character 32; thus a character must be offset by -32 to get the correct tile.
		DEFINE Y_OFFSET = -1;
		DEFINE X_OFFSET = 0;
		Screen_Freeze(1);
		startTypingMode(8,true);
		int buf[9];
		int cursor = 0;
		while(true)
		{
			cursor = __getTvar(TVAR_INDEX);
			Screen->FastTile(6,FIRSTX-16,FIRSTY-16,BORDERTILE,2,OP_OPAQUE);
			Screen->FastTile(6,FIRSTX-16,FIRSTY,BORDERTILE+20,2,OP_OPAQUE);
			Screen->FastTile(6,FIRSTX-16,FIRSTY+16,BORDERTILE+40,2,OP_OPAQUE);
			for(int i = FIRSTX; i <= FIRSTX+(16*7); i+=16)
			{
				Screen->FastTile(6,i,FIRSTY-16,BORDERTILE+1,2,OP_OPAQUE);
				Screen->FastTile(6,i,FIRSTY,BORDERTILE+1+20,2,OP_OPAQUE);
				Screen->FastTile(6,i,FIRSTY+16,BORDERTILE+1+40,2,OP_OPAQUE);
			}
			Screen->FastTile(6,FIRSTX+(16*7)+16,FIRSTY-16,BORDERTILE+2,2,OP_OPAQUE);
			Screen->FastTile(6,FIRSTX+(16*7)+16,FIRSTY,BORDERTILE+2+20,2,OP_OPAQUE);
			Screen->FastTile(6,FIRSTX+(16*7)+16,FIRSTY+16,BORDERTILE+2+40,2,OP_OPAQUE);
			if(((gameframe%40)<20) && __getTvar(TVAR_INDEX)<8)Screen->FastTile(6,FIRSTX+(cursor*16),FIRSTY+Y_OFFSET,CURSORTILE,2,OP_OPAQUE);
			remchr(buf,0);
			getType(buf);
			for(int i = 0; i < 8; i++)
			{
				if(buf[i]==0)continue;
				Screen->FastTile(6,FIRSTX+(i*16)+X_OFFSET,FIRSTY+Y_OFFSET,CHAR0+buf[i]+CHAR_OFFSET,2,OP_OPAQUE);
			}
			//32-126 inclusive
			if(typingJustEnded())
			{    
				if(getTypeLength()>1)
				{
					Game->SetSaveName(buf);
					clearTypedInput();
					Screen_Freeze(0);
					Quit();
				}
				else
					startTypingMode(8,true);
			}
			Waitframe();
		}
	}
}
//end NameChange
//start ShowString
ffc script ShowString
{
	void run(int str, int doAfter, bool string)
	{
		if(string)ShowStringAndWait(str);
		else ShowMessageAndWait(str);
		if(!doAfter)Quit();
		switch(doAfter)
		{
			case 1:
				if(tangoTemp)
				{
					saveTheGame();
					Link->Warp(0,0x10);
					resetTime();
				}
				break;
			case 2:
				if(tangoTemp)
				{
					if(hour>=6&&hour<18)
					{
						hour=18;
						time=0;
					}
					else if(day<3)
					{
						hour=6;
						time=0;
						day++;
					}
					else if(hour>12)
					{
						hour=0;
						time=0;
					}
				}
				break;
			case 3:
				if(tangoTemp)
					slowTime = !slowTime;
				break;
		}
	}
}
//end ShowString
//start Misc Functions
void saveTheGame()//start
{
	Screen->DrawScreen(7,LAYERSMAP1,LAYERSCREEN_SAVING,0,0,0);
	Waitframe();
	Game->Save();
}//end
bool linkWalkingOntoFlag(int flag, int setting,bool fullTile)//start
{
	int lspeed = Ceiling(1.5+LinkMovement_GetLinkSpeedBoost());
	return LinkOnFlagMod(flag,LinkMovement[LM_STICKX]*lspeed,LinkMovement[LM_STICKY]*lspeed,setting,fullTile);
}//end
bool LinkOnFlagMod(int flag, int x, int y, int setting, bool fullTile)//start
{
	int yCorrection = 0;
	if(!fullTile)yCorrection=8;
	int combos[4] = {ComboAt(Link->X+x,Link->Y+y+yCorrection),ComboAt(Link->X+x+15,Link->Y+y+yCorrection),ComboAt(Link->X+x+15,Link->Y+y+15),ComboAt(Link->X+x,Link->Y+y+15)};
	for(int i=0;i<4;i++)
	{
		if(setting)
			if(Screen->ComboI[combos[i]]==flag)return true;
		if(setting!=1)
			if(Screen->ComboF[combos[i]]==flag)return true;
	}
	return false;
}//end
bool LinkOnFlag(int flag)//start
{
	int combos[4] = {ComboAt(Link->X,Link->Y),ComboAt(Link->X+15,Link->Y),ComboAt(Link->X+15,Link->Y+15),ComboAt(Link->X,Link->Y+15)};
	for(int i=0;i<4;i++)
	{
		if(Screen->ComboF[combos[i]]==flag)return true;
	}
	return false;
}//end
int dirX(int dir)//start
{
	if(dir==DIR_RIGHT)return 1;
	else if(dir==DIR_LEFT)return -1;
	else return 0;
}//end
int dirY(int dir)//start
{
	if(dir==DIR_DOWN)return 1;
	else if(dir==DIR_UP)return -1;
	else return 0;
}//end
void stopScreenTransition(int pxD,int pxR,int pxL, int pxU)//start
{
	if(Link->Y>160-pxD)Link->InputDown=false;
	if(Link->X>240-pxR)Link->InputRight=false;
	if(Link->X<0+pxL)Link->InputLeft=false;
	if(Link->Y<0+pxU)Link->InputUp=false;
}//end
void NoActionButMoveAndEx4()//start
{
	Link->InputA=false;Link->PressA=false;
	Link->InputB=false;Link->PressB=false;
	Link->InputR=false;Link->PressR=false;
	Link->InputL=false;Link->PressL=false;
	Link->InputEx1=false;Link->PressEx1=false;
	Link->InputEx2=false;Link->PressEx2=false;
	Link->InputEx3=false;Link->PressEx3=false;
}//end
void TotalNoAction()//start
{
	NoAction();
	Link->PressStart=false;
	Link->InputStart=false;
}//end
void NoActionButA()//start
{
	Link->InputDown=false;Link->PressDown=false;
	Link->InputRight=false;Link->PressRight=false;
	Link->InputLeft=false;Link->PressLeft=false;
	Link->InputUp=false;Link->PressUp=false;
	Link->InputB=false;Link->PressB=false;
	Link->InputR=false;Link->PressR=false;
	Link->InputL=false;Link->PressL=false;
	Link->InputEx1=false;Link->PressEx1=false;
	Link->InputEx2=false;Link->PressEx2=false;
	Link->InputEx3=false;Link->PressEx3=false;
}//end
void NoActionButMoveAndEx4AndA()//start
{
	Link->InputB=false;Link->PressB=false;
	Link->InputR=false;Link->PressR=false;
	Link->InputL=false;Link->PressL=false;
	Link->InputEx1=false;Link->PressEx1=false;
	Link->InputEx2=false;Link->PressEx2=false;
	Link->InputEx3=false;Link->PressEx3=false;
}//end
bool isTouchingCombo(int comboID)//start
{
	int x = Link->X;
	int y = Link->Y;
	if(Screen->ComboD[ComboAt(Link->X,Link->Y+8)]==comboID)return true;
	if(Screen->ComboD[ComboAt(Link->X+15,Link->Y+8)]==comboID)return true;
	if(Screen->ComboD[ComboAt(Link->X,Link->Y+15)]==comboID)return true;
	if(Screen->ComboD[ComboAt(Link->X+15,Link->Y+15)]==comboID)return true;
	return false;
}//end
void NoDirs()//start
{
	Link->InputDown=false;Link->PressDown=false;
	Link->InputRight=false;Link->PressRight=false;
	Link->InputLeft=false;Link->PressLeft=false;
	Link->InputUp=false;Link->PressUp=false;
}//end
int countNPCInRange(int x, int y, int radius)//start
{
	int npcCount = 0;
	for(int i = 1;i<=Screen->NumNPCs();i++)
	{
		npc anNPC = Screen->LoadNPC(i);
		if(anNPC->X>x-(radius+anNPC->HitWidth-1)&&anNPC->X<x+radius&&anNPC->Y>y-(radius+anNPC->HitHeight-1)&&anNPC->Y<y+radius)
		{
			npcCount++;
		}
	}
	return npcCount;
}//end
npc getNthNPCInRange(int x, int y, int radius, int num)//start
{
	int npcCount = 0;
	for(int i = 1;i<=Screen->NumNPCs();i++)
	{
		npc anNPC = Screen->LoadNPC(i);
		if(anNPC->X>x-(radius+anNPC->HitWidth-1)&&anNPC->X<x+radius&&anNPC->Y>y-(radius+anNPC->HitHeight-1)&&anNPC->Y<y+radius)
		{
			if(npcCount==num)
			{
				return anNPC;
			}
			else
			{
				npcCount++;
			}
		}
	}
}//end
void Screen_Freeze(int freeze)//start
{
	ffc f1 = Screen->LoadFFC(31);
	ffc f2 = Screen->LoadFFC(32);
	if(freeze==2)
	{
		f1->Data = COMBO_FRZ1;
		f2->Data = COMBO_FRZ2;
		isFrozen=true;
	}
	else if(freeze==1)
	{
		f1->Data = COMBO_FRZ1;
		f2->Data = 0;
		isFrozen=true;
	}
	else
	{
		f1->Data = 0;
		f2->Data = 0;
		isFrozen=false;
	}
}//end
int getNPCfromUID(npc n)//start
{
	for(int i = 1;i<=Screen->NumNPCs();i++)
	{
		npc anNPC = Screen->LoadNPC(i);
		if(anNPC->UID==n->UID)return i;
	}
	return -1;
}//end
void ffcSolid(ffc anFFC)//start
{
	int lspdboost = Ceiling(1.5+LinkMovement_GetLinkSpeedBoost());
	int width = anFFC->EffectWidth;
	int height = anFFC->EffectHeight;
	int bottomheight=height;
	if(!Link->BigHitbox	)bottomheight-=8;
	if(bottomheight<=0)return;
	if(Link->Y>=anFFC->Y-(16+lspdboost))//start inputdown
	{
		if(Link->Y<=anFFC->Y-16)
		{
			if(Link->X>=anFFC->X-15)
			{
				if(Link->X<=anFFC->X+(width-1))
				{
					if(Link->InputDown)
					{
						if(Link->Y!=anFFC->Y-16)Link->Y=anFFC->Y-16;
						Link->Dir=DIR_DOWN;
						if(Link->X>=anFFC->X+(width-4))
						{
							if(CanWalk(Link->X,Link->Y,DIR_RIGHT,Abs(Link->X-(anFFC->X+width)),false))Link->X=anFFC->X+width;
						}
						else if(Link->X<=anFFC->X-12)if(CanWalk(Link->X,Link->Y,DIR_LEFT,Abs(Link->X-anFFC->X-16),false))Link->X=anFFC->X-16;
					}
					Link->InputDown=false;
					Link->PressDown=false;
					return;
				}
			}
		}//end
	}
	if(Link->Y<=anFFC->Y+(bottomheight+lspdboost))//start inputup
	{
		if(Link->Y>=anFFC->Y+bottomheight)
		{
			if(Link->X>=anFFC->X-15)
			{
				if(Link->X<=anFFC->X+(width-1))
				{
					if(Link->InputUp)
					{
						if(Link->Y!=anFFC->Y+bottomheight)Link->Y=anFFC->Y+bottomheight;
						Link->Dir=DIR_UP;
						if(Link->X>=anFFC->X+(width-4))
						{
							if(CanWalk(Link->X,Link->Y,DIR_RIGHT,Abs(Link->X-(anFFC->X+width)),false))Link->X=anFFC->X+width;
						}
						else if(Link->X<=anFFC->X-12)if(CanWalk(Link->X,Link->Y,DIR_LEFT,Abs(Link->X-anFFC->X-16),false))Link->X=anFFC->X-16;
					}
					Link->InputUp=false;
					Link->PressUp=false;
					return;
				}
			}
		}//end
	}
	if(Link->X>=anFFC->X-(16+lspdboost))//start inputright
	{
		if(Link->X<=anFFC->X-16)
		{
			if(Link->Y<=anFFC->Y+(bottomheight-1))
			{
				if(Link->Y>=anFFC->Y-15)
				{
					if(Link->InputRight)
					{
						if(Link->X!=anFFC->X-16)Link->X=anFFC->X-16;
						Link->Dir=DIR_RIGHT;
						if(Link->Y>=anFFC->Y+(bottomheight-4))
						{
							if(CanWalk(Link->X,Link->Y,DIR_DOWN,Abs(Link->Y-(anFFC->Y+bottomheight)),false))Link->Y=anFFC->Y+bottomheight;
						}
						else if(Link->Y<=anFFC->Y-12)if(CanWalk(Link->X,Link->Y,DIR_UP,Abs(Link->Y-(anFFC->Y-16)),false))Link->Y=anFFC->Y-16;
					}
					Link->InputRight=false;
					Link->PressRight=false;
					return;
				}
			}
		}//end
	}
	if(Link->X<=anFFC->X+(width+lspdboost))//start inputleft
	{
		if(Link->X>=anFFC->X+width)
		{
			if(Link->Y>=anFFC->Y-15)
			{
				if(Link->Y<=anFFC->Y+(bottomheight-1))
				{
					if(Link->InputLeft)
					{
						if(Link->X!=anFFC->X+width)Link->X=anFFC->X+width;
						Link->Dir=DIR_LEFT;
						if(Link->Y>=anFFC->Y+(bottomheight-4))
						{
							if(CanWalk(Link->X,Link->Y,DIR_DOWN,Abs(Link->Y-(anFFC->Y+bottomheight)),false))Link->Y=anFFC->Y+bottomheight;
						}
						else if(Link->Y<=anFFC->Y-12)if(CanWalk(Link->X,Link->Y,DIR_UP,Abs(Link->Y-(anFFC->Y-16)),false))Link->Y=anFFC->Y-16;
					}
					Link->InputLeft=false;
					Link->PressLeft=false;
					return;
				}
			}
		}//end
	}
}//end
int LimitFPSStateSave = 00b;//start
void saveFPSstate()
{
	/*if(!(LimitFPSStateSave & 10b)){
		if(Game->CappedFPS)LimitFPSStateSave |= 11b;
		else LimitFPSStateSave |= 10b;
	}*/
}

void loadFPSstate(){
	/*if((LimitFPSStateSave & 10b) == 10b){
		if((LimitFPSStateSave & 01b) == 01b)Game->CappedFPS = true;
		else Game->CappedFPS = false;
		LimitFPSStateSave = 0;
	}*/
}//end
int fullCounter(int counter)//start
{
	return Game->Counter[counter]+Game->DCounter[counter];
}//end
bool isOverworldScreen()//start
{
	dmapdata dm = Game->LoadDMapData(Game->GetCurDMap());
	if(IsDungeonFlag())return false;
	if(IsInteriorFlag())return false;
	if(dm->Type%2)return true;
	return false;
}//end
//end Misc Functions

//Stored in other files:
//my custom settings for tango.zh are located inside tango.zh